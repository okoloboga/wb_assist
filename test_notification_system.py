#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
"""

import asyncio
import sys
import os
from datetime import datetime, timedelta

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from server.app.core.database import get_db
from server.app.features.notifications.notification_service import NotificationService
from server.app.features.wb_api.sync_service import WBSyncService
from server.app.features.user.crud import get_user_by_telegram_id
from server.app.features.wb_api.crud import get_cabinet_by_user_id
from sqlalchemy.orm import Session

async def test_notification_system():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    db = next(get_db())
    
    try:
        # –ù–∞—Ö–æ–¥–∏–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = get_user_by_telegram_id(db, 123456789)  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à telegram_id
        if not user:
            print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å telegram_id=123456789")
            return
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.id} (telegram_id: {user.telegram_id})")
        
        # –ù–∞—Ö–æ–¥–∏–º –∫–∞–±–∏–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cabinet = get_cabinet_by_user_id(db, user.id)
        if not cabinet:
            print("‚ùå –ö–∞–±–∏–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω –∫–∞–±–∏–Ω–µ—Ç: {cabinet.id}")
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
        notification_service = NotificationService()
        sync_service = WBSyncService()
        
        # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        print("\nüìã –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        settings = notification_service.get_user_notification_settings(db, user.id)
        print(f"   - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–∞—Ö: {settings.notify_orders}")
        print(f"   - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –æ—Ç–∑—ã–≤–∞—Ö: {settings.notify_reviews}")
        print(f"   - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –æ—Å—Ç–∞—Ç–∫–∞—Ö: {settings.notify_stocks}")
        print(f"   - Webhook URL: {user.bot_webhook_url}")
        
        # –¢–µ—Å—Ç 2: –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
        print("\nüîÑ –¢–µ—Å—Ç 2: –°–∏–º—É–ª—è—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º last_sync_at –Ω–∞ 1 —á–∞—Å –Ω–∞–∑–∞–¥
        cabinet.last_sync_at = datetime.utcnow() - timedelta(hours=1)
        db.commit()
        
        print(f"   - –û–±–Ω–æ–≤–ª–µ–Ω last_sync_at –Ω–∞: {cabinet.last_sync_at}")
        
        # –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        print("\nüìä –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤, –æ—Ç–∑—ã–≤–æ–≤, –æ—Å—Ç–∞—Ç–∫–æ–≤
        # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã —Ç–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        
        # –¢–µ—Å—Ç 4: –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        print("\nüì¢ –¢–µ—Å—Ç 4: –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        previous_sync_at = cabinet.last_sync_at
        cabinet.last_sync_at = datetime.utcnow()
        db.commit()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        result = await notification_service.process_sync_events(
            db, user.id, cabinet.id, previous_sync_at, cabinet.last_sync_at
        )
        
        print(f"   - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result}")
        
        # –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        print("\nüìö –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        from server.app.features.notifications.models import NotificationHistory
        
        recent_notifications = db.query(NotificationHistory).filter(
            NotificationHistory.user_id == user.id,
            NotificationHistory.created_at > datetime.utcnow() - timedelta(minutes=5)
        ).all()
        
        print(f"   - –ù–µ–¥–∞–≤–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {len(recent_notifications)}")
        for notif in recent_notifications:
            print(f"     * {notif.event_type} –≤ {notif.created_at}")
        
        print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()
    
    finally:
        db.close()

if __name__ == "__main__":
    asyncio.run(test_notification_system())
