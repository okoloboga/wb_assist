"""
–°–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –º–æ–¥—É–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ü–µ–Ω.

–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:
- Telegram Bot
- Email (SMTP)
- Webhook
- –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
"""

import asyncio
import json
import logging
import smtplib
from abc import ABC, abstractmethod
from dataclasses import dataclass, field
from datetime import datetime, timedelta
from email.mime.text import MimeText
from email.mime.multipart import MimeMultipart
from enum import Enum
from typing import Dict, List, Optional, Any, Union, Callable
from urllib.parse import urljoin
import aiohttp
import requests
from jinja2 import Template

from ..config.settings import NotificationConfig, get_settings
from .exceptions import NotificationError


logger = logging.getLogger(__name__)


class NotificationChannel(Enum):
    """–¢–∏–ø—ã –∫–∞–Ω–∞–ª–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    TELEGRAM = "telegram"
    EMAIL = "email"
    WEBHOOK = "webhook"
    CONSOLE = "console"


class NotificationPriority(Enum):
    """–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    LOW = "low"
    NORMAL = "normal"
    HIGH = "high"
    CRITICAL = "critical"


class NotificationType(Enum):
    """–¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    PRICE_CHANGE = "price_change"
    PRICE_ALERT = "price_alert"
    COMPETITOR_ANALYSIS = "competitor_analysis"
    SYSTEM_ERROR = "system_error"
    MONITORING_REPORT = "monitoring_report"
    MARKET_INSIGHT = "market_insight"


@dataclass
class NotificationMessage:
    """–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""
    
    title: str
    content: str
    notification_type: NotificationType
    priority: NotificationPriority = NotificationPriority.NORMAL
    channels: List[NotificationChannel] = field(default_factory=list)
    metadata: Dict[str, Any] = field(default_factory=dict)
    template_data: Dict[str, Any] = field(default_factory=dict)
    created_at: datetime = field(default_factory=datetime.now)
    
    def to_dict(self) -> Dict[str, Any]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä—å."""
        return {
            'title': self.title,
            'content': self.content,
            'type': self.notification_type.value,
            'priority': self.priority.value,
            'channels': [ch.value for ch in self.channels],
            'metadata': self.metadata,
            'template_data': self.template_data,
            'created_at': self.created_at.isoformat()
        }


@dataclass
class NotificationResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""
    
    success: bool
    channel: NotificationChannel
    message_id: Optional[str] = None
    error: Optional[str] = None
    sent_at: datetime = field(default_factory=datetime.now)
    
    def to_dict(self) -> Dict[str, Any]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä—å."""
        return {
            'success': self.success,
            'channel': self.channel.value,
            'message_id': self.message_id,
            'error': self.error,
            'sent_at': self.sent_at.isoformat()
        }


class NotificationChannel_ABC(ABC):
    """–ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    
    def __init__(self, config: NotificationConfig):
        self.config = config
        self.logger = logging.getLogger(f"{__name__}.{self.__class__.__name__}")
    
    @abstractmethod
    async def send(self, message: NotificationMessage) -> NotificationResult:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∫–∞–Ω–∞–ª."""
        pass
    
    @abstractmethod
    def is_available(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–∞–Ω–∞–ª–∞."""
        pass


class TelegramChannel(NotificationChannel_ABC):
    """–ö–∞–Ω–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ Telegram Bot."""
    
    def __init__(self, config: NotificationConfig):
        super().__init__(config)
        self.bot_token = config.telegram_bot_token
        self.chat_ids = config.telegram_chat_ids
        self.base_url = f"https://api.telegram.org/bot{self.bot_token}"
    
    def is_available(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Telegram –∫–∞–Ω–∞–ª–∞."""
        return (
            self.config.telegram_enabled and 
            bool(self.bot_token) and 
            bool(self.chat_ids)
        )
    
    async def send(self, message: NotificationMessage) -> NotificationResult:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram."""
        if not self.is_available():
            return NotificationResult(
                success=False,
                channel=NotificationChannel.TELEGRAM,
                error="Telegram channel not configured or disabled"
            )
        
        try:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
            text = self._format_message(message)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ –≤—Å–µ —á–∞—Ç—ã
            results = []
            async with aiohttp.ClientSession() as session:
                for chat_id in self.chat_ids:
                    result = await self._send_to_chat(session, chat_id, text, message)
                    results.append(result)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (—É—Å–ø–µ—à–Ω–æ –µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ)
            success = any(r.success for r in results)
            errors = [r.error for r in results if r.error]
            
            return NotificationResult(
                success=success,
                channel=NotificationChannel.TELEGRAM,
                message_id=f"telegram_{datetime.now().timestamp()}",
                error="; ".join(errors) if errors else None
            )
            
        except Exception as e:
            self.logger.error(f"Error sending Telegram notification: {e}")
            return NotificationResult(
                success=False,
                channel=NotificationChannel.TELEGRAM,
                error=str(e)
            )
    
    async def _send_to_chat(self, session: aiohttp.ClientSession, chat_id: str, 
                           text: str, message: NotificationMessage) -> NotificationResult:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —á–∞—Ç."""
        try:
            url = f"{self.base_url}/sendMessage"
            data = {
                'chat_id': chat_id,
                'text': text,
                'parse_mode': 'HTML',
                'disable_web_page_preview': True
            }
            
            async with session.post(url, json=data) as response:
                if response.status == 200:
                    result = await response.json()
                    return NotificationResult(
                        success=True,
                        channel=NotificationChannel.TELEGRAM,
                        message_id=str(result.get('result', {}).get('message_id'))
                    )
                else:
                    error_text = await response.text()
                    return NotificationResult(
                        success=False,
                        channel=NotificationChannel.TELEGRAM,
                        error=f"HTTP {response.status}: {error_text}"
                    )
                    
        except Exception as e:
            return NotificationResult(
                success=False,
                channel=NotificationChannel.TELEGRAM,
                error=str(e)
            )
    
    def _format_message(self, message: NotificationMessage) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram."""
        priority_emoji = {
            NotificationPriority.LOW: "‚ÑπÔ∏è",
            NotificationPriority.NORMAL: "üì¢",
            NotificationPriority.HIGH: "‚ö†Ô∏è",
            NotificationPriority.CRITICAL: "üö®"
        }
        
        type_emoji = {
            NotificationType.PRICE_CHANGE: "üí∞",
            NotificationType.PRICE_ALERT: "üîî",
            NotificationType.COMPETITOR_ANALYSIS: "üìä",
            NotificationType.SYSTEM_ERROR: "‚ùå",
            NotificationType.MONITORING_REPORT: "üìà",
            NotificationType.MARKET_INSIGHT: "üí°"
        }
        
        emoji = f"{priority_emoji.get(message.priority, 'üì¢')} {type_emoji.get(message.notification_type, 'üì¢')}"
        
        text = f"{emoji} <b>{message.title}</b>\n\n"
        text += f"{message.content}\n\n"
        text += f"<i>–í—Ä–µ–º—è: {message.created_at.strftime('%Y-%m-%d %H:%M:%S')}</i>"
        
        return text


class EmailChannel(NotificationChannel_ABC):
    """–ö–∞–Ω–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ Email."""
    
    def is_available(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Email –∫–∞–Ω–∞–ª–∞."""
        return (
            self.config.email_enabled and
            bool(self.config.email_from) and
            bool(self.config.email_password) and
            bool(self.config.email_to)
        )
    
    async def send(self, message: NotificationMessage) -> NotificationResult:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ Email."""
        if not self.is_available():
            return NotificationResult(
                success=False,
                channel=NotificationChannel.EMAIL,
                error="Email channel not configured or disabled"
            )
        
        try:
            # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            msg = MimeMultipart('alternative')
            msg['Subject'] = f"[{message.priority.value.upper()}] {message.title}"
            msg['From'] = self.config.email_from
            msg['To'] = ', '.join(self.config.email_to)
            
            # HTML –≤–µ—Ä—Å–∏—è
            html_content = self._format_html_message(message)
            html_part = MimeText(html_content, 'html', 'utf-8')
            msg.attach(html_part)
            
            # –¢–µ–∫—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è
            text_content = self._format_text_message(message)
            text_part = MimeText(text_content, 'plain', 'utf-8')
            msg.attach(text_part)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º
            with smtplib.SMTP(self.config.smtp_server, self.config.smtp_port) as server:
                server.starttls()
                server.login(self.config.email_from, self.config.email_password)
                server.send_message(msg)
            
            return NotificationResult(
                success=True,
                channel=NotificationChannel.EMAIL,
                message_id=f"email_{datetime.now().timestamp()}"
            )
            
        except Exception as e:
            self.logger.error(f"Error sending email notification: {e}")
            return NotificationResult(
                success=False,
                channel=NotificationChannel.EMAIL,
                error=str(e)
            )
    
    def _format_html_message(self, message: NotificationMessage) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å HTML —Å–æ–æ–±—â–µ–Ω–∏–µ."""
        template = Template("""
        <html>
        <head>
            <style>
                body { font-family: Arial, sans-serif; margin: 20px; }
                .header { background-color: #f0f0f0; padding: 10px; border-radius: 5px; }
                .content { margin: 20px 0; }
                .footer { font-size: 12px; color: #666; margin-top: 20px; }
                .priority-{{ priority }} { border-left: 4px solid {{ priority_color }}; padding-left: 10px; }
            </style>
        </head>
        <body>
            <div class="header priority-{{ priority }}">
                <h2>{{ title }}</h2>
                <p><strong>–¢–∏–ø:</strong> {{ type_name }} | <strong>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</strong> {{ priority_name }}</p>
            </div>
            <div class="content">
                {{ content | safe }}
            </div>
            <div class="footer">
                <p>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {{ created_at }}</p>
            </div>
        </body>
        </html>
        """)
        
        priority_colors = {
            NotificationPriority.LOW: "#28a745",
            NotificationPriority.NORMAL: "#007bff",
            NotificationPriority.HIGH: "#ffc107",
            NotificationPriority.CRITICAL: "#dc3545"
        }
        
        return template.render(
            title=message.title,
            content=message.content.replace('\n', '<br>'),
            priority=message.priority.value,
            priority_name=message.priority.value.title(),
            priority_color=priority_colors.get(message.priority, "#007bff"),
            type_name=message.notification_type.value.replace('_', ' ').title(),
            created_at=message.created_at.strftime('%Y-%m-%d %H:%M:%S')
        )
    
    def _format_text_message(self, message: NotificationMessage) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
        text = f"{message.title}\n"
        text += "=" * len(message.title) + "\n\n"
        text += f"–¢–∏–ø: {message.notification_type.value.replace('_', ' ').title()}\n"
        text += f"–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {message.priority.value.title()}\n\n"
        text += f"{message.content}\n\n"
        text += f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {message.created_at.strftime('%Y-%m-%d %H:%M:%S')}"
        return text


class WebhookChannel(NotificationChannel_ABC):
    """–ö–∞–Ω–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ Webhook."""
    
    def is_available(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Webhook –∫–∞–Ω–∞–ª–∞."""
        return self.config.webhook_enabled and bool(self.config.webhook_url)
    
    async def send(self, message: NotificationMessage) -> NotificationResult:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Webhook."""
        if not self.is_available():
            return NotificationResult(
                success=False,
                channel=NotificationChannel.WEBHOOK,
                error="Webhook channel not configured or disabled"
            )
        
        try:
            payload = {
                'notification': message.to_dict(),
                'timestamp': datetime.now().isoformat(),
                'source': 'price_monitoring_system'
            }
            
            headers = {
                'Content-Type': 'application/json',
                **self.config.webhook_headers
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    self.config.webhook_url,
                    json=payload,
                    headers=headers,
                    timeout=aiohttp.ClientTimeout(total=30)
                ) as response:
                    if response.status < 400:
                        return NotificationResult(
                            success=True,
                            channel=NotificationChannel.WEBHOOK,
                            message_id=f"webhook_{datetime.now().timestamp()}"
                        )
                    else:
                        error_text = await response.text()
                        return NotificationResult(
                            success=False,
                            channel=NotificationChannel.WEBHOOK,
                            error=f"HTTP {response.status}: {error_text}"
                        )
                        
        except Exception as e:
            self.logger.error(f"Error sending webhook notification: {e}")
            return NotificationResult(
                success=False,
                channel=NotificationChannel.WEBHOOK,
                error=str(e)
            )


class ConsoleChannel(NotificationChannel_ABC):
    """–ö–∞–Ω–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –∫–æ–Ω—Å–æ–ª—å (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)."""
    
    def is_available(self) -> bool:
        """–ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–µ–Ω."""
        return True
    
    async def send(self, message: NotificationMessage) -> NotificationResult:
        """–í—ã–≤–µ—Å—Ç–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å."""
        try:
            print(f"\n{'='*60}")
            print(f"NOTIFICATION: {message.title}")
            print(f"Type: {message.notification_type.value}")
            print(f"Priority: {message.priority.value}")
            print(f"Time: {message.created_at.strftime('%Y-%m-%d %H:%M:%S')}")
            print(f"{'='*60}")
            print(message.content)
            print(f"{'='*60}\n")
            
            return NotificationResult(
                success=True,
                channel=NotificationChannel.CONSOLE,
                message_id=f"console_{datetime.now().timestamp()}"
            )
            
        except Exception as e:
            return NotificationResult(
                success=False,
                channel=NotificationChannel.CONSOLE,
                error=str(e)
            )


class NotificationService:
    """–û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    
    def __init__(self, config: Optional[NotificationConfig] = None):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
        self.config = config or get_settings().notification
        self.logger = logging.getLogger(__name__)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–Ω–∞–ª—ã
        self.channels: Dict[NotificationChannel, NotificationChannel_ABC] = {
            NotificationChannel.TELEGRAM: TelegramChannel(self.config),
            NotificationChannel.EMAIL: EmailChannel(self.config),
            NotificationChannel.WEBHOOK: WebhookChannel(self.config),
            NotificationChannel.CONSOLE: ConsoleChannel(self.config)
        }
        
        # –ö—ç—à –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–ø–∞–º–∞
        self._notification_cache: Dict[str, datetime] = {}
        
        # –®–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π
        self.message_templates = MessageTemplates()
    
    async def send_notification(
        self, 
        message: NotificationMessage,
        channels: Optional[List[NotificationChannel]] = None
    ) -> List[NotificationResult]:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã.
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            channels: –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∫–∞–Ω–∞–ª—ã –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è)
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        if not self.config.enabled:
            self.logger.info("Notifications are disabled")
            return []
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–Ω–∞–ª—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        target_channels = channels or message.channels
        if not target_channels:
            target_channels = self._get_default_channels()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º cooldown
        if self._is_in_cooldown(message):
            self.logger.info(f"Notification in cooldown: {message.title}")
            return []
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
        results = []
        for channel_type in target_channels:
            channel = self.channels.get(channel_type)
            if channel and channel.is_available():
                try:
                    result = await channel.send(message)
                    results.append(result)
                    
                    if result.success:
                        self.logger.info(f"Notification sent via {channel_type.value}: {message.title}")
                    else:
                        self.logger.error(f"Failed to send via {channel_type.value}: {result.error}")
                        
                except Exception as e:
                    self.logger.error(f"Error sending via {channel_type.value}: {e}")
                    results.append(NotificationResult(
                        success=False,
                        channel=channel_type,
                        error=str(e)
                    ))
            else:
                self.logger.warning(f"Channel {channel_type.value} not available")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
        self._update_cache(message)
        
        return results
    
    def _get_default_channels(self) -> List[NotificationChannel]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."""
        channels = []
        if self.config.telegram_enabled:
            channels.append(NotificationChannel.TELEGRAM)
        if self.config.email_enabled:
            channels.append(NotificationChannel.EMAIL)
        if self.config.webhook_enabled:
            channels.append(NotificationChannel.WEBHOOK)
        
        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Å–æ–ª—å
        if not channels:
            channels.append(NotificationChannel.CONSOLE)
            
        return channels
    
    def _is_in_cooldown(self, message: NotificationMessage) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –ø–µ—Ä–∏–æ–¥–µ cooldown."""
        if not self.config.batch_notifications:
            return False
        
        cache_key = f"{message.notification_type.value}_{hash(message.title)}"
        last_sent = self._notification_cache.get(cache_key)
        
        if last_sent:
            cooldown_period = timedelta(minutes=self.config.notification_cooldown_minutes)
            return datetime.now() - last_sent < cooldown_period
        
        return False
    
    def _update_cache(self, message: NotificationMessage) -> None:
        """–û–±–Ω–æ–≤–∏—Ç—å –∫—ç—à —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
        cache_key = f"{message.notification_type.value}_{hash(message.title)}"
        self._notification_cache[cache_key] = datetime.now()
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
        cutoff_time = datetime.now() - timedelta(hours=24)
        self._notification_cache = {
            k: v for k, v in self._notification_cache.items() 
            if v > cutoff_time
        }
    
    async def send_price_change_notification(
        self,
        product_name: str,
        old_price: float,
        new_price: float,
        change_percent: float,
        competitor_name: str = "",
        channels: Optional[List[NotificationChannel]] = None
    ) -> List[NotificationResult]:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã."""
        message = self.message_templates.create_price_change_message(
            product_name=product_name,
            old_price=old_price,
            new_price=new_price,
            change_percent=change_percent,
            competitor_name=competitor_name
        )
        
        return await self.send_notification(message, channels)
    
    async def send_competitor_analysis_notification(
        self,
        product_name: str,
        analysis_data: Dict[str, Any],
        channels: Optional[List[NotificationChannel]] = None
    ) -> List[NotificationResult]:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤."""
        message = self.message_templates.create_competitor_analysis_message(
            product_name=product_name,
            analysis_data=analysis_data
        )
        
        return await self.send_notification(message, channels)
    
    async def send_system_error_notification(
        self,
        error_message: str,
        error_details: Optional[Dict[str, Any]] = None,
        channels: Optional[List[NotificationChannel]] = None
    ) -> List[NotificationResult]:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–∏—Å—Ç–µ–º–Ω–æ–π –æ—à–∏–±–∫–µ."""
        message = self.message_templates.create_system_error_message(
            error_message=error_message,
            error_details=error_details or {}
        )
        
        return await self.send_notification(message, channels)


class MessageTemplates:
    """–®–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    
    def create_price_change_message(
        self,
        product_name: str,
        old_price: float,
        new_price: float,
        change_percent: float,
        competitor_name: str = ""
    ) -> NotificationMessage:
        """–°–æ–∑–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã."""
        change_direction = "—É–≤–µ–ª–∏—á–∏–ª–∞—Å—å" if new_price > old_price else "—É–º–µ–Ω—å—à–∏–ª–∞—Å—å"
        change_emoji = "üìà" if new_price > old_price else "üìâ"
        
        title = f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã: {product_name}"
        
        content = f"{change_emoji} –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ '{product_name}' {change_direction}\n\n"
        content += f"–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞: {old_price:.2f} ‚ÇΩ\n"
        content += f"–ù–æ–≤–∞—è —Ü–µ–Ω–∞: {new_price:.2f} ‚ÇΩ\n"
        content += f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ: {change_percent:+.1f}%\n"
        
        if competitor_name:
            content += f"–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç: {competitor_name}\n"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ —Ä–∞–∑–º–µ—Ä—É –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if abs(change_percent) >= 20:
            priority = NotificationPriority.CRITICAL
        elif abs(change_percent) >= 10:
            priority = NotificationPriority.HIGH
        else:
            priority = NotificationPriority.NORMAL
        
        return NotificationMessage(
            title=title,
            content=content,
            notification_type=NotificationType.PRICE_CHANGE,
            priority=priority,
            template_data={
                'product_name': product_name,
                'old_price': old_price,
                'new_price': new_price,
                'change_percent': change_percent,
                'competitor_name': competitor_name
            }
        )
    
    def create_competitor_analysis_message(
        self,
        product_name: str,
        analysis_data: Dict[str, Any]
    ) -> NotificationMessage:
        """–°–æ–∑–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤."""
        title = f"–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤: {product_name}"
        
        content = f"üìä –ó–∞–≤–µ—Ä—à–µ–Ω –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ '{product_name}'\n\n"
        
        if 'competitors_count' in analysis_data:
            content += f"–ù–∞–π–¥–µ–Ω–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤: {analysis_data['competitors_count']}\n"
        
        if 'average_price' in analysis_data:
            content += f"–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {analysis_data['average_price']:.2f} ‚ÇΩ\n"
        
        if 'min_price' in analysis_data:
            content += f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {analysis_data['min_price']:.2f} ‚ÇΩ\n"
        
        if 'max_price' in analysis_data:
            content += f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {analysis_data['max_price']:.2f} ‚ÇΩ\n"
        
        if 'market_position' in analysis_data:
            content += f"–ü–æ–∑–∏—Ü–∏—è –Ω–∞ —Ä—ã–Ω–∫–µ: {analysis_data['market_position']}\n"
        
        if 'recommendations' in analysis_data:
            content += f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n{analysis_data['recommendations']}"
        
        return NotificationMessage(
            title=title,
            content=content,
            notification_type=NotificationType.COMPETITOR_ANALYSIS,
            priority=NotificationPriority.NORMAL,
            template_data=analysis_data
        )
    
    def create_system_error_message(
        self,
        error_message: str,
        error_details: Dict[str, Any]
    ) -> NotificationMessage:
        """–°–æ–∑–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–∏—Å—Ç–µ–º–Ω–æ–π –æ—à–∏–±–∫–µ."""
        title = "–°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞"
        
        content = f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ü–µ–Ω\n\n"
        content += f"–û—à–∏–±–∫–∞: {error_message}\n"
        
        if 'timestamp' in error_details:
            content += f"–í—Ä–µ–º—è: {error_details['timestamp']}\n"
        
        if 'component' in error_details:
            content += f"–ö–æ–º–ø–æ–Ω–µ–Ω—Ç: {error_details['component']}\n"
        
        if 'traceback' in error_details:
            content += f"\n–î–µ—Ç–∞–ª–∏:\n{error_details['traceback'][:500]}..."
        
        return NotificationMessage(
            title=title,
            content=content,
            notification_type=NotificationType.SYSTEM_ERROR,
            priority=NotificationPriority.CRITICAL,
            template_data=error_details
        )


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
_notification_service: Optional[NotificationService] = None


def get_notification_service(config: Optional[NotificationConfig] = None) -> NotificationService:
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    global _notification_service
    
    if _notification_service is None:
        _notification_service = NotificationService(config)
    
    return _notification_service


def reset_notification_service() -> None:
    """–°–±—Ä–æ—Å–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞."""
    global _notification_service
    _notification_service = None