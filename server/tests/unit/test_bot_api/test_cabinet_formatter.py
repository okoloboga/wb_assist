"""
–¢–µ—Å—Ç—ã –¥–ª—è BotMessageFormatter - —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π WB –∫–∞–±–∏–Ω–µ—Ç–æ–≤
"""

import pytest
from app.features.bot_api.formatter import BotMessageFormatter


class TestBotMessageFormatterCabinet:
    """–¢–µ—Å—Ç—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–±–∏–Ω–µ—Ç–æ–≤"""

    @pytest.fixture
    def formatter(self):
        """–§–∏–∫—Å—Ç—É—Ä–∞ —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä–∞"""
        return BotMessageFormatter()

    def test_format_cabinet_status_message_single_cabinet(self, formatter):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ–¥–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞"""
        cabinet_data = {
            "cabinets": [
                {
                    "id": "cabinet_123",
                    "name": "SLAVALOOK BRAND",
                    "status": "active",
                    "connected_at": "2025-01-28T10:15:30",
                    "last_sync": "2025-01-28T14:30:15",
                    "api_key_status": "valid",
                    "permissions": ["read_orders", "read_stocks", "read_reviews"],
                    "statistics": {
                        "products_count": 45,
                        "orders_today": 19,
                        "reviews_today": 5
                    }
                }
            ],
            "total_cabinets": 1,
            "active_cabinets": 1,
            "last_check": "2025-01-28T14:30:15"
        }
    
        result = formatter.format_cabinet_status_message(cabinet_data)
    
        assert "üîë –°–¢–ê–¢–£–° WB –ö–ê–ë–ò–ù–ï–¢–û–í" in result
        assert "SLAVALOOK BRAND" in result

    def test_format_cabinet_status_message_no_cabinets(self, formatter):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –±–µ–∑ –∫–∞–±–∏–Ω–µ—Ç–æ–≤"""
        cabinet_data = {
            "cabinets": [],
            "total_cabinets": 0,
            "active_cabinets": 0,
            "last_check": "2025-01-28T14:30:15"
        }
    
        result = formatter.format_cabinet_status_message(cabinet_data)
    
        assert "üîë –°–¢–ê–¢–£–° WB –ö–ê–ë–ò–ù–ï–¢–û–í" in result
        assert "–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–∞–±–∏–Ω–µ—Ç–æ–≤" in result

    def test_format_cabinet_status_message_multiple_cabinets(self, formatter):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–∞–±–∏–Ω–µ—Ç–æ–≤"""
        cabinet_data = {
            "cabinets": [
                {
                    "id": "cabinet_123",
                    "name": "SLAVALOOK BRAND",
                    "status": "active",
                    "connected_at": "2025-01-28T10:15:30",
                    "last_sync": "2025-01-28T14:30:15",
                    "api_key_status": "valid",
                    "permissions": ["read_orders", "read_stocks", "read_reviews"],
                    "statistics": {
                        "products_count": 45,
                        "orders_today": 19,
                        "reviews_today": 5
                    }
                },
                {
                    "id": "cabinet_456",
                    "name": "SECOND BRAND",
                    "status": "inactive",
                    "connected_at": "2025-01-27T09:30:00",
                    "last_sync": "2025-01-27T18:45:00",
                    "api_key_status": "expired",
                    "permissions": ["read_orders"],
                    "statistics": {
                        "products_count": 12,
                        "orders_today": 0,
                        "reviews_today": 1
                    }
                }
            ],
            "total_cabinets": 2,
            "active_cabinets": 1,
            "last_check": "2025-01-28T14:30:15"
        }
        
        result = formatter.format_cabinet_status_message(cabinet_data)
    
        assert "üîë –°–¢–ê–¢–£–° WB –ö–ê–ë–ò–ù–ï–¢–û–í" in result
        assert "SLAVALOOK BRAND" in result
        assert "SECOND BRAND" in result

    def test_format_cabinet_connect_success_message(self, formatter):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        connect_data = {
            "cabinet_id": "cabinet_123",
            "cabinet_name": "SLAVALOOK BRAND",
            "status": "connected",
            "connected_at": "2025-01-28T14:30:15",
            "api_key_status": "valid",
            "permissions": ["read_orders", "read_stocks", "read_reviews"],
            "validation": {
                "api_key_valid": True,
                "permissions_ok": True,
                "connection_test": "success",
                "data_access": "confirmed"
            }
        }
        
        result = formatter.format_cabinet_connect_message(connect_data)
    
        assert "‚úÖ –ö–ê–ë–ò–ù–ï–¢ –ü–û–î–ö–õ–Æ–ß–ï–ù!" in result
        assert "SLAVALOOK BRAND" in result

    def test_format_cabinet_connect_error_message(self, formatter):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ—à–∏–±–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        error_data = {
            "error": "Invalid API key",
            "status_code": 400
        }
        
        result = formatter.format_cabinet_connect_error_message(error_data)
        
        assert "‚ùå –û–®–ò–ë–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø" in result
        assert "Invalid API key" in result

    def test_format_cabinet_already_exists_message(self, formatter):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º –∫–∞–±–∏–Ω–µ—Ç–µ"""
        error_data = {
            "error": "Cabinet already connected",
            "status_code": 409
        }
        
        result = formatter.format_cabinet_already_exists_message(error_data)
        
        assert "‚ö†Ô∏è –ö–ê–ë–ò–ù–ï–¢ –£–ñ–ï –ü–û–î–ö–õ–Æ–ß–ï–ù" in result
        assert "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç WB" in result

    def test_format_time_ago(self, formatter):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ '–Ω–∞–∑–∞–¥'"""
        from datetime import datetime, timezone, timedelta
        
        # –¢–µ—Å—Ç –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ 2 –º–∏–Ω—É—Ç—ã –Ω–∞–∑–∞–¥
        now = datetime.now(timezone.utc)
        two_minutes_ago = now - timedelta(minutes=2)
        result = formatter._format_time_ago(two_minutes_ago)
        assert result == "2 –º–∏–Ω –Ω–∞–∑–∞–¥"

    def test_format_permissions_list(self, formatter):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞"""
        permissions = ["read_orders", "read_stocks", "read_reviews"]
        result = formatter._format_permissions(permissions)
        assert "–ß—Ç–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤" in result
        assert "–ß—Ç–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤" in result
        assert "–ß—Ç–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤" in result

    def test_format_api_key_status(self, formatter):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ API –∫–ª—é—á–∞"""
        assert formatter._format_api_key_status("valid") == "üîë –í–∞–ª–∏–¥–Ω—ã–π"
        assert formatter._format_api_key_status("expired") == "‚è∞ –ò—Å—Ç–µ–∫"
        assert formatter._format_api_key_status("invalid") == "‚ö†Ô∏è –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π"
        assert formatter._format_api_key_status("unknown") == "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"

    def test_format_cabinet_status(self, formatter):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–±–∏–Ω–µ—Ç–∞"""
        assert formatter._format_cabinet_status("active") == "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω"
        assert formatter._format_cabinet_status("inactive") == "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
        assert formatter._format_cabinet_status("suspended") == "‚è∏Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        assert formatter._format_cabinet_status("unknown") == "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"

    def test_message_length_validation_cabinet(self, formatter):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–∞–±–∏–Ω–µ—Ç–æ–≤"""
        # –°–æ–∑–¥–∞–µ–º –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        long_cabinet_data = {
            "cabinets": [
                {
                    "id": f"cabinet_{i}",
                    "name": f"–û–ß–ï–ù–¨ –î–õ–ò–ù–ù–û–ï –ù–ê–ó–í–ê–ù–ò–ï –ö–ê–ë–ò–ù–ï–¢–ê {i} " * 10,
                    "status": "active",
                    "connected_at": "2025-01-28T10:15:30",
                    "last_sync": "2025-01-28T14:30:15",
                    "api_key_status": "valid",
                    "permissions": ["read_orders", "read_stocks", "read_reviews"],
                    "statistics": {
                        "products_count": 45,
                        "orders_today": 19,
                        "reviews_today": 5
                    }
                } for i in range(20)  # 20 –∫–∞–±–∏–Ω–µ—Ç–æ–≤
            ],
            "total_cabinets": 20,
            "active_cabinets": 20,
            "last_check": "2025-01-28T14:30:15"
        }
        
        result = formatter.format_cabinet_status_message(long_cabinet_data)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ
        assert len(result) <= 4096  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ Telegram —Å–æ–æ–±—â–µ–Ω–∏—è
        assert "üîë –°–¢–ê–¢–£–° WB –ö–ê–ë–ò–ù–ï–¢–û–í" in result
        
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ, –¥–æ–ª–∂–Ω–æ –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –Ω–∞ "..."
        if len(result) >= 4090:  # –ë–ª–∏–∑–∫–æ –∫ –ª–∏–º–∏—Ç—É
            assert result.endswith("...")
        else:
            # –ï—Å–ª–∏ –Ω–µ –æ–±—Ä–µ–∑–∞–Ω–æ, –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–±–∏–Ω–µ—Ç–∞—Ö
            assert "–û–ß–ï–ù–¨ –î–õ–ò–ù–ù–û–ï –ù–ê–ó–í–ê–ù–ò–ï –ö–ê–ë–ò–ù–ï–¢–ê" in result