"""
Unit —Ç–µ—Å—Ç—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π Bot API
"""

import pytest
from datetime import datetime, timezone
from app.features.bot_api.formatter import BotMessageFormatter


class TestBotMessageFormatter:
    """–¢–µ—Å—Ç—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π Telegram"""

    @pytest.fixture
    def formatter(self):
        """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        return BotMessageFormatter()

    def test_format_dashboard_message(self, formatter):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è dashboard —Å–æ–æ–±—â–µ–Ω–∏—è"""
        dashboard_data = {
            "cabinet_name": "SLAVALOOK BRAND",
            "last_sync": "2 –º–∏–Ω –Ω–∞–∑–∞–¥",
            "status": "–ê–∫—Ç–∏–≤–µ–Ω",
            "products": {
                "total": 45,
                "active": 42,
                "moderation": 3,
                "critical_stocks": 3
            },
            "orders_today": {
                "count": 19,
                "amount": 26790,
                "yesterday_count": 24,
                "yesterday_amount": 33840,
                "growth_percent": 12
            },
            "stocks": {
                "critical_count": 3,
                "zero_count": 1,
                "attention_needed": 2,
                "top_product": "–®–∏—Ñ–æ–Ω–æ–≤–∞—è –±–ª—É–∑–∫–∞ (73 —à—Ç/7–¥–Ω)"
            },
            "reviews": {
                "new_count": 5,
                "average_rating": 4.8,
                "unanswered": 2,
                "total": 214
            },
            "recommendations": [
                "–ü–æ–ø–æ–ª–Ω–∏—Ç—å –æ—Å—Ç–∞—Ç–∫–∏ M, L, XL —Ä–∞–∑–º–µ—Ä–æ–≤",
                "–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ 2 –æ—Ç–∑—ã–≤–∞",
                "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"
            ]
        }
        
        result = formatter.format_dashboard(dashboard_data)
        
        assert "üìä –í–ê–® –ö–ê–ë–ò–ù–ï–¢ WB" in result
        assert "SLAVALOOK BRAND" in result
        assert "–ü–æ—Å–ª–µ–¥–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: 2 –º–∏–Ω –Ω–∞–∑–∞–¥" in result
        assert "–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: 45" in result
        assert "–ù–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤: 19" in result
        assert "–ù–∞ —Å—É–º–º—É: 26 790‚ÇΩ" in result
        assert "–ö—Ä–∏—Ç–∏—á–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: 3" in result
        assert "–ù–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤: 5" in result
        assert "–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: 4.8/5" in result

    def test_format_orders_message(self, formatter):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–∞—Ö"""
        orders_data = {
            "orders": [
                {
                    "id": 154,
                    "date": "2025-10-03T12:48:00",
                    "amount": 1410,
                    "product_name": "–®–∏—Ñ–æ–Ω–æ–≤–∞—è –±–ª—É–∑–∫–∞ (S)",
                    "brand": "SLAVALOOK BRAND",
                    "warehouse_from": "–≠–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–ª—å",
                    "warehouse_to": "–¶–§–û/–ú–æ—Å–∫–≤–∞",
                    "commission_percent": 29.5,
                    "rating": 4.8
                }
            ],
            "statistics": {
                "today_count": 19,
                "today_amount": 26790,
                "average_check": 1410,
                "growth_percent": 12,
                "amount_growth_percent": 8
            },
            "pagination": {
                "limit": 10,
                "offset": 0,
                "total": 19,
                "has_more": False
            }
        }
        
        result = formatter.format_orders(orders_data)
        
        assert "üõí –ü–û–°–õ–ï–î–ù–ò–ï –ó–ê–ö–ê–ó–´" in result
        assert "#154 | 12:48 | 1 410‚ÇΩ" in result
        assert "–®–∏—Ñ–æ–Ω–æ–≤–∞—è –±–ª—É–∑–∫–∞ (S)" in result
        assert "SLAVALOOK BRAND" in result
        assert "–≠–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–ª—å -> –¶–§–û/–ú–æ—Å–∫–≤–∞" in result
        assert "–ö–æ–º–∏—Å—Å–∏—è: 29.5%" in result
        assert "–†–µ–π—Ç–∏–Ω–≥: 4.8‚≠ê" in result
        assert "–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: 19" in result
        assert "–û–±—â–∞—è —Å—É–º–º–∞: 26 790‚ÇΩ" in result

    def test_format_critical_stocks_message(self, formatter):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –æ—Å—Ç–∞—Ç–∫–∞—Ö"""
        stocks_data = {
            "critical_products": [
                {
                    "nm_id": 270591287,
                    "name": "–®–∏—Ñ–æ–Ω–æ–≤–∞—è –±–ª—É–∑–∫–∞",
                    "brand": "SLAVALOOK BRAND",
                    "stocks": {"S": 13, "M": 1, "L": 0, "XL": 0},
                    "critical_sizes": ["M"],
                    "zero_sizes": ["L", "XL"],
                    "sales_per_day": 29.29,
                    "price": 1410,
                    "commission_percent": 29.5,
                    "days_left": {"M": 0, "S": 1}
                }
            ],
            "zero_products": [
                {
                    "nm_id": 270591289,
                    "name": "–ü–ª–∞—Ç—å–µ –≤–µ—á–µ—Ä–Ω–µ–µ",
                    "brand": "ELEGANCE",
                    "stocks": {"S": 0, "M": 0, "L": 0, "XL": 0},
                    "sales_per_day": 8.2,
                    "price": 2340,
                    "commission_percent": 32.0
                }
            ],
            "summary": {
                "critical_count": 2,
                "zero_count": 1,
                "attention_needed": 3,
                "potential_losses": 52.7
            },
            "recommendations": [
                "–°—Ä–æ—á–Ω–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å M, L, XL —Ä–∞–∑–º–µ—Ä—ã",
                "–ó–∞–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã —Å –Ω—É–ª–µ–≤—ã–º–∏ –æ—Å—Ç–∞—Ç–∫–∞–º–∏"
            ]
        }
        
        result = formatter.format_critical_stocks(stocks_data)
        
        assert "üì¶ –ö–†–ò–¢–ò–ß–ù–´–ï –û–°–¢–ê–¢–ö–ò" in result
        assert "‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ù–û" in result
        assert "–®–∏—Ñ–æ–Ω–æ–≤–∞—è –±–ª—É–∑–∫–∞" in result
        assert "SLAVALOOK BRAND" in result
        assert "–û—Å—Ç–∞—Ç–∫–∏: S(13) M(1) L(0) XL(0)" in result
        assert "M(1) - –æ—Å—Ç–∞–ª–æ—Å—å –Ω–∞ 0 –¥–Ω–µ–π!" in result
        assert "üî¥ –ù–£–õ–ï–í–´–ï –û–°–¢–ê–¢–ö–ò" in result
        assert "–ü–ª–∞—Ç—å–µ –≤–µ—á–µ—Ä–Ω–µ–µ" in result
        assert "–í—Å–µ —Ä–∞–∑–º–µ—Ä—ã = 0!" in result
        assert "–ö—Ä–∏—Ç–∏—á–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: 2" in result
        assert "–° –Ω—É–ª–µ–≤—ã–º–∏ –æ—Å—Ç–∞—Ç–∫–∞–º–∏: 1" in result

    def test_format_reviews_message(self, formatter):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—Ç–∑—ã–≤–∞—Ö"""
        reviews_data = {
            "new_reviews": [
                {
                    "id": "154",
                    "product_name": "–®–∏—Ñ–æ–Ω–æ–≤–∞—è –±–ª—É–∑–∫–∞",
                    "rating": 5,
                    "text": "–û—Ç–ª–∏—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ, –±—ã—Å—Ç—Ä–æ –¥–æ—Å—Ç–∞–≤–∏–ª–∏!",
                    "time_ago": "2 —á–∞—Å–∞ –Ω–∞–∑–∞–¥",
                    "order_id": 154
                }
            ],
            "unanswered_questions": [
                {
                    "id": "q1",
                    "product_name": "–î–∂–∏–Ω—Å—ã –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ",
                    "text": "–ö–∞–∫–æ–π —Ä–∞–∑–º–µ—Ä –≤—ã–±—Ä–∞—Ç—å?",
                    "time_ago": "3 —á–∞—Å–∞ –Ω–∞–∑–∞–¥"
                }
            ],
            "statistics": {
                "average_rating": 4.8,
                "total_reviews": 214,
                "answered_count": 212,
                "answered_percent": 99,
                "attention_needed": 1,
                "new_today": 5
            },
            "recommendations": [
                "–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –æ—Ç–∑—ã–≤ —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º 2‚≠ê",
                "–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ 2 –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–∞"
            ]
        }
        
        result = formatter.format_reviews(reviews_data)
        
        assert "‚≠ê –û–¢–ó–´–í–´ –ò –í–û–ü–†–û–°–´" in result
        assert "üÜï –ù–û–í–´–ï –û–¢–ó–´–í–´ (1):" in result
        assert "‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê –®–∏—Ñ–æ–Ω–æ–≤–∞—è –±–ª—É–∑–∫–∞ | 5/5" in result
        assert "–û—Ç–ª–∏—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ, –±—ã—Å—Ç—Ä–æ –¥–æ—Å—Ç–∞–≤–∏–ª–∏!" in result
        assert "‚ùì –ù–ï–û–¢–í–ï–ß–ï–ù–ù–´–ï –í–û–ü–†–û–°–´ (1):" in result
        assert "–ö–∞–∫–æ–π —Ä–∞–∑–º–µ—Ä –≤—ã–±—Ä–∞—Ç—å?" in result
        assert "–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: 4.8/5" in result
        assert "–í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: 214" in result
        assert "–û—Ç–≤–µ—á–µ–Ω–æ: 212 (99%)" in result

    def test_format_analytics_message(self, formatter):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –∞–Ω–∞–ª–∏—Ç–∏–∫–µ"""
        analytics_data = {
            "sales_periods": {
                "today": {"count": 19, "amount": 26790},
                "yesterday": {"count": 24, "amount": 33840},
                "7_days": {"count": 156, "amount": 234500},
                "30_days": {"count": 541, "amount": 892300},
                "90_days": {"count": 686, "amount": 1156800}
            },
            "dynamics": {
                "yesterday_growth_percent": -21,
                "week_growth_percent": 12,
                "average_check": 1410,
                "conversion_percent": 3.2
            },
            "top_products": [
                {
                    "nm_id": 270591287,
                    "name": "–®–∏—Ñ–æ–Ω–æ–≤–∞—è –±–ª—É–∑–∫–∞",
                    "sales_count": 73,
                    "sales_amount": 46800,
                    "rating": 4.8,
                    "stocks": {"S": 13, "M": 1, "L": 0, "XL": 0}
                }
            ],
            "stocks_summary": {
                "critical_count": 3,
                "zero_count": 1,
                "attention_needed": 2,
                "total_products": 45
            },
            "recommendations": [
                "–ü–æ–ø–æ–ª–Ω–∏—Ç—å –æ—Å—Ç–∞—Ç–∫–∏ —Ç–æ–ø-—Ç–æ–≤–∞—Ä–æ–≤",
                "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–∞–¥–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂"
            ]
        }
        
        result = formatter.format_analytics(analytics_data)
        
        assert "üìà –ê–ù–ê–õ–ò–¢–ò–ö–ê –ü–†–û–î–ê–ñ" in result
        assert "–°–µ–≥–æ–¥–Ω—è: 19 –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ 26 790‚ÇΩ" in result
        assert "–í—á–µ—Ä–∞: 24 –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ 33 840‚ÇΩ" in result
        assert "–ó–∞ 7 –¥–Ω–µ–π: 156 –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ 234 500‚ÇΩ" in result
        assert "–†–æ—Å—Ç –∫ –≤—á–µ—Ä–∞: -21% –ø–æ –∑–∞–∫–∞–∑–∞–º" in result
        assert "–°—Ä–µ–¥–Ω–∏–π —á–µ–∫: 1 410‚ÇΩ" in result
        assert "–ö–æ–Ω–≤–µ—Ä—Å–∏—è: 3.2%" in result
        assert "üèÜ –¢–û–ü –¢–û–í–ê–†–û–í" in result
        assert "–®–∏—Ñ–æ–Ω–æ–≤–∞—è –±–ª—É–∑–∫–∞ - 73 —à—Ç. (46 800‚ÇΩ)" in result

    def test_format_sync_status_message(self, formatter):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        sync_data = {
            "last_sync": "2025-01-28T14:30:15",
            "status": "completed",
            "duration_seconds": 45,
            "cabinets_processed": 1,
            "updates": {
                "orders": {"new": 3, "total_today": 19},
                "stocks": {"updated": 12},
                "reviews": {"new": 2, "total_today": 5},
                "products": {"changed": 0},
                "analytics": {"recalculated": True}
            },
            "next_sync": "2025-01-28T14:31:00",
            "sync_mode": "automatic",
            "interval_seconds": 60,
            "statistics": {
                "successful_today": 1440,
                "errors_today": 0,
                "average_duration": 42,
                "last_error": None
            }
        }
        
        result = formatter.format_sync_status(sync_data)
        
        assert "üîÑ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –î–ê–ù–ù–´–•" in result
        assert "‚úÖ –ü–û–°–õ–ï–î–ù–Ø–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø" in result
        assert "–í—Ä–µ–º—è: 2025-01-28T14:30:15" in result
        assert "–°—Ç–∞—Ç—É—Å: –£—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞" in result
        assert "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 45 —Å–µ–∫—É–Ω–¥" in result
        assert "–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–∞–±–∏–Ω–µ—Ç–æ–≤: 1" in result
        assert "–ó–∞–∫–∞–∑—ã: +3 –Ω–æ–≤—ã—Ö (–≤—Å–µ–≥–æ 19 –∑–∞ –¥–µ–Ω—å)" in result
        assert "–û—Å—Ç–∞—Ç–∫–∏: 12 —Ç–æ–≤–∞—Ä–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–æ" in result
        assert "–û—Ç–∑—ã–≤—ã: +2 –Ω–æ–≤—ã—Ö (–≤—Å–µ–≥–æ 5 –∑–∞ –¥–µ–Ω—å)" in result

    def test_format_new_order_notification(self, formatter):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ"""
        order_data = {
            "order_id": 154,
            "date": "2025-10-03T12:48:00",
            "amount": 1410,
            "product_name": "–®–∏—Ñ–æ–Ω–æ–≤–∞—è –±–ª—É–∑–∫–∞ (S)",
            "brand": "SLAVALOOK BRAND",
            "warehouse_from": "–≠–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–ª—å",
            "warehouse_to": "–¶–§–û/–ú–æ—Å–∫–≤–∞",
            "today_stats": {
                "count": 19,
                "amount": 26790
            },
            "stocks": {
                "S": 13,
                "M": 1,
                "L": 0,
                "XL": 0
            }
        }
        
        result = formatter.format_new_order_notification(order_data)
        
        assert "üéâ –ù–û–í–´–ô –ó–ê–ö–ê–ó!" in result
        assert "#154 | 12:48 | 1 410‚ÇΩ" in result
        assert "SLAVALOOK BRAND" in result
        assert "–®–∏—Ñ–æ–Ω–æ–≤–∞—è –±–ª—É–∑–∫–∞ (S)" in result
        assert "–≠–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–ª—å -> –¶–§–û/–ú–æ—Å–∫–≤–∞" in result
        assert "–°–µ–≥–æ–¥–Ω—è: 19 –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ 26 790‚ÇΩ" in result
        assert "–û—Å—Ç–∞—Ç–æ–∫: S(13) M(1) L(0) XL(0)" in result

    def test_format_critical_stocks_notification(self, formatter):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –æ—Å—Ç–∞—Ç–∫–∞—Ö"""
        stocks_data = {
            "products": [
                {
                    "nm_id": 270591287,
                    "name": "–®–∏—Ñ–æ–Ω–æ–≤–∞—è –±–ª—É–∑–∫–∞",
                    "brand": "SLAVALOOK BRAND",
                    "stocks": {"S": 13, "M": 1, "L": 0, "XL": 0},
                    "critical_sizes": ["M"],
                    "zero_sizes": ["L", "XL"],
                    "days_left": {"M": 0}
                }
            ]
        }
        
        result = formatter.format_critical_stocks_notification(stocks_data)
        
        assert "‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ù–´–ï –û–°–¢–ê–¢–ö–ò!" in result
        assert "–®–∏—Ñ–æ–Ω–æ–≤–∞—è –±–ª—É–∑–∫–∞ (SLAVALOOK BRAND)" in result
        assert "270591287" in result
        assert "–û—Å—Ç–∞—Ç–∫–∏: S(13) M(1) L(0) XL(0)" in result
        assert "–ö—Ä–∏—Ç–∏—á–Ω–æ: M(1) - –Ω–∞ 0 –¥–Ω–µ–π!" in result
        assert "–ù—É–ª–µ–≤—ã–µ: L, XL –Ω–∞ –≤—Å–µ—Ö —Å–∫–ª–∞–¥–∞—Ö" in result

    def test_message_length_validation(self, formatter):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è (–ª–∏–º–∏—Ç Telegram 4096 —Å–∏–º–≤–æ–ª–æ–≤)"""
        # –°–æ–∑–¥–∞–µ–º –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        long_data = {
            "orders": [{"id": i, "text": "–û—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç " * 100} for i in range(50)]
        }
        
        result = formatter.format_orders(long_data)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç
        assert len(result) <= 4096
        # –î–ª—è –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–Ω–æ–≥–æ—Ç–æ—á–∏–µ –≤ –∫–æ–Ω—Ü–µ
        if len(result) >= 4090:  # –ë–ª–∏–∑–∫–æ –∫ –ª–∏–º–∏—Ç—É
            assert result.endswith("...")

    def test_empty_data_handling(self, formatter):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—É—Å—Ç—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        empty_data = {
            "orders": [],
            "statistics": {"today_count": 0, "today_amount": 0}
        }
        
        result = formatter.format_orders(empty_data)
        
        assert "üõí –ü–û–°–õ–ï–î–ù–ò–ï –ó–ê–ö–ê–ó–´" in result
        assert "–ó–∞–∫–∞–∑–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ" in result or "–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤" in result
        assert "–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: 0" in result

    def test_error_message_formatting(self, formatter):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö"""
        error_data = {
            "error_type": "wb_api_unavailable",
            "message": "WB API –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
            "fallback_data": True
        }
        
        result = formatter.format_error(error_data)
        
        assert "‚ùå –û–®–ò–ë–ö–ê" in result
        assert "WB API –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω" in result
        assert "–ü–æ–∫–∞–∑–∞–Ω—ã –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ" in result