"""
Unit —Ç–µ—Å—Ç—ã –¥–ª—è NotificationGenerator - –º–µ—Ç–æ–¥—ã –¥–ª—è –ø—Ä–æ–¥–∞–∂
"""
import pytest
from datetime import datetime, timezone

from app.features.notifications.notification_generator import NotificationGenerator


class TestNotificationGeneratorSales:
    """–¢–µ—Å—Ç—ã –¥–ª—è NotificationGenerator - –º–µ—Ç–æ–¥—ã –ø—Ä–æ–¥–∞–∂"""
    
    @pytest.fixture
    def notification_generator(self):
        """–≠–∫–∑–µ–º–ø–ª—è—Ä NotificationGenerator"""
        return NotificationGenerator()
    
    def test_generate_sales_notification_new_buyout(self, notification_generator):
        """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –≤—ã–∫—É–ø–µ"""
        event = {
            "type": "new_buyout",
            "sale_id": "sale_1",
            "order_id": "order_1",
            "product_name": "Product 1",
            "amount": 1000.0,
            "brand": "Brand 1",
            "size": "M"
        }
        
        notification = notification_generator.generate_sales_notification(event)
        
        assert notification["type"] == "new_buyout"
        assert "üí∞ –í—ã–∫—É–ø #order_1" in notification["title"]
        assert "–ù–æ–≤—ã–π –≤—ã–∫—É–ø #order_1" in notification["content"]
        assert "Product 1" in notification["content"]
        assert "Brand 1" in notification["content"]
        assert "1 000‚ÇΩ" in notification["content"]
        assert notification["priority"] == "HIGH"
    
    def test_generate_sales_notification_new_return(self, notification_generator):
        """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –≤–æ–∑–≤—Ä–∞—Ç–µ"""
        event = {
            "type": "new_return",
            "sale_id": "sale_1",
            "order_id": "order_1",
            "product_name": "Product 1",
            "amount": 500.0,
            "brand": "Brand 1",
            "size": "L"
        }
        
        notification = notification_generator.generate_sales_notification(event)
        
        assert notification["type"] == "new_return"
        assert "üîÑ –í–æ–∑–≤—Ä–∞—Ç #order_1" in notification["title"]
        assert "–ù–æ–≤—ã–π –≤–æ–∑–≤—Ä–∞—Ç #order_1" in notification["content"]
        assert "Product 1" in notification["content"]
        assert "Brand 1" in notification["content"]
        assert "500‚ÇΩ" in notification["content"]
        assert notification["priority"] == "HIGH"
    
    def test_generate_sales_notification_status_change(self, notification_generator):
        """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–¥–∞–∂–∏"""
        event = {
            "type": "sale_status_change",
            "sale_id": "sale_1",
            "order_id": "order_1",
            "product_name": "Product 1",
            "previous_status": "pending",
            "current_status": "completed",
            "amount": 1000.0
        }
        
        notification = notification_generator.generate_sales_notification(event)
        
        assert notification["type"] == "sale_status_change"
        assert "üìä –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω #order_1" in notification["title"]
        assert "–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω #order_1" in notification["content"]
        assert "pending -> completed" in notification["content"]
        assert notification["priority"] == "MEDIUM"
    
    def test_generate_sales_notification_cancellation_change(self, notification_generator):
        """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –æ—Ç–º–µ–Ω—ã –ø—Ä–æ–¥–∞–∂–∏"""
        event = {
            "type": "sale_cancellation_change",
            "sale_id": "sale_1",
            "order_id": "order_1",
            "product_name": "Product 1",
            "was_cancelled": False,
            "is_cancelled": True,
            "amount": 1000.0
        }
        
        notification = notification_generator.generate_sales_notification(event)
        
        assert notification["type"] == "sale_cancellation_change"
        assert "‚ùå –û—Ç–º–µ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ #order_1" in notification["title"]
        assert "–ü—Ä–æ–¥–∞–∂–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ #order_1" in notification["content"]
        assert "–°—Ç–∞—Ç—É—Å: –û—Ç–º–µ–Ω–µ–Ω–∞" in notification["content"]
        assert notification["priority"] == "MEDIUM"
    
    def test_generate_sales_notification_unknown_event(self, notification_generator):
        """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–º —Å–æ–±—ã—Ç–∏–∏"""
        event = {
            "type": "unknown_event",
            "sale_id": "sale_1"
        }
        
        notification = notification_generator.generate_sales_notification(event)
        
        assert notification["type"] == "unknown_sales_event"
        assert "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –ø—Ä–æ–¥–∞–∂–∏" in notification["title"]
        assert "unknown_event" in notification["content"]
        assert notification["priority"] == "LOW"
    
    def test_format_new_buyout_content(self, notification_generator):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –≤—ã–∫—É–ø–µ"""
        content = notification_generator._format_new_buyout_content(
            "order_1", 1000.0, "Product 1", "Brand 1", "M"
        )
        
        assert "üí∞ –ù–æ–≤—ã–π –≤—ã–∫—É–ø #order_1" in content
        assert "1 000‚ÇΩ" in content
        assert "Product 1" in content
        assert "Brand 1" in content
        assert "M" in content
    
    def test_format_new_return_content(self, notification_generator):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –≤–æ–∑–≤—Ä–∞—Ç–µ"""
        content = notification_generator._format_new_return_content(
            "order_1", 500.0, "Product 1", "Brand 1", "L"
        )
        
        assert "üîÑ –ù–æ–≤—ã–π –≤–æ–∑–≤—Ä–∞—Ç #order_1" in content
        assert "500‚ÇΩ" in content
        assert "Product 1" in content
        assert "Brand 1" in content
        assert "L" in content
    
    def test_format_sale_status_change_content(self, notification_generator):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞"""
        content = notification_generator._format_sale_status_change_content(
            "order_1", "Product 1", "pending", "completed", 1000.0
        )
        
        assert "üìä –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω #order_1" in content
        assert "Product 1" in content
        assert "1 000‚ÇΩ" in content
        assert "pending -> completed" in content
    
    def test_format_sale_cancellation_change_content_cancelled(self, notification_generator):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–º–µ–Ω–µ –ø—Ä–æ–¥–∞–∂–∏"""
        content = notification_generator._format_sale_cancellation_change_content(
            "order_1", "Product 1", False, True, 1000.0
        )
        
        assert "‚ùå –ü—Ä–æ–¥–∞–∂–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ #order_1" in content
        assert "Product 1" in content
        assert "1 000‚ÇΩ" in content
        assert "–°—Ç–∞—Ç—É—Å: –û—Ç–º–µ–Ω–µ–Ω–∞" in content
    
    def test_format_sale_cancellation_change_content_restored(self, notification_generator):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–¥–∞–∂–∏"""
        content = notification_generator._format_sale_cancellation_change_content(
            "order_1", "Product 1", True, False, 1000.0
        )
        
        assert "‚ùå –ü—Ä–æ–¥–∞–∂–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ #order_1" in content
        assert "Product 1" in content
        assert "1 000‚ÇΩ" in content
        assert "–°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–Ω–∞" in content
