"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è Bot API - WB –∫–∞–±–∏–Ω–µ—Ç—ã
"""

import pytest
from unittest.mock import patch, AsyncMock
from fastapi.testclient import TestClient
from main import app


class TestBotAPICabinetRoutes:
    """–¢–µ—Å—Ç—ã –¥–ª—è API endpoints WB –∫–∞–±–∏–Ω–µ—Ç–æ–≤"""

    @pytest.fixture
    def client(self):
        """FastAPI test client"""
        return TestClient(app)

    @pytest.fixture
    def sample_user(self):
        """–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
        from app.features.user.models import User
        return User(
            id=1,
            telegram_id=123456789,
            username="testuser",
            first_name="–¢–µ—Å—Ç"
        )

    @pytest.fixture
    def sample_cabinet(self):
        """–¢–µ—Å—Ç–æ–≤—ã–π –∫–∞–±–∏–Ω–µ—Ç"""
        from app.features.wb_api.models import WBCabinet
        return WBCabinet(
            id=1,
            user_id=1,
            api_key="test_api_key_123",
            cabinet_name="SLAVALOOK BRAND",
            is_active=True
        )

    @pytest.fixture
    def mock_bot_service(self):
        """–ú–æ–∫ BotAPIService"""
        service = AsyncMock()
        return service

    def test_get_cabinet_status_success(self, client, sample_user, sample_cabinet, mock_bot_service):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–±–∏–Ω–µ—Ç–æ–≤"""
        cabinet_status_data = {
            "success": True,
            "data": {
                "cabinets": [
                    {
                        "id": "cabinet_123",
                        "name": "SLAVALOOK BRAND",
                        "status": "active",
                        "connected_at": "2025-01-28T10:15:30",
                        "last_sync": "2025-01-28T14:30:15",
                        "api_key_status": "valid",
                        "permissions": ["read_orders", "read_stocks", "read_reviews"],
                        "statistics": {
                            "products_count": 45,
                            "orders_today": 19,
                            "reviews_today": 5
                        }
                    }
                ],
                "total_cabinets": 1,
                "active_cabinets": 1,
                "last_check": "2025-01-28T14:30:15"
            },
            "telegram_text": "üîë –°–¢–ê–¢–£–° WB –ö–ê–ë–ò–ù–ï–¢–û–í\n\n‚úÖ –ü–û–î–ö–õ–Æ–ß–ï–ù–ù–´–ï –ö–ê–ë–ò–ù–ï–¢–´ (1):\nüè¢ SLAVALOOK BRAND\n‚Ä¢ –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–µ–Ω\n‚Ä¢ –ü–æ–¥–∫–ª—é—á–µ–Ω: 28.01.2025 10:15\n‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: 2 –º–∏–Ω –Ω–∞–∑–∞–¥\n‚Ä¢ API –∫–ª—é—á: –í–∞–ª–∏–¥–Ω—ã–π\n‚Ä¢ –ü—Ä–∞–≤–∞: –ß—Ç–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤, –æ—Å—Ç–∞—Ç–∫–æ–≤, –æ—Ç–∑—ã–≤–æ–≤\n\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–ê–ë–ò–ù–ï–¢–ê\n‚Ä¢ –¢–æ–≤–∞—Ä–æ–≤: 45\n‚Ä¢ –ó–∞–∫–∞–∑–æ–≤ —Å–µ–≥–æ–¥–Ω—è: 19\n‚Ä¢ –û—Ç–∑—ã–≤–æ–≤ —Å–µ–≥–æ–¥–Ω—è: 5\n\nüí° –ö–∞–±–∏–Ω–µ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
        }
        
        with patch('app.features.bot_api.routes.get_bot_service') as mock_get_service:
            mock_get_service.return_value = mock_bot_service
            
            with patch('app.features.bot_api.service.BotAPIService.get_user_cabinet', return_value=sample_user):
                with patch('app.features.bot_api.service.BotAPIService.get_cabinet_status', return_value=cabinet_status_data):
                    response = client.get(
                        "/api/v1/bot/cabinets/status",
                        headers={"X-API-SECRET-KEY": "CnWvwoDwwGKh"},
                        params={"telegram_id": sample_user.telegram_id}
                    )
        
        assert response.status_code == 200
        data = response.json()
        assert data["status"] == "success"
        assert "cabinets" in data
        assert len(data["cabinets"]) == 1
        assert data["cabinets"][0]["name"] == "SLAVALOOK BRAND"

    def test_get_cabinet_status_no_cabinets(self, client, sample_user, mock_bot_service):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–≥–¥–∞ –∫–∞–±–∏–Ω–µ—Ç–æ–≤ –Ω–µ—Ç"""
        no_cabinets_data = {
            "success": True,
            "data": {
                "cabinets": [],
                "total_cabinets": 0,
                "active_cabinets": 0,
                "last_check": "2025-01-28T14:30:15"
            },
            "telegram_text": "üîë –°–¢–ê–¢–£–° WB –ö–ê–ë–ò–ù–ï–¢–û–í\n\n‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–∞–±–∏–Ω–µ—Ç–æ–≤\n\nüí° –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å WB –∫–∞–±–∏–Ω–µ—Ç:\n1. –ü–æ–ª—É—á–∏—Ç–µ API –∫–ª—é—á –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ WB\n2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /connect –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è\n3. –ü–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å—Ç–∞–Ω—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã"
        }
        
        mock_bot_service.get_cabinet_status.return_value = no_cabinets_data
        
        with patch('app.features.bot_api.routes.get_bot_service') as mock_get_service:
            mock_get_service.return_value = mock_bot_service
            
            with patch('app.features.bot_api.service.BotAPIService.get_user_cabinet') as mock_get_cabinet:
                mock_get_cabinet.return_value = sample_user
                
                response = client.get(
                    "/api/v1/bot/cabinets/status",
                    headers={"X-API-SECRET-KEY": "CnWvwoDwwGKh"},
                    params={"telegram_id": sample_user.telegram_id}
                )
        
        assert response.status_code == 200
        data = response.json()
        assert data["status"] == "success"
        assert data["total_cabinets"] == 0
        assert data["cabinets"] == []

    def test_connect_cabinet_success(self, client, sample_user, mock_bot_service):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–∞–±–∏–Ω–µ—Ç–∞"""
        connect_data = {
            "success": True,
            "data": {
                "cabinet_id": "cabinet_123",
                "cabinet_name": "SLAVALOOK BRAND",
                "status": "connected",
                "connected_at": "2025-01-28T14:30:15",
                "api_key_status": "valid",
                "permissions": ["read_orders", "read_stocks", "read_reviews"],
                "validation": {
                    "api_key_valid": True,
                    "permissions_ok": True,
                    "connection_test": "success",
                    "data_access": "confirmed"
                }
            },
            "telegram_text": "‚úÖ –ö–ê–ë–ò–ù–ï–¢ –ü–û–î–ö–õ–Æ–ß–ï–ù!\n\nüè¢ SLAVALOOK BRAND\n‚Ä¢ –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–µ–Ω\n‚Ä¢ –ü–æ–¥–∫–ª—é—á–µ–Ω: 28.01.2025 14:30\n‚Ä¢ API –∫–ª—é—á: –í–∞–ª–∏–¥–Ω—ã–π\n‚Ä¢ –ü—Ä–∞–≤–∞: –ß—Ç–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤, –æ—Å—Ç–∞—Ç–∫–æ–≤, –æ—Ç–∑—ã–≤–æ–≤\n\nüîç –ü–†–û–í–ï–†–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø\n‚Ä¢ API –∫–ª—é—á: ‚úÖ –í–∞–ª–∏–¥–Ω—ã–π\n‚Ä¢ –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞: ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã\n‚Ä¢ –¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ‚úÖ –£—Å–ø–µ—à–Ω–æ\n‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º: ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω\n\nüéâ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞!"
        }
        
        with patch('app.features.bot_api.routes.get_bot_service') as mock_get_service:
            mock_get_service.return_value = mock_bot_service
            
            with patch('app.features.bot_api.service.BotAPIService.get_user_cabinet', return_value=sample_user):
                with patch('app.features.bot_api.service.BotAPIService.connect_cabinet', return_value=connect_data):
                    response = client.post(
                        "/api/v1/bot/cabinets/connect",
                        headers={"X-API-SECRET-KEY": "CnWvwoDwwGKh"},
                        params={"telegram_id": sample_user.telegram_id},
                        json={"api_key": "new_api_key_123"}
                    )
        
        assert response.status_code == 200
        data = response.json()
        assert data["status"] == "success"
        assert data["cabinet_name"] == "SLAVALOOK BRAND"
        assert data["validation"]["api_key_valid"] is True

    def test_connect_cabinet_invalid_key(self, client, sample_user, mock_bot_service):
        """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º API –∫–ª—é—á–æ–º"""
        error_data = {
            "success": False,
            "error": "Invalid API key",
            "status_code": 400,
            "telegram_text": "‚ùå –û–®–ò–ë–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø\n\nüîë API –∫–ª—é—á –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω\n\nüí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π API –∫–ª—é—á\n‚Ä¢ –ö–ª—é—á –æ—Ç–æ–∑–≤–∞–Ω –≤ WB\n‚Ä¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞\n\nüîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:\n1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∫–ª—é—á–∞\n2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–ª—é—á –∞–∫—Ç–∏–≤–µ–Ω\n3. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –∫–ª—é—á –≤ WB\n\nüìû –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É WB"
        }
        
        with patch('app.features.bot_api.routes.get_bot_service') as mock_get_service:
            mock_get_service.return_value = mock_bot_service
            
            with patch('app.features.bot_api.service.BotAPIService.get_user_cabinet', return_value=sample_user):
                with patch('app.features.bot_api.service.BotAPIService.connect_cabinet', return_value=error_data):
                    response = client.post(
                    "/api/v1/bot/cabinets/connect",
                    headers={"X-API-SECRET-KEY": "CnWvwoDwwGKh"},
                    params={"telegram_id": sample_user.telegram_id},
                    json={"api_key": "invalid_key"}
                )
        
        assert response.status_code == 400
        data = response.json()
        assert data["detail"] == "Invalid API key"

    def test_connect_cabinet_already_exists(self, client, sample_user, sample_cabinet, mock_bot_service):
        """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ–≥–¥–∞ –∫–∞–±–∏–Ω–µ—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
        error_data = {
            "success": False,
            "error": "Cabinet already connected",
            "status_code": 409,
            "telegram_text": "‚ö†Ô∏è –ö–ê–ë–ò–ù–ï–¢ –£–ñ–ï –ü–û–î–ö–õ–Æ–ß–ï–ù\n\nüè¢ –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–π WB –∫–∞–±–∏–Ω–µ—Ç\n\nüí° –î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞:\n1. –°–Ω–∞—á–∞–ª–∞ –æ—Ç–∫–ª—é—á–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –∫–∞–±–∏–Ω–µ—Ç\n2. –ó–∞—Ç–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –Ω–æ–≤—ã–π\n\nüîÑ –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–∞–±–∏–Ω–µ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º"
        }
        
        with patch('app.features.bot_api.routes.get_bot_service') as mock_get_service:
            mock_get_service.return_value = mock_bot_service
            
            with patch('app.features.bot_api.service.BotAPIService.get_user_cabinet', return_value=sample_user):
                with patch('app.features.bot_api.service.BotAPIService.connect_cabinet', return_value=error_data):
                    response = client.post(
                    "/api/v1/bot/cabinets/connect",
                    headers={"X-API-SECRET-KEY": "CnWvwoDwwGKh"},
                    params={"telegram_id": sample_user.telegram_id},
                    json={"api_key": "another_api_key"}
                )
        
        assert response.status_code == 409
        data = response.json()
        assert data["detail"] == "Cabinet already connected"

    def test_connect_cabinet_missing_api_key(self, client, sample_user):
        """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –±–µ–∑ API –∫–ª—é—á–∞"""
        response = client.post(
            "/api/v1/bot/cabinets/connect",
            headers={"X-API-SECRET-KEY": "CnWvwoDwwGKh"},
            params={"telegram_id": sample_user.telegram_id},
            json={}
        )
        
        assert response.status_code == 422

    def test_connect_cabinet_invalid_telegram_id(self, client):
        """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º telegram_id"""
        response = client.post(
            "/api/v1/bot/cabinets/connect",
            headers={"X-API-SECRET-KEY": "CnWvwoDwwGKh"},
            params={"telegram_id": "invalid"},
            json={"api_key": "test_key"}
        )
        
        assert response.status_code == 422

    def test_get_cabinet_status_invalid_telegram_id(self, client):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º telegram_id"""
        response = client.get(
            "/api/v1/bot/cabinets/status",
            headers={"X-API-SECRET-KEY": "CnWvwoDwwGKh"},
            params={"telegram_id": "invalid"}
        )
        
        assert response.status_code == 422

    def test_cabinet_endpoints_missing_api_key(self, client, sample_user):
        """–¢–µ—Å—Ç endpoints –±–µ–∑ API –∫–ª—é—á–∞"""
        # –¢–µ—Å—Ç –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ X-API-SECRET-KEY
        response = client.get(
            "/api/v1/bot/cabinets/status",
            params={"telegram_id": sample_user.telegram_id}
        )
        
        assert response.status_code == 403

    def test_cabinet_endpoints_invalid_api_key(self, client, sample_user):
        """–¢–µ—Å—Ç endpoints —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º API –∫–ª—é—á–æ–º"""
        response = client.get(
            "/api/v1/bot/cabinets/status",
            headers={"X-API-SECRET-KEY": "invalid_key"},
            params={"telegram_id": sample_user.telegram_id}
        )
        
        assert response.status_code == 403