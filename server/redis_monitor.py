#!/usr/bin/env python3
"""
Redis Sentinel –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ health check
"""
import redis
import redis.sentinel
import os
import logging
import time
from datetime import datetime
from typing import Dict, List, Any

logger = logging.getLogger(__name__)

class RedisSentinelMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è Redis Sentinel"""
    
    def __init__(self):
        self.sentinel_hosts = self._parse_sentinel_hosts()
        self.master_name = os.getenv("REDIS_SENTINEL_MASTER_NAME", "mymaster")
        self.sentinel = None
        self.master = None
        self.replica = None
        
    def _parse_sentinel_hosts(self) -> List[tuple]:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Å–ø–∏—Å–∫–∞ Sentinel —Ö–æ—Å—Ç–æ–≤"""
        sentinel_hosts = os.getenv("REDIS_SENTINEL_HOSTS", "localhost:26379")
        hosts = []
        
        for host_port in sentinel_hosts.split(','):
            host, port = host_port.strip().split(':')
            hosts.append((host, int(port)))
        
        return hosts
    
    def connect(self) -> bool:
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis Sentinel"""
        try:
            self.sentinel = redis.sentinel.Sentinel(self.sentinel_hosts)
            
            # –ü–æ–ª—É—á–∞–µ–º master –∏ replica
            self.master = self.sentinel.master_for(
                self.master_name,
                socket_timeout=5,
                password=None
            )
            
            self.replica = self.sentinel.slave_for(
                self.master_name,
                socket_timeout=5,
                password=None
            )
            
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis Sentinel —É—Å–ø–µ—à–Ω–æ")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis Sentinel: {e}")
            return False
    
    def check_master_health(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è master"""
        try:
            if not self.master:
                return {"status": "error", "message": "Master –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω"}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º ping
            start_time = time.time()
            pong = self.master.ping()
            response_time = (time.time() - start_time) * 1000
            
            if pong:
                return {
                    "status": "healthy",
                    "response_time_ms": round(response_time, 2),
                    "timestamp": datetime.now().isoformat()
                }
            else:
                return {"status": "unhealthy", "message": "Master –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ ping"}
                
        except Exception as e:
            return {"status": "error", "message": str(e)}
    
    def check_replica_health(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è replica"""
        try:
            if not self.replica:
                return {"status": "error", "message": "Replica –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞"}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º ping
            start_time = time.time()
            pong = self.replica.ping()
            response_time = (time.time() - start_time) * 1000
            
            if pong:
                return {
                    "status": "healthy",
                    "response_time_ms": round(response_time, 2),
                    "timestamp": datetime.now().isoformat()
                }
            else:
                return {"status": "unhealthy", "message": "Replica –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ ping"}
                
        except Exception as e:
            return {"status": "error", "message": str(e)}
    
    def check_sentinel_health(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è Sentinel"""
        try:
            if not self.sentinel:
                return {"status": "error", "message": "Sentinel –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω"}
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ master
            master_info = self.sentinel.master(self.master_name)
            
            return {
                "status": "healthy",
                "master_info": master_info,
                "timestamp": datetime.now().isoformat()
            }
                
        except Exception as e:
            return {"status": "error", "message": str(e)}
    
    def get_full_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ Redis Sentinel"""
        if not self.connect():
            return {"status": "error", "message": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Redis Sentinel"}
        
        master_health = self.check_master_health()
        replica_health = self.check_replica_health()
        sentinel_health = self.check_sentinel_health()
        
        return {
            "timestamp": datetime.now().isoformat(),
            "master": master_health,
            "replica": replica_health,
            "sentinel": sentinel_health,
            "overall_status": "healthy" if all(
                h.get("status") == "healthy" 
                for h in [master_health, replica_health, sentinel_health]
            ) else "unhealthy"
        }
    
    def monitor_loop(self, interval: int = 30):
        """–¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        logger.info(f"üîÑ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Redis Sentinel –∫–∞–∂–¥—ã–µ {interval} —Å–µ–∫—É–Ω–¥")
        
        while True:
            try:
                status = self.get_full_status()
                
                if status["overall_status"] == "healthy":
                    logger.info("‚úÖ Redis Sentinel: –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ")
                else:
                    logger.warning("‚ö†Ô∏è Redis Sentinel: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã")
                    logger.warning(f"   Master: {status['master']}")
                    logger.warning(f"   Replica: {status['replica']}")
                    logger.warning(f"   Sentinel: {status['sentinel']}")
                
                time.sleep(interval)
                
            except KeyboardInterrupt:
                logger.info("üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                time.sleep(interval)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    monitor = RedisSentinelMonitor()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    if not monitor.connect():
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Redis Sentinel")
        return 1
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å
    status = monitor.get_full_status()
    print(f"Redis Sentinel Status: {status}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    monitor.monitor_loop(interval=30)
    
    return 0

if __name__ == "__main__":
    exit(main())
