"""
–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è Telegram Bot API
"""

from typing import Dict, List, Any, Optional
from datetime import datetime, timezone
import logging
from app.utils.timezone import TimezoneUtils

logger = logging.getLogger(__name__)


class BotMessageFormatter:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π Telegram"""
    
    def __init__(self, max_length: int = 4096):
        self.max_length = max_length
    
    def format_dashboard(self, data: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ dashboard —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            cabinet_name = data.get("cabinet_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
            last_sync = data.get("last_sync") or "–ù–∏–∫–æ–≥–¥–∞"
            status = data.get("status", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            
            products = data.get("products", {})
            orders_today = data.get("orders_today", {})
            stocks = data.get("stocks", {})
            reviews = data.get("reviews", {})
            
            message = f"""üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {last_sync}

üõí –ó–ê–ö–ê–ó–´ (—Å–µ–≥–æ–¥–Ω—è)
‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {orders_today.get('count', 0)}
‚Ä¢ –ù–∞ —Å—É–º–º—É: {orders_today.get('amount', 0):,.0f}‚ÇΩ
‚Ä¢ –í—á–µ—Ä–∞: {orders_today.get('yesterday_count', 0)} –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ {orders_today.get('yesterday_amount', 0):,.0f}‚ÇΩ
‚Ä¢ –†–æ—Å—Ç –∫ –≤—á–µ—Ä–∞: {orders_today.get('growth_percent', 0):+.0f}% –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É

üì¶ –û–°–¢–ê–¢–ö–ò
‚Ä¢ –ö—Ä–∏—Ç–∏—á–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {stocks.get('critical_count', 0)}
‚Ä¢ –° –Ω—É–ª–µ–≤—ã–º–∏ –æ—Å—Ç–∞—Ç–∫–∞–º–∏: {stocks.get('zero_count', 0)}
‚Ä¢ –¢—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è: {stocks.get('attention_needed', 0)}

‚≠ê –û–¢–ó–´–í–´
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {reviews.get('average_rating', 0):.1f}/5
‚Ä¢ –ù–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö: {reviews.get('unanswered', 0)}
‚Ä¢ –í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: {reviews.get('total', 0)}

üì¶ –¢–û–í–ê–†–´
‚Ä¢ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {products.get('total', 0)}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {products.get('active', 0)}"""
            
            return self._truncate_message(message)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è dashboard: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö dashboard"

    def format_orders(self, data: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–∞—Ö"""
        try:
            orders = data.get("orders", [])
            statistics = data.get("statistics", {})
            pagination = data.get("pagination", {})
            
            message = "üõí –ü–û–°–õ–ï–î–ù–ò–ï –ó–ê–ö–ê–ó–´\n\n"
            
            if not orders:
                message += "–ó–∞–∫–∞–∑–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
            else:
                for order in orders[:10]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º WB Order ID –≤–º–µ—Å—Ç–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ ID
                    wb_order_id = order.get('order_id', order.get('id', 'N/A'))
                    # –ü—Ä–æ—Å—Ç–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
                    order_date = self._format_datetime_simple(order.get("date", ""))
                    amount = order.get('amount', 0)
                    warehouse_from = order.get('warehouse_from', 'N/A')
                    warehouse_to = order.get('warehouse_to', 'N/A')
                    
                    message += f"""üßæ {wb_order_id}
   {order_date} | {amount:,.0f}‚ÇΩ
   {warehouse_from} ‚Üí {warehouse_to}

"""
            
            message += "üí° –ù–∞–∂–º–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"
            
            return self._truncate_message(message)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤"

    def format_critical_stocks(self, data: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –æ—Å—Ç–∞—Ç–∫–∞—Ö"""
        try:
            critical_products = data.get("critical_products", [])
            zero_products = data.get("zero_products", [])
            summary = data.get("summary", {})
            recommendations = data.get("recommendations", [])
            
            message = "üì¶ –ö–†–ò–¢–ò–ß–ù–´–ï –û–°–¢–ê–¢–ö–ò\n\n"
            
            if critical_products:
                message += "‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ù–û (–æ—Å—Ç–∞—Ç–æ–∫ < 5 —à—Ç):\n"
                for product in critical_products[:5]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                    stocks_str = self._format_stocks(product.get("stocks", {}))
                    critical_sizes = product.get("critical_sizes", [])
                    zero_sizes = product.get("zero_sizes", [])
                    days_left = product.get("days_left", {})
                    
                    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è
                    category = product.get('category', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                    subject = product.get('subject', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                    price = product.get('price', 0)
                    discount = product.get('discount', 0)
                    final_price = price - discount if price and discount else price
                    
                    message += f"""üì¶ {product.get('name', 'N/A')} ({product.get('brand', 'N/A')})
   üÜî {product.get('nm_id', 'N/A')}
   üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category} ‚Üí {subject}
   üí∞ –¶–µ–Ω–∞: {price:,.0f}‚ÇΩ {f"(-{discount:,.0f}‚ÇΩ = {final_price:,.0f}‚ÇΩ)" if discount > 0 else ""}
   üìä –û—Å—Ç–∞—Ç–∫–∏: {stocks_str}
"""
                    if critical_sizes:
                        critical_info = []
                        for size in critical_sizes:
                            days = days_left.get(size, 0)
                            critical_info.append(f"{size}({product.get('stocks', {}).get(size, 0)}) - –æ—Å—Ç–∞–ª–æ—Å—å –Ω–∞ {days} –¥–Ω–µ–π!")
                        message += f"   ‚ö†Ô∏è {' '.join(critical_info)}\n"
                    
                    message += f"""   üìà –ü—Ä–æ–¥–∞–∂–∏: {product.get('sales_per_day', 0):.1f} —à—Ç/–¥–µ–Ω—å (7–¥–Ω)
   üí∞ –¶–µ–Ω–∞: {product.get('price', 0):,.0f}‚ÇΩ | –ö–æ–º–∏—Å—Å–∏—è: {product.get('commission_percent', 0):.1f}%

"""
            
            if zero_products:
                message += "üî¥ –ù–£–õ–ï–í–´–ï –û–°–¢–ê–¢–ö–ò:\n"
                for product in zero_products[:3]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                    stocks_str = self._format_stocks(product.get("stocks", {}))
                    message += f"""üì¶ {product.get('name', 'N/A')} ({product.get('brand', 'N/A')})
   üÜî {product.get('nm_id', 'N/A')}
   üìä –û—Å—Ç–∞—Ç–∫–∏: {stocks_str}
   üî¥ –í—Å–µ —Ä–∞–∑–º–µ—Ä—ã = 0!
   üìà –ü—Ä–æ–¥–∞–∂–∏: {product.get('sales_per_day', 0):.1f} —à—Ç/–¥–µ–Ω—å (7–¥–Ω)
   üí∞ –¶–µ–Ω–∞: {product.get('price', 0):,.0f}‚ÇΩ | –ö–æ–º–∏—Å—Å–∏—è: {product.get('commission_percent', 0):.1f}%

"""
            
            message += f"""üìä –°–í–û–î–ö–ê
‚Ä¢ –ö—Ä–∏—Ç–∏—á–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {summary.get('critical_count', 0)}
‚Ä¢ –° –Ω—É–ª–µ–≤—ã–º–∏ –æ—Å—Ç–∞—Ç–∫–∞–º–∏: {summary.get('zero_count', 0)}
‚Ä¢ –¢—Ä–µ–±—É—é—Ç —Å—Ä–æ—á–Ω–æ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {summary.get('attention_needed', 0)}
‚Ä¢ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø–æ—Ç–µ—Ä–∏: {summary.get('potential_losses', 0):.1f} —à—Ç/–¥–µ–Ω—å

üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò"""
            
            for rec in recommendations[:3]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
                message += f"\n‚Ä¢ {rec}"
            
            return self._truncate_message(message)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤"

    def format_reviews(self, data: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—Ç–∑—ã–≤–∞—Ö"""
        try:
            new_reviews = data.get("new_reviews", [])
            unanswered_questions = data.get("unanswered_questions", [])
            statistics = data.get("statistics", {})
            recommendations = data.get("recommendations", [])
            
            message = "‚≠ê –û–¢–ó–´–í–´ –ò –í–û–ü–†–û–°–´\n\n"
            
            if new_reviews:
                message += f"üÜï –ù–û–í–´–ï –û–¢–ó–´–í–´ ({len(new_reviews)}):\n"
                for review in new_reviews[:5]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                    rating = review.get("rating", 0)
                    stars = "‚≠ê" * rating
                    user_name = review.get("user_name", "–ê–Ω–æ–Ω–∏–º")
                    color = review.get("color", "")
                    pros = review.get("pros", "")
                    cons = review.get("cons", "")
                    
                    message += f"""{stars} | {rating}/5
   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name} {f"({color})" if color else ""}
   –ü–ª—é—Å—ã: {pros if pros else "–ù–µ —É–∫–∞–∑–∞–Ω—ã"}
   –ú–∏–Ω—É—Å—ã: {cons if cons else "–ù–µ —É–∫–∞–∑–∞–Ω—ã"}

"""
            
            if unanswered_questions:
                message += f"‚ùì –ù–ï–û–¢–í–ï–ß–ï–ù–ù–´–ï –í–û–ü–†–û–°–´ ({len(unanswered_questions)}):\n"
                for question in unanswered_questions[:3]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                    message += f"""‚Ä¢ "{question.get('text', 'N/A')}" - {question.get('product_name', 'N/A')}
  –í—Ä–µ–º—è: {question.get('time_ago', 'N/A')} | –¢—Ä–µ–±—É–µ—Ç –æ—Ç–≤–µ—Ç–∞

"""
            
            message += f"""üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {statistics.get('average_rating', 0):.1f}/5
‚Ä¢ –í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: {statistics.get('total_reviews', 0)}
‚Ä¢ –û—Ç–≤–µ—á–µ–Ω–æ: {statistics.get('answered_count', 0)} ({statistics.get('answered_percent', 0):.0f}%)
‚Ä¢ –¢—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è: {statistics.get('attention_needed', 0)} (–Ω–∏–∑–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥)
‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞ –¥–µ–Ω—å: {statistics.get('new_today', 0)}

üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò"""
            
            for rec in recommendations[:3]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
                message += f"\n‚Ä¢ {rec}"
            
            return self._truncate_message(message)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤"

    def format_analytics(self, data: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –∞–Ω–∞–ª–∏—Ç–∏–∫–µ"""
        try:
            sales_periods = data.get("sales_periods", {})
            dynamics = data.get("dynamics", {})
            top_products = data.get("top_products", [])
            stocks_summary = data.get("stocks_summary", {})
            recommendations = data.get("recommendations", [])
            
            message = "üìà –ê–ù–ê–õ–ò–¢–ò–ö–ê –ü–†–û–î–ê–ñ\n\n"
            
            # –ü—Ä–æ–¥–∞–∂–∏ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º
            message += "üìä –ü–†–û–î–ê–ñ–ò –ü–û –ü–ï–†–ò–û–î–ê–ú\n"
            for period_name, period_key in [
                ("–°–µ–≥–æ–¥–Ω—è", "today"),
                ("–í—á–µ—Ä–∞", "yesterday"),
                ("–ó–∞ 7 –¥–Ω–µ–π", "7_days"),
                ("–ó–∞ 30 –¥–Ω–µ–π", "30_days")
            ]:
                period_data = sales_periods.get(period_key, {})
                count = period_data.get("count", 0)
                amount = period_data.get("amount", 0)
                message += f"‚Ä¢ {period_name}: {count} –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ {amount:,.0f}‚ÇΩ\n"
            
            # –î–∏–Ω–∞–º–∏–∫–∞
            message += f"""\nüìà –î–ò–ù–ê–ú–ò–ö–ê
‚Ä¢ –†–æ—Å—Ç –∫ –≤—á–µ—Ä–∞: {dynamics.get('yesterday_growth_percent', 0):+.0f}% –ø–æ –∑–∞–∫–∞–∑–∞–º, {dynamics.get('yesterday_growth_percent', 0):+.0f}% –ø–æ —Å—É–º–º–µ
‚Ä¢ –†–æ—Å—Ç –∫ –ø—Ä–æ—à–ª–æ–π –Ω–µ–¥–µ–ª–µ: {dynamics.get('week_growth_percent', 0):+.0f}% –ø–æ –∑–∞–∫–∞–∑–∞–º
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {dynamics.get('average_check', 0):,.0f}‚ÇΩ (—Å—Ç–∞–±–∏–ª—å–Ω–æ)
‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏—è: {dynamics.get('conversion_percent', 0):.1f}% (–Ω–æ—Ä–º–∞)

üèÜ –¢–û–ü –¢–û–í–ê–†–û–í (7 –¥–Ω–µ–π)"""
            
            for i, product in enumerate(top_products[:3], 1):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                stocks_str = self._format_stocks(product.get("stocks", {}))
                message += f"""\n{i}. {product.get('name', 'N/A')} - {product.get('sales_count', 0)} —à—Ç. ({product.get('sales_amount', 0):,.0f}‚ÇΩ)
   –†–µ–π—Ç–∏–Ω–≥: {product.get('rating', 0):.1f}‚≠ê | –û—Å—Ç–∞—Ç–æ–∫: {stocks_str}"""
            
            # –û—Å—Ç–∞—Ç–∫–∏
            message += f"""

üì¶ –û–°–¢–ê–¢–ö–ò
‚Ä¢ –ö—Ä–∏—Ç–∏—á–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {stocks_summary.get('critical_count', 0)}
‚Ä¢ –° –Ω—É–ª–µ–≤—ã–º–∏ –æ—Å—Ç–∞—Ç–∫–∞–º–∏: {stocks_summary.get('zero_count', 0)}
‚Ä¢ –¢—Ä–µ–±—É—é—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {stocks_summary.get('attention_needed', 0)}
‚Ä¢ –û–±—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫: {stocks_summary.get('total_products', 0)} —Ç–æ–≤–∞—Ä–æ–≤

üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò"""
            
            for rec in recommendations[:4]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
                message += f"\n‚Ä¢ {rec}"
            
            return self._truncate_message(message)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"

    def format_sync_status(self, data: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        try:
            last_sync = data.get("last_sync", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            status = data.get("status", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            duration = data.get("duration_seconds", 0)
            cabinets_processed = data.get("cabinets_processed", 0)
            updates = data.get("updates", {})
            next_sync = data.get("next_sync", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            sync_mode = data.get("sync_mode", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            interval = data.get("interval_seconds", 0)
            statistics = data.get("statistics", {})
            
            message = f"""üîÑ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –î–ê–ù–ù–´–•

‚úÖ –ü–û–°–õ–ï–î–ù–Ø–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø
‚Ä¢ –í—Ä–µ–º—è: {last_sync}
‚Ä¢ –°—Ç–∞—Ç—É—Å: {"–£—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞" if status == "completed" else status}
‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} —Å–µ–∫—É–Ω–¥
‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–∞–±–∏–Ω–µ—Ç–æ–≤: {cabinets_processed}

üìä –û–ë–ù–û–í–õ–ï–ù–û
‚Ä¢ –ó–∞–∫–∞–∑—ã: +{updates.get('orders', {}).get('new', 0)} –Ω–æ–≤—ã—Ö (–≤—Å–µ–≥–æ {updates.get('orders', {}).get('total_today', 0)} –∑–∞ –¥–µ–Ω—å)
‚Ä¢ –û—Å—Ç–∞—Ç–∫–∏: {updates.get('stocks', {}).get('updated', 0)} —Ç–æ–≤–∞—Ä–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–æ
‚Ä¢ –û—Ç–∑—ã–≤—ã: +{updates.get('reviews', {}).get('new', 0)} –Ω–æ–≤—ã—Ö (–≤—Å–µ–≥–æ {updates.get('reviews', {}).get('total_today', 0)} –∑–∞ –¥–µ–Ω—å)
‚Ä¢ –¢–æ–≤–∞—Ä—ã: {updates.get('products', {}).get('changed', 0)} –∏–∑–º–µ–Ω–µ–Ω–∏–π
‚Ä¢ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞: {"–ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–∞" if updates.get('analytics', {}).get('recalculated') else "–Ω–µ –æ–±–Ω–æ–≤–ª—è–ª–∞—Å—å"}

‚è∞ –°–õ–ï–î–£–Æ–©–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø
‚Ä¢ –ß–µ—Ä–µ–∑: {self._calculate_time_until_next_sync(next_sync)}
‚Ä¢ –†–µ–∂–∏–º: {"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π" if sync_mode == "automatic" else sync_mode}
‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª: –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

üîÑ –†–£–ß–ù–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø
‚Ä¢ –ù–∞–∂–º–∏—Ç–µ /sync –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
‚Ä¢ –û–±—ã—á–Ω–æ –∑–∞–Ω–∏–º–∞–µ—Ç 30-60 —Å–µ–∫—É–Ω–¥
‚Ä¢ –û–±–Ω–æ–≤–∏—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ WB API

üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò
‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞ –¥–µ–Ω—å: {statistics.get('successful_today', 0)}
‚Ä¢ –û—à–∏–±–æ–∫ –∑–∞ –¥–µ–Ω—å: {statistics.get('errors_today', 0)}
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {statistics.get('average_duration', 0):.0f} —Å–µ–∫—É–Ω–¥
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {statistics.get('last_error', '–Ω–µ—Ç')}"""
            
            return self._truncate_message(message)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"

    def format_new_order_notification(self, data: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ –≤ –ø–æ–ª–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–∫–∞–∑–∞
            return self.format_order_detail({"order": data})
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–µ: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–µ"

    def format_critical_stocks_notification(self, data: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –æ—Å—Ç–∞—Ç–∫–∞—Ö"""
        try:
            products = data.get("products", [])
            
            message = "‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ù–´–ï –û–°–¢–ê–¢–ö–ò\n\n"
            
            for product in products[:3]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                nm_id = product.get("nm_id", "N/A")
                # –ù–∞–¥–µ–∂–Ω—ã–π fallback –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
                name = product.get("name") or product.get("product_name") or product.get("title") or f"–¢–æ–≤–∞—Ä {nm_id}"
                stocks = product.get("stocks", {})
                critical_sizes = product.get("critical_sizes", [])
                zero_sizes = product.get("zero_sizes", [])
                days_left = product.get("days_left", {})
                
                stocks_str = self._format_stocks(stocks)
                
                message += f"""üì¶ {name}
üÜî {nm_id}
üìä –û—Å—Ç–∞—Ç–∫–∏: {stocks_str}

"""
                
                if critical_sizes:
                    critical_info = []
                    for size in critical_sizes:
                        days = days_left.get(size, 0)
                        critical_info.append(f"{size}({stocks.get(size, 0)}) - –Ω–∞ {days} –¥–Ω–µ–π!")
                    message += f"‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–Ω–æ: {' '.join(critical_info)}\n"
                
                if zero_sizes:
                    message += f"üî¥ –ù—É–ª–µ–≤—ã–µ: {', '.join(zero_sizes)} –Ω–∞ –≤—Å–µ—Ö —Å–∫–ª–∞–¥–∞—Ö\n"
                
                message += "\n"
            
            return self._truncate_message(message)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö"

    def format_error(self, data: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ"""
        try:
            error_type = data.get("error_type", "unknown")
            message = data.get("message", "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
            fallback_data = data.get("fallback_data", False)
            
            if error_type == "wb_api_unavailable":
                error_msg = "‚ùå –û–®–ò–ë–ö–ê\n\nWB API –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
                if fallback_data:
                    error_msg += "\n\n–ü–æ–∫–∞–∑–∞–Ω—ã –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"
            elif error_type == "database_error":
                error_msg = "‚ùå –û–®–ò–ë–ö–ê\n\n–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
            else:
                error_msg = f"‚ùå –û–®–ò–ë–ö–ê\n\n{message}"
            
            return self._truncate_message(error_msg)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"

    def _format_datetime(self, datetime_str: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏ —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –ø–æ –ú–°–ö."""
        try:
            if not datetime_str:
                return "N/A"
            dt = datetime.fromisoformat(datetime_str.replace('Z', '+00:00'))
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ú–°–ö
            msk_dt = TimezoneUtils.to_msk(dt)
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∫ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú
            return msk_dt.strftime("%d.%m.%Y %H:%M")
        except:
            return datetime_str
    
    def _format_datetime_simple(self, datetime_str: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏ —Å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–µ–π –≤ –ú–°–ö."""
        try:
            if not datetime_str:
                return "N/A"
            
            # –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –≤ –ú–°–ö —Ñ–æ—Ä–º–∞—Ç–µ (—Å–æ–¥–µ—Ä–∂–∏—Ç +03:00), –ø—Ä–æ—Å—Ç–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º
            if '+03:00' in datetime_str:
                # –ó–∞–º–µ–Ω—è–µ–º T –Ω–∞ –ø—Ä–æ–±–µ–ª –∏ —É–±–∏—Ä–∞–µ–º —Å–µ–∫—É–Ω–¥—ã –∏ timezone
                # 2025-10-24T11:02:25+03:00 -> 2025-10-24 11:02
                formatted = datetime_str.replace('T', ' ')
                # –£–±–∏—Ä–∞–µ–º —Å–µ–∫—É–Ω–¥—ã –∏ timezone (–≤—Å–µ –ø–æ—Å–ª–µ :MM)
                if ':' in formatted:
                    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–∑–∏—Ü–∏—é –≤—Ç–æ—Ä–æ–≥–æ –¥–≤–æ–µ—Ç–æ—á–∏—è (—Å–µ–∫—É–Ω–¥—ã)
                    parts = formatted.split(':')
                    if len(parts) >= 2:
                        # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É –∏ —á–∞—Å—ã:–º–∏–Ω—É—Ç—ã
                        date_part = parts[0]  # 2025-10-24 11
                        time_part = parts[1]  # 02
                        return f"{date_part}:{time_part}"
            
            # Fallback: –ø–æ–ª–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
            dt = datetime.fromisoformat(datetime_str.replace('Z', '+00:00'))
            msk_dt = TimezoneUtils.to_msk(dt)
            return msk_dt.strftime("%Y-%m-%d %H:%M")
        except:
            return datetime_str

    def _format_stocks(self, stocks: Dict[str, int]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ –ø–æ —Ä–∞–∑–º–µ—Ä–∞–º"""
        if not stocks:
            return "N/A"
        
        stock_parts = []
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–∞–∑–º–µ—Ä—ã –∏–∑ –¥–∞–Ω–Ω—ã—Ö
        for size, count in stocks.items():
            stock_parts.append(f"{size}({count})")
        
        return " ".join(stock_parts)

    def _calculate_time_until_next_sync(self, next_sync: str) -> str:
        """–†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        try:
            if not next_sync or next_sync == "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ":
                return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            
            next_dt = datetime.fromisoformat(next_sync.replace('Z', '+00:00'))
            now = datetime.now(next_dt.tzinfo)
            diff = next_dt - now
            
            if diff.total_seconds() <= 0:
                return "–°–µ–π—á–∞—Å"
            elif diff.total_seconds() < 60:
                return f"{int(diff.total_seconds())} —Å–µ–∫—É–Ω–¥"
            else:
                return f"{int(diff.total_seconds() / 60)} –º–∏–Ω—É—Ç"
        except:
            return next_sync

    def _truncate_message(self, message: str) -> str:
        """–û–±—Ä–µ–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã"""
        if len(message) <= self.max_length:
            return message
        
        # –û–±—Ä–µ–∑–∞–µ–º –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã —Å —É—á–µ—Ç–æ–º –º–Ω–æ–≥–æ—Ç–æ—á–∏—è
        truncated = message[:self.max_length - 3]
        
        # –ü—ã—Ç–∞–µ–º—Å—è –æ–±—Ä–µ–∑–∞—Ç—å –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –ø–µ—Ä–µ–Ω–æ—Å—É —Å—Ç—Ä–æ–∫–∏
        last_newline = truncated.rfind('\n')
        if last_newline > self.max_length * 0.8:  # –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–µ—Ä–µ–Ω–æ—Å –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ
            truncated = truncated[:last_newline]
        
        return truncated + "..."

    def format_order_detail(self, data: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –∑–∞–∫–∞–∑–∞"""
        try:
            order = data.get("order", {})
            if not order:
                return "‚ùå –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            
            # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            order_id = order.get("id", "N/A")
            wb_order_id = order.get("order_id", "N/A")
            order_date = self._format_datetime_simple(order.get("date", ""))
            status = order.get("status", "unknown")
            
            # –¢–æ–≤–∞—Ä
            nm_id = order.get("nm_id", "N/A")
            product_name = order.get("product_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            article = order.get("article", "")
            size = order.get("size", "")
            barcode = order.get("barcode", "")
            
            # –§–∏–Ω–∞–Ω—Å—ã
            total_price = order.get("total_price", 0)
            spp_percent = order.get("spp_percent", 0)
            customer_price = order.get("customer_price", 0)
            discount_percent = order.get("discount_percent", 0)
            
            # –°–∫–ª–∞–¥—ã
            warehouse_from = order.get("warehouse_from", "")
            warehouse_to = order.get("warehouse_to", "")
            
            # –ü—Ä–æ–¥–∞–∂–∏
            sales_periods = order.get("sales_periods", {})
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤
            orders_stats = order.get("orders_stats", {})
            
            # –†–µ–π—Ç–∏–Ω–≥–∏
            avg_rating = order.get("avg_rating", 0)
            reviews_count = order.get("reviews_count", 0)
            rating_distribution = order.get("rating_distribution", {})
            
            # –û—Å—Ç–∞—Ç–∫–∏
            stocks = order.get("stocks", {})
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–∫–∞–∑–∞ –ø–æ —Å—Ç–∞—Ç—É—Å—É
            status_map = {
                "active": "üßæ–ó–ê–ö–ê–óüßæ",
                "buyout": "üí∞–í–´–ö–£–üüí∞", 
                "canceled": "‚Ü©Ô∏è–û–¢–ú–ï–ù–ê‚Ü©Ô∏è",
                "return": "üî¥–í–û–ó–í–†–ê–¢üî¥"
            }
            order_type = status_map.get(status, "üßæ–ó–ê–ö–ê–óüßæ")
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è (—Å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–µ–π –≤ –ú–°–ö)
            formatted_datetime = self._format_datetime_simple(order_date)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
            message = f"""{order_type}
üÜî {wb_order_id}
{formatted_datetime}

üëó {nm_id} / {article} / ({size})
üéπ {barcode}"""
            
            message += f"""

üí∞ –§–∏–Ω–∞–Ω—Å—ã:
–¶–µ–Ω–∞ –∑–∞–∫–∞–∑–∞: {total_price:,.1f}‚ÇΩ
–°–ü–ü %: {spp_percent}%
–¶–µ–Ω–∞ –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è: {customer_price:,.1f}‚ÇΩ
–°–∫–∏–¥–∫–∞: {discount_percent}%"""
            
            if warehouse_from or warehouse_to:
                message += f"\n\nüöõ {warehouse_from} -> {warehouse_to}"
            
            # –í—ã–∫—É–ø—ã –≤ —Ç–∞–±–ª–∏—á–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
            if sales_periods:
                sales_7 = sales_periods.get('7_days', 0)
                sales_14 = sales_periods.get('14_days', 0)
                sales_30 = sales_periods.get('30_days', 0)
                message += f"""

üìà –í—ã–∫—É–ø—ã –∑–∞ –ø–µ—Ä–∏–æ–¥—ã:
7 | 14 | 30 –¥–Ω–µ–π:
{sales_7} | {sales_14} | {sales_30}"""
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤
            if orders_stats:
                total_orders = orders_stats.get('total_orders', 0)
                active_orders = orders_stats.get('active_orders', 0)
                canceled_orders = orders_stats.get('canceled_orders', 0)
                buyout_orders = orders_stats.get('buyout_orders', 0)
                return_orders = orders_stats.get('return_orders', 0)
                
                message += f"""

üîç –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞–∫–∞–∑–∞–º:
–í—Å–µ–≥–æ: {total_orders} –∑–∞–∫–∞–∑–æ–≤
–ê–∫—Ç–∏–≤–Ω—ã–µ: {active_orders}
–û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ: {canceled_orders}
–í—ã–∫—É–ø—ã: {buyout_orders}
–í–æ–∑–≤—Ä–∞—Ç—ã: {return_orders}"""
            
            # –†–µ–π—Ç–∏–Ω–≥–∏ –∏ –æ—Ç–∑—ã–≤—ã
            message += f"""

‚≠ê –†–µ–π—Ç–∏–Ω–≥ –∏ –æ—Ç–∑—ã–≤—ã:
–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {avg_rating:.2f}
–í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: {reviews_count}"""
            
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –≤ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö)
            if rating_distribution and reviews_count > 0:
                # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∑–≤–µ–∑–¥–∞–º (–æ—Ç 5 –¥–æ 1)
                stars_5 = rating_distribution.get(5, 0)
                stars_4 = rating_distribution.get(4, 0)
                stars_3 = rating_distribution.get(3, 0)
                stars_2 = rating_distribution.get(2, 0)
                stars_1 = rating_distribution.get(1, 0)
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã
                pct_5 = (stars_5 / reviews_count) * 100
                pct_4 = (stars_4 / reviews_count) * 100
                pct_3 = (stars_3 / reviews_count) * 100
                pct_2 = (stars_2 / reviews_count) * 100
                pct_1 = (stars_1 / reviews_count) * 100
                
                message += f"""

5‚≠ê - {pct_5:.1f}%
4‚≠ê - {pct_4:.1f}%
3‚≠ê - {pct_3:.1f}%
2‚≠ê - {pct_2:.1f}%
1‚≠ê - {pct_1:.1f}%"""
            
            # –û—Å—Ç–∞—Ç–∫–∏
            if stocks:
                message += "\n\nüì¶ –û—Å—Ç–∞—Ç–∫–∏ –ø–æ —Ä–∞–∑–º–µ—Ä–∞–º:"
                for size_key in sorted(stocks.keys()):
                    quantity = stocks[size_key]
                    message += f"\n{size_key}: {quantity} —à—Ç."
            
            return self._truncate_message(message)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –∑–∞–∫–∞–∑–∞: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –∑–∞–∫–∞–∑–∞"

    # ===== –ú–ï–¢–û–î–´ –î–õ–Ø WB –ö–ê–ë–ò–ù–ï–¢–û–í =====

    def format_cabinet_status_message(self, cabinet_data: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–±–∏–Ω–µ—Ç–æ–≤"""
        try:
            cabinets = cabinet_data.get("cabinets", [])
            if not cabinets:
                return "üîë –°–¢–ê–¢–£–° WB –ö–ê–ë–ò–ù–ï–¢–û–í\n\n‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–∞–±–∏–Ω–µ—Ç–æ–≤"
            
            message = "üîë –°–¢–ê–¢–£–° WB –ö–ê–ë–ò–ù–ï–¢–û–í\n\n"
            
            for i, cabinet in enumerate(cabinets, 1):
                name = cabinet.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç')
                status = cabinet.get('status', 'inactive')
                api_status = cabinet.get('api_key_status', 'invalid')
                connected_at = cabinet.get('connected_at')
                last_sync = cabinet.get('last_sync')
                
                # –°—Ç–∞—Ç—É—Å –∫–∞–±–∏–Ω–µ—Ç–∞
                status_emoji = "‚úÖ" if status == "active" else "‚ùå"
                status_text = "–ê–∫—Ç–∏–≤–µ–Ω" if status == "active" else "–ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
                
                # –°—Ç–∞—Ç—É—Å API –∫–ª—é—á–∞
                api_emoji = "üîë" if api_status == "valid" else "‚ö†Ô∏è"
                api_text = "–í–∞–ª–∏–¥–Ω—ã–π" if api_status == "valid" else "–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π"
                
                message += f"üè¢ {name}\n"
                message += f"‚Ä¢ –°—Ç–∞—Ç—É—Å: {status_emoji} {status_text}\n"
                message += f"‚Ä¢ API –∫–ª—é—á: {api_emoji} {api_text}\n"
                
                if connected_at:
                    try:
                        dt = datetime.fromisoformat(connected_at.replace('Z', '+00:00'))
                        message += f"‚Ä¢ –ü–æ–¥–∫–ª—é—á–µ–Ω: {dt.strftime('%d.%m.%Y %H:%M')}\n"
                    except:
                        message += f"‚Ä¢ –ü–æ–¥–∫–ª—é—á–µ–Ω: {connected_at}\n"
                
                if last_sync:
                    try:
                        dt = datetime.fromisoformat(last_sync.replace('Z', '+00:00'))
                        message += f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: {dt.strftime('%d.%m.%Y %H:%M')}\n"
                    except:
                        message += f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: {last_sync}\n"
                
                if i < len(cabinets):
                    message += "\n"
            
            return self._truncate_message(message)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–±–∏–Ω–µ—Ç–æ–≤: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–±–∏–Ω–µ—Ç–æ–≤"

    def format_cabinet_connect_message(self, connect_data: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–∞–±–∏–Ω–µ—Ç–∞"""
        try:
            cabinet_name = connect_data.get("cabinet_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
            status = connect_data.get("status", "unknown")
            connected_at = connect_data.get("connected_at")
            api_key_status = connect_data.get("api_key_status", "unknown")
            
            if status != "connected":
                return "‚ùå –û–®–ò–ë–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø\n\nüîß –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∫–∞–±–∏–Ω–µ—Ç"
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            connect_time = "—Ç–æ–ª—å–∫–æ —á—Ç–æ"
            if connected_at:
                try:
                    dt = datetime.fromisoformat(connected_at.replace('Z', '+00:00'))
                    connect_time = dt.strftime('%d.%m.%Y %H:%M')
                except:
                    connect_time = connected_at
            
            message = f"""‚úÖ –ö–ê–ë–ò–ù–ï–¢ –ü–û–î–ö–õ–Æ–ß–ï–ù!

üè¢ {cabinet_name}
üîë API –∫–ª—é—á: {'üîë –í–∞–ª–∏–¥–Ω—ã–π' if api_key_status == 'valid' else '‚ö†Ô∏è –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π'}
üìÖ –ü–æ–¥–∫–ª—é—á–µ–Ω: {connect_time}

üéâ –ö–∞–±–∏–Ω–µ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!
üìä –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–∞—Ö, –æ—Å—Ç–∞—Ç–∫–∞—Ö –∏ –æ—Ç–∑—ã–≤–∞—Ö."""
            
            return message
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–∞–±–∏–Ω–µ—Ç–∞: {e}")
            return "‚úÖ –ö–ê–ë–ò–ù–ï–¢ –ü–û–î–ö–õ–Æ–ß–ï–ù!\n\nüéâ –ö–∞–±–∏–Ω–µ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω!"

    def format_cabinet_connect_error_message(self, error_data: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—à–∏–±–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–∞–±–∏–Ω–µ—Ç–∞"""
        try:
            error = error_data.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
            return f"‚ùå –û–®–ò–ë–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø\n\nüîß {error}"
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return "‚ùå –û–®–ò–ë–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø\n\nüîß –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞"

    def format_cabinet_already_exists_message(self, error_data: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º –∫–∞–±–∏–Ω–µ—Ç–µ"""
        try:
            return "‚ö†Ô∏è –ö–ê–ë–ò–ù–ï–¢ –£–ñ–ï –ü–û–î–ö–õ–Æ–ß–ï–ù\n\nüîë –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç WB"
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º –∫–∞–±–∏–Ω–µ—Ç–µ: {e}")
            return "‚ö†Ô∏è –ö–ê–ë–ò–ù–ï–¢ –£–ñ–ï –ü–û–î–ö–õ–Æ–ß–ï–ù"

    def _format_time_ago(self, dt: datetime) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ '–Ω–∞–∑–∞–¥'"""
        try:
            now = datetime.now(dt.tzinfo) if dt.tzinfo else datetime.now()
            diff = now - dt
            
            if diff.total_seconds() < 60:
                return f"{int(diff.total_seconds())} —Å–µ–∫ –Ω–∞–∑–∞–¥"
            elif diff.total_seconds() < 3600:
                return f"{int(diff.total_seconds() / 60)} –º–∏–Ω –Ω–∞–∑–∞–¥"
            elif diff.total_seconds() < 86400:
                return f"{int(diff.total_seconds() / 3600)} —á –Ω–∞–∑–∞–¥"
            else:
                return f"{int(diff.total_seconds() / 86400)} –¥–Ω –Ω–∞–∑–∞–¥"
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏: {e}")
            return "–Ω–µ–¥–∞–≤–Ω–æ"

    def _format_permissions(self, permissions: List[str]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞"""
        try:
            if not permissions:
                return "–ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞"
            
            permission_map = {
                "read_orders": "–ß—Ç–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤",
                "read_stocks": "–ß—Ç–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤", 
                "read_reviews": "–ß—Ç–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤",
                "read_products": "–ß—Ç–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤",
                "read_analytics": "–ß—Ç–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"
            }
            
            formatted = [permission_map.get(p, p) for p in permissions]
            return ", ".join(formatted)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∞–≤: {e}")
            return "–ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞"

    def _format_api_key_status(self, status: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ API –∫–ª—é—á–∞"""
        try:
            status_map = {
                "valid": "üîë –í–∞–ª–∏–¥–Ω—ã–π",
                "invalid": "‚ö†Ô∏è –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π",
                "expired": "‚è∞ –ò—Å—Ç–µ–∫",
                "unknown": "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
            }
            return status_map.get(status, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ API –∫–ª—é—á–∞: {e}")
            return "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"

    def _format_cabinet_status(self, status: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–±–∏–Ω–µ—Ç–∞"""
        try:
            status_map = {
                "active": "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω",
                "inactive": "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω",
                "suspended": "‚è∏Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω",
                "unknown": "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
            }
            return status_map.get(status, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–±–∏–Ω–µ—Ç–∞: {e}")
            return "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"

    def format_orders_statistics(self, data: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∑–∞–∫–∞–∑–∞–º"""
        try:
            orders = data.get("orders", {})
            sales = data.get("sales", {})
            summary = data.get("summary", {})
            
            message = "üìä –ü–û–õ–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ê–ö–ê–ó–û–í\n\n"
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤
            message += "üõí –ó–ê–ö–ê–ó–´:\n"
            message += f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {orders.get('total_orders', 0)}\n"
            message += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ: {orders.get('active_orders', 0)} ({orders.get('active_percentage', 0):.1f}%)\n"
            message += f"‚Ä¢ –û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ: {orders.get('canceled_orders', 0)} ({orders.get('canceled_percentage', 0):.1f}%)\n"
            message += f"‚Ä¢ –ë–µ–∑ —Å—Ç–∞—Ç—É—Å–∞: {orders.get('no_status_orders', 0)}\n\n"
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∂
            message += "üí∞ –ü–†–û–î–ê–ñ–ò:\n"
            message += f"‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–æ–¥–∞–∂: {sales.get('total_sales', 0)}\n"
            message += f"‚Ä¢ –í—ã–∫—É–ø—ã: {sales.get('buyouts', 0)} ({sales.get('buyout_rate', 0):.1f}%)\n"
            message += f"‚Ä¢ –í–æ–∑–≤—Ä–∞—Ç—ã: {sales.get('returns', 0)}\n"
            message += f"‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞: {sales.get('total_amount', 0):,.0f}‚ÇΩ\n"
            message += f"‚Ä¢ –°—É–º–º–∞ –≤—ã–∫—É–ø–æ–≤: {sales.get('buyouts_amount', 0):,.0f}‚ÇΩ\n"
            message += f"‚Ä¢ –°—É–º–º–∞ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤: {sales.get('returns_amount', 0):,.0f}‚ÇΩ\n\n"
            
            # –°–≤–æ–¥–∫–∞
            message += "üìà –°–í–û–î–ö–ê:\n"
            message += f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {summary.get('total_orders', 0)}\n"
            message += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {summary.get('active_orders', 0)}\n"
            message += f"‚Ä¢ –û—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö: {summary.get('canceled_orders', 0)}\n"
            message += f"‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–æ–¥–∞–∂: {summary.get('total_sales', 0)}\n"
            message += f"‚Ä¢ –í—ã–∫—É–ø–æ–≤: {summary.get('buyouts', 0)}\n"
            message += f"‚Ä¢ –í–æ–∑–≤—Ä–∞—Ç–æ–≤: {summary.get('returns', 0)}\n"
            message += f"‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–∫—É–ø–∞: {summary.get('buyout_rate', 0):.1f}%\n"
            
            return self._truncate_message(message)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–∫–∞–∑–æ–≤: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–∫–∞–∑–æ–≤"

    def format_cabinet_removal_notification(self, data: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–±–∏–Ω–µ—Ç–∞"""
        try:
            cabinet_name = data.get("cabinet_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
            validation_error = data.get("validation_error", {})
            removal_reason = data.get("removal_reason", "API –∫–ª—é—á –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω")
            
            message = f"""üö® –ö–ê–ë–ò–ù–ï–¢ –£–î–ê–õ–ï–ù

üè¢ –ö–∞–±–∏–Ω–µ—Ç: {cabinet_name}
‚ùå –ü—Ä–∏—á–∏–Ω–∞: {removal_reason}

üìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:
‚Ä¢ –°—Ç–∞—Ç—É—Å: {validation_error.get('status_code', 'N/A')}
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–µ: {validation_error.get('message', 'N/A')}
‚Ä¢ –ö–æ–¥ –æ—à–∏–±–∫–∏: {validation_error.get('error_code', 'N/A')}

‚ö†Ô∏è –ö–∞–±–∏–Ω–µ—Ç –±—ã–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω –∏–∑-–∑–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–≥–æ API –∫–ª—é—á–∞.
–í—Å–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–±–∏–Ω–µ—Ç–∞ (–∑–∞–∫–∞–∑—ã, —Ç–æ–≤–∞—Ä—ã, –æ—Å—Ç–∞—Ç–∫–∏, –æ—Ç–∑—ã–≤—ã, –ø—Ä–æ–¥–∞–∂–∏) –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã.

üí° –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π API –∫–ª—é—á —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /connect"""
            
            return self._truncate_message(message)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–±–∏–Ω–µ—Ç–∞: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–±–∏–Ω–µ—Ç–∞"