"""
–°–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –∞–ª–µ—Ä—Ç–æ–≤ –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º
"""

from sqlalchemy.orm import Session
from datetime import datetime
from typing import Dict, Any, List
import logging
import os
import httpx

from app.features.wb_api.models import WBProduct
from app.features.notifications.models import NotificationSettings
from app.utils.timezone import TimezoneUtils
from .stock_analyzer import DynamicStockAnalyzer
from .crud import StockAlertHistoryCRUD
from .schemas import StockAlertHistoryCreate

logger = logging.getLogger(__name__)


class StockAlertNotificationService:
    """–°–µ—Ä–≤–∏—Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö"""
    
    def __init__(self, db: Session):
        self.db = db
        self.analyzer = DynamicStockAnalyzer(db)
        self.alert_crud = StockAlertHistoryCRUD()
        self.cooldown_hours = int(os.getenv("STOCK_ALERT_COOLDOWN_HOURS", "24"))
    
    async def check_and_send_alerts(
        self,
        cabinet_id: int,
        user_id: int,
        bot_webhook_url: str
    ) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Å—Ç–∞—Ç–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        
        –õ–æ–≥–∏–∫–∞:
        1. –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–∏—Å–∫–æ–≤—ã—Ö –ø–æ–∑–∏—Ü–∏–π —á–µ—Ä–µ–∑ analyzer
        2. –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ–∑–∏—Ü–∏–∏, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –Ω–µ–¥–∞–≤–Ω–æ –±—ã–ª–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (cooldown)
        3. –î–ª—è –∫–∞–∂–¥–æ–π –ø–æ–∑–∏—Ü–∏–∏:
           - –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
           - –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
           - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ webhook
           - –ó–∞–ø–∏—Å–∞—Ç—å –≤ stock_alert_history
        
        Args:
            cabinet_id: ID –∫–∞–±–∏–Ω–µ—Ç–∞
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            bot_webhook_url: URL webhook –±–æ—Ç–∞
        
        Returns:
            –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        """
        try:
            logger.info(f"Checking stock alerts for cabinet {cabinet_id}, user {user_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_settings = self.db.query(NotificationSettings).filter(
                NotificationSettings.user_id == user_id
            ).first()
            
            if not user_settings or not user_settings.critical_stocks_enabled:
                logger.info(f"Stock alerts disabled for user {user_id}")
                return {
                    "status": "disabled",
                    "alerts_sent": 0,
                    "alerts_skipped": 0,
                    "positions_analyzed": 0
                }
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∏—Å–∫–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏
            at_risk_positions = await self.analyzer.analyze_stock_positions(cabinet_id)
            
            if not at_risk_positions:
                logger.info(f"No at-risk positions found for cabinet {cabinet_id}")
                return {
                    "status": "success",
                    "alerts_sent": 0,
                    "alerts_skipped": 0,
                    "positions_analyzed": 0
                }
            
            alerts_sent = 0
            alerts_skipped = 0
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Ä–∏—Å–∫–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
            for position in at_risk_positions:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    if not await self.should_send_alert(
                        cabinet_id=cabinet_id,
                        nm_id=position["nm_id"],
                        warehouse_name=position["warehouse_name"],
                        size=position["size"]
                    ):
                        alerts_skipped += 1
                        logger.info(
                            f"Skipping alert for nm_id={position['nm_id']} "
                            f"(cooldown active)"
                        )
                        continue
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    notification_data = self._format_notification_data(position)
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ webhook
                    if bot_webhook_url:
                        await self.send_webhook_notification(
                            user_id=user_id,
                            webhook_url=bot_webhook_url,
                            notification_data=notification_data
                        )
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
                    await self.save_alert_history(cabinet_id, user_id, position)
                    
                    alerts_sent += 1
                    logger.info(
                        f"Sent alert for nm_id={position['nm_id']}, "
                        f"warehouse={position['warehouse_name']}, size={position['size']}"
                    )
                    
                except Exception as e:
                    logger.error(f"Error processing alert for position: {e}")
                    continue
            
            logger.info(
                f"Stock alerts completed: {alerts_sent} sent, "
                f"{alerts_skipped} skipped, {len(at_risk_positions)} analyzed"
            )
            
            return {
                "status": "success",
                "alerts_sent": alerts_sent,
                "alerts_skipped": alerts_skipped,
                "positions_analyzed": len(at_risk_positions)
            }
            
        except Exception as e:
            logger.error(f"Error in check_and_send_alerts: {e}")
            return {
                "status": "error",
                "error": str(e),
                "alerts_sent": 0,
                "alerts_skipped": 0,
                "positions_analyzed": 0
            }
    
    async def should_send_alert(
        self,
        cabinet_id: int,
        nm_id: int,
        warehouse_name: str,
        size: str
    ) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        
        –ü—Ä–æ–≤–µ—Ä–∫–∏:
        1. –ù–µ –±—ã–ª–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ cooldown_hours
        2. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∫–ª—é—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –≤ check_and_send_alerts)
        3. –û—Å—Ç–∞—Ç–æ–∫ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –º–µ–Ω—å—à–µ –∑–∞–∫–∞–∑–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥
        
        Args:
            cabinet_id: ID –∫–∞–±–∏–Ω–µ—Ç–∞
            nm_id: ID —Ç–æ–≤–∞—Ä–∞
            warehouse_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Å–∫–ª–∞–¥–∞
            size: –†–∞–∑–º–µ—Ä
        
        Returns:
            True –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, False –µ—Å–ª–∏ –Ω–µ—Ç
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (cooldown)
            recent_alert = self.alert_crud.get_recent_alert(
                db=self.db,
                cabinet_id=cabinet_id,
                nm_id=nm_id,
                warehouse_name=warehouse_name,
                size=size,
                hours=self.cooldown_hours
            )
            
            if recent_alert:
                logger.debug(
                    f"Recent alert found for nm_id={nm_id}, skipping (cooldown)"
                )
                return False
            
            return True
            
        except Exception as e:
            logger.error(f"Error checking if should send alert: {e}")
            return False
    
    def _format_notification_data(self, position: Dict[str, Any]) -> Dict[str, Any]:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        
        Args:
            position: –î–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ analyzer
        
        Returns:
            –î–∞–Ω–Ω—ã–µ –¥–ª—è webhook
        """
        telegram_text = f"""‚ö†Ô∏è –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò–ô –ê–õ–ï–†–¢ –û–°–¢–ê–¢–ö–û–í

üëó {position['name']} ({position['brand']})
üÜî {position['nm_id']}
üì¶ {position['warehouse_name']}
üìè –†–∞–∑–º–µ—Ä: {position['size']}

üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–∞ 24—á:
‚Ä¢ –ó–∞–∫–∞–∑–æ–≤: {position['orders_last_24h']} —à—Ç.
‚Ä¢ –¢–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫: {position['current_stock']} —à—Ç.
‚Ä¢ –ü—Ä–æ–≥–Ω–æ–∑: {position['days_remaining']} –¥–Ω.

‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ü–æ–ø–æ–ª–Ω–∏—Ç—å –æ—Å—Ç–∞—Ç–∫–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è

üïí {TimezoneUtils.format_for_user(TimezoneUtils.now_msk())}"""
        
        return {
            "type": "dynamic_stock_alert",
            "created_at": TimezoneUtils.format_for_user(TimezoneUtils.now_msk()),
            "data": {
                "nm_id": position["nm_id"],
                "name": position["name"],
                "brand": position["brand"],
                "image_url": position.get("image_url"),
                "warehouse_name": position["warehouse_name"],
                "size": position["size"],
                "current_stock": position["current_stock"],
                "orders_last_24h": position["orders_last_24h"],
                "days_remaining": position["days_remaining"],
                "avg_orders_per_day": position["orders_last_24h"],  # Approximation
                "detected_at": TimezoneUtils.format_for_user(TimezoneUtils.now_msk())
            },
            "telegram_text": telegram_text
        }
    
    async def send_webhook_notification(
        self,
        user_id: int,
        webhook_url: str,
        notification_data: Dict[str, Any]
    ) -> Dict[str, Any]:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ webhook
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            webhook_url: URL webhook
            notification_data: –î–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º user_id –∫ –¥–∞–Ω–Ω—ã–º
            payload = {
                **notification_data,
                "user_id": user_id
            }
            
            async with httpx.AsyncClient(timeout=10.0) as client:
                response = await client.post(webhook_url, json=payload)
                response.raise_for_status()
            
            logger.info(f"Webhook sent successfully to {webhook_url}")
            return {"status": "success"}
            
        except Exception as e:
            logger.error(f"Error sending webhook notification: {e}")
            return {"status": "error", "error": str(e)}
    
    async def save_alert_history(
        self,
        cabinet_id: int,
        user_id: int,
        position_data: Dict[str, Any]
    ) -> None:
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        
        Args:
            cabinet_id: ID –∫–∞–±–∏–Ω–µ—Ç–∞
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            position_data: –î–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
        """
        try:
            alert_data = StockAlertHistoryCreate(
                cabinet_id=cabinet_id,
                user_id=user_id,
                nm_id=position_data["nm_id"],
                warehouse_name=position_data["warehouse_name"],
                size=position_data["size"],
                alert_type="dynamic_stock",
                orders_last_24h=position_data["orders_last_24h"],
                current_stock=position_data["current_stock"],
                days_remaining=position_data["days_remaining"]
            )
            
            self.alert_crud.create(self.db, alert_data)
            logger.info(f"Alert history saved for nm_id={position_data['nm_id']}")
            
        except Exception as e:
            logger.error(f"Error saving alert history: {e}")

