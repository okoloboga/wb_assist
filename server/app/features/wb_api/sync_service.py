import asyncio
import logging
from datetime import datetime, timezone, timedelta
from typing import Dict, List, Any, Optional
from sqlalchemy.orm import Session
from sqlalchemy import and_, or_, func

from .models import WBCabinet, WBProduct, WBOrder, WBStock, WBReview, WBSyncLog
from .client import WBAPIClient
from .cache_manager import WBCacheManager
from app.features.user.models import User

logger = logging.getLogger(__name__)


class WBSyncService:
    """
    –°–µ—Ä–≤–∏—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å Wildberries API
    """
    
    def __init__(self, db: Session, cache_manager: WBCacheManager = None):
        self.db = db
        self.cache_manager = cache_manager or WBCacheManager(db)
    
    async def sync_all_data(self, cabinet: WBCabinet) -> Dict[str, Any]:
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –∫–∞–±–∏–Ω–µ—Ç–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–æ–¥–∏–Ω —Ä–∞–∑ –≤ –Ω–∞—á–∞–ª–µ)
            should_notify = await self._should_send_notification(cabinet)
            if should_notify:
                logger.info(f"üì¢ Notifications ENABLED for cabinet {cabinet.id}")
            else:
                logger.info(f"üîá Notifications DISABLED for cabinet {cabinet.id} (first sync or long break)")
            
            client = WBAPIClient(cabinet)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π)
            date_to = datetime.now(timezone.utc).strftime("%Y-%m-%d")
            date_from = (datetime.now(timezone.utc) - timedelta(days=30)).strftime("%Y-%m-%d")
            
            results = {}
            
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
            logger.info(f"Starting sync_all_data for cabinet {cabinet.id}")
            sync_tasks = [
                ("products", self.sync_products(cabinet, client)),
                ("orders", self.sync_orders(cabinet, client, date_from, date_to, should_notify)),
                ("stocks", self.sync_stocks(cabinet, client, date_from, date_to)),
                ("reviews", self.sync_reviews(cabinet, client, date_from, date_to))
            ]
            
            for task_name, task in sync_tasks:
                try:
                    result = await task
                    results[task_name] = result
                    logger.info(f"Sync {task_name} completed: {result.get('status', 'unknown')}")
                except Exception as e:
                    logger.error(f"Sync {task_name} failed: {e}")
                    results[task_name] = {"status": "error", "error": str(e)}
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –æ—Å—Ç–∞—Ç–∫–æ–≤
            try:
                price_result = await self.update_product_prices_from_stocks(cabinet)
                results["product_prices"] = price_result
                logger.info(f"Product prices updated: {price_result.get('updated_products', 0)} products")
            except Exception as e:
                logger.error(f"Failed to update product prices: {e}")
                results["product_prices"] = {"status": "error", "error": str(e)}
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –æ—Ç–∑—ã–≤–æ–≤
            try:
                rating_result = await self.update_product_ratings_from_reviews(cabinet)
                results["product_ratings"] = rating_result
                logger.info(f"Product ratings updated: {rating_result.get('updated_products', 0)} products")
            except Exception as e:
                logger.error(f"Failed to update product ratings: {e}")
                results["product_ratings"] = {"status": "error", "error": str(e)}
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            cabinet.last_sync_at = datetime.now(timezone.utc)
            self.db.commit()
            
            # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞
            if not cabinet.last_sync_at:
                logger.info(f"–ü–ª–∞–Ω–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –¥–ª—è –∫–∞–±–∏–Ω–µ—Ç–∞ {cabinet.id}")
                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
                from app.features.sync.tasks import schedule_cabinet_sync
                schedule_cabinet_sync(cabinet.id)
            
            return {
                "status": "success",
                "results": results,
                "sync_time": cabinet.last_sync_at.isoformat()
            }
            
        except Exception as e:
            logger.error(f"Sync all data failed: {str(e)}")
            return {"status": "error", "error_message": str(e)}

    async def sync_products(
        self, 
        cabinet: WBCabinet, 
        client: WBAPIClient
    ) -> Dict[str, Any]:
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            cache_key = f"products_{cabinet.id}"
            cached_data = await self.cache_manager.get_products_cache(cabinet.id)
            
            if cached_data:
                return {
                    "status": "success",
                    "records_processed": cached_data.get("total", 0),
                    "records_created": 0,
                    "records_updated": 0,
                    "cached": True
                }
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ API
            products_data = await client.get_products()
            
            if not products_data:
                return {"status": "error", "error_message": "No products data received"}
            
            logger.info(f"Fetched {len(products_data)} products from WB API")
            
            created = 0
            updated = 0
            
            for product_data in products_data:
                nm_id = product_data.get("nmID")  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: nmID –≤–º–µ—Å—Ç–æ nmId
                if not nm_id:
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–≤–∞—Ä
                existing = self.db.query(WBProduct).filter(
                    and_(
                        WBProduct.cabinet_id == cabinet.id,
                        WBProduct.nm_id == nm_id
                    )
                ).first()
                
                if existing:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–≤–∞—Ä
                    existing.name = product_data.get("title")  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: title –≤–º–µ—Å—Ç–æ name
                    existing.vendor_code = product_data.get("vendorCode")
                    existing.brand = product_data.get("brand")
                    existing.category = product_data.get("subjectName")  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: subjectName –≤–º–µ—Å—Ç–æ category
                    # –¶–µ–Ω—ã –∏ —Ä–µ–π—Ç–∏–Ω–≥–∏ –ø–æ–ª—É—á–∞–µ–º –∏–∑ –¥—Ä—É–≥–∏—Ö API (–æ—Å—Ç–∞—Ç–∫–∏, –æ—Ç–∑—ã–≤—ã)
                    # existing.price = product_data.get("price")  # –ù–ï–¢ –≤ API —Ç–æ–≤–∞—Ä–æ–≤
                    # existing.discount_price = product_data.get("discountPrice")  # –ù–ï–¢ –≤ API —Ç–æ–≤–∞—Ä–æ–≤
                    # existing.rating = product_data.get("rating")  # –ù–ï–¢ –≤ API —Ç–æ–≤–∞—Ä–æ–≤
                    # existing.reviews_count = product_data.get("reviewsCount")  # –ù–ï–¢ –≤ API —Ç–æ–≤–∞—Ä–æ–≤
                    existing.in_stock = product_data.get("inStock", True)
                    existing.is_active = product_data.get("isActive", True)
                    existing.updated_at = datetime.now(timezone.utc)
                    updated += 1
                else:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä
                    product = WBProduct(
                        cabinet_id=cabinet.id,
                        nm_id=nm_id,
                        name=product_data.get("title"),  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: title –≤–º–µ—Å—Ç–æ name
                        vendor_code=product_data.get("vendorCode"),
                        brand=product_data.get("brand"),
                        category=product_data.get("subjectName"),  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: subjectName –≤–º–µ—Å—Ç–æ category
                        # –¶–µ–Ω—ã –∏ —Ä–µ–π—Ç–∏–Ω–≥–∏ –ø–æ–ª—É—á–∞–µ–º –∏–∑ –¥—Ä—É–≥–∏—Ö API (–æ—Å—Ç–∞—Ç–∫–∏, –æ—Ç–∑—ã–≤—ã)
                        # price=product_data.get("price"),  # –ù–ï–¢ –≤ API —Ç–æ–≤–∞—Ä–æ–≤
                        # discount_price=product_data.get("discountPrice"),  # –ù–ï–¢ –≤ API —Ç–æ–≤–∞—Ä–æ–≤
                        # rating=product_data.get("rating"),  # –ù–ï–¢ –≤ API —Ç–æ–≤–∞—Ä–æ–≤
                        # reviews_count=product_data.get("reviewsCount"),  # –ù–ï–¢ –≤ API —Ç–æ–≤–∞—Ä–æ–≤
                        in_stock=product_data.get("inStock", True),
                        is_active=product_data.get("isActive", True)
                    )
                    self.db.add(product)
                    created += 1
            
            self.db.commit()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            await self.cache_manager.set_products_cache(
                cabinet.id, 
                {"total": len(products_data), "products": products_data}
            )
            
            return {
                "status": "success",
                "records_processed": len(products_data),
                "records_created": created,
                "records_updated": updated
            }
            
        except Exception as e:
            logger.error(f"Products sync failed: {str(e)}")
            return {"status": "error", "error_message": str(e)}

    async def sync_orders(
        self, 
        cabinet: WBCabinet, 
        client: WBAPIClient, 
        date_from: str, 
        date_to: str,
        should_notify: bool = False
    ) -> Dict[str, Any]:
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–∫–∞–∑–æ–≤"""
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –≤—Å–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
            import asyncio
            return await asyncio.wait_for(
                self._sync_orders_internal(cabinet, client, date_from, date_to, should_notify),
                timeout=300  # 5 –º–∏–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º
            )
        except asyncio.TimeoutError:
            logger.error("Orders sync timeout after 5 minutes")
            return {"status": "error", "error_message": "Sync timeout"}
        except Exception as e:
            logger.error(f"Orders sync failed: {str(e)}")
            return {"status": "error", "error_message": str(e)}

    async def _sync_orders_internal(
        self, 
        cabinet: WBCabinet, 
        client: WBAPIClient, 
        date_from: str, 
        date_to: str,
        should_notify: bool = False
    ) -> Dict[str, Any]:
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–æ–≤"""
        try:
            logger.info(f"Starting orders sync for cabinet {cabinet.id}, dates: {date_from} to {date_to}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–∫–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä–æ–≤ –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–ª—è —ç—Ç–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞
            products_count = self.db.query(WBProduct).filter(WBProduct.cabinet_id == cabinet.id).count()
                # logger.info(f"Products in database for cabinet {cabinet.id}: {products_count}")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ API
            logger.info("Fetching orders from WB API...")
            orders_data = await client.get_orders(date_from, date_to)
            logger.info(f"Received {len(orders_data) if orders_data else 0} orders from API")
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∏—Å—Å–∏–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
            try:
                commissions_data = await client.get_commissions()
                logger.info(f"Commissions data type: {type(commissions_data)}, length: {len(commissions_data) if isinstance(commissions_data, list) else 'N/A'}")
                # logger.info(f"Commissions data content: {commissions_data}")
            except Exception as e:
                logger.error(f"Failed to get commissions: {e}")
                commissions_data = []
            
            if not orders_data:
                return {"status": "error", "error_message": "No orders data received"}
            
            created = 0
            updated = 0
            processed_order_ids = set()  # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ order_id –≤ —Ä–∞–º–∫–∞—Ö –æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            
            logger.info(f"Processing {len(orders_data)} orders from WB API")
            
            
            for i, order_data in enumerate(orders_data):
                try:
                    order_id = order_data.get("gNumber")
                    nm_id = order_data.get("nmId")
                    
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–∫–∞–∑—ã –±–µ–∑ order_id –∏–ª–∏ nm_id
                    if not order_id or not nm_id:
                        continue
                    
                    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∑–∞–∫–∞–∑–æ–≤ –±–µ–∑ nm_id –≤ –±–∞–∑–µ
                    if not nm_id:
                        logger.warning(f"Order {order_id} has no nm_id in WB API data")
                        continue
                    
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –≤ —Ä–∞–º–∫–∞—Ö –æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                    if order_id in processed_order_ids:
                        continue
                    processed_order_ids.add(order_id)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∑–∞–∫–∞–∑
                    existing = self.db.query(WBOrder).filter(
                        and_(
                            WBOrder.cabinet_id == cabinet.id,
                            WBOrder.order_id == str(order_id)
                        )
                    ).first()
                    
                    if existing:
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∑–∞–∫–∞–∑
                        old_nm_id = existing.nm_id
                        existing.nm_id = nm_id
                        if old_nm_id != nm_id:
                            logger.info(f"Updated order {order_id}: nm_id {old_nm_id} -> {nm_id}")
                        # else:
                            # Order already has nm_id, no need to log
                        existing.article = order_data.get("supplierArticle")
                        existing.name = order_data.get("subject")  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: subject –≤–º–µ—Å—Ç–æ name
                        existing.brand = order_data.get("brand")
                        existing.size = order_data.get("techSize")  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: techSize –≤–º–µ—Å—Ç–æ size
                        existing.barcode = order_data.get("barcode")
                        existing.quantity = 1  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –≤—Å–µ–≥–¥–∞ 1, —Ç–∞–∫ –∫–∞–∫ –Ω–µ—Ç –ø–æ–ª—è quantity
                        existing.price = order_data.get("finishedPrice")  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: finishedPrice –≤–º–µ—Å—Ç–æ price
                        existing.total_price = order_data.get("totalPrice")
                        existing.status = "canceled" if order_data.get("isCancel", False) else "active"  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –≤—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                        existing.order_date = self._parse_datetime(order_data.get("date"))
                        
                        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –ø—Ä–µ–¥–º–µ—Ç –∏–∑ —Ç–æ–≤–∞—Ä–∞ –ø–æ nmId
                        product = self.db.query(WBProduct).filter(
                            and_(
                                WBProduct.cabinet_id == cabinet.id,
                                WBProduct.nm_id == nm_id
                            )
                        ).first()
                        
                        if product:
                            existing.category = product.category  # subjectName –∏–∑ —Ç–æ–≤–∞—Ä–∞
                            existing.subject = product.name       # title –∏–∑ —Ç–æ–≤–∞—Ä–∞
                            # logger.info(f"Found product for nmId={nm_id}: category='{product.category}', subject='{product.name}'")
                        else:
                            # Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–∫–∞–∑–∞
                            existing.category = order_data.get("subject")  # subject –∏–∑ –∑–∞–∫–∞–∑–∞ –∫–∞–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è
                            existing.subject = order_data.get("subject")   # subject –∏–∑ –∑–∞–∫–∞–∑–∞ –∫–∞–∫ –ø—Ä–µ–¥–º–µ—Ç
                            # logger.info(f"Product not found for nmId={nm_id}, using order data: category='{existing.category}', subject='{existing.subject}'")
                        
                        total_price = order_data.get("totalPrice", 0)
                        commission_percent, commission_amount = self._calculate_commission(
                            existing.category, existing.subject, total_price, commissions_data
                        )
                        existing.commission_percent = commission_percent
                        existing.commission_amount = commission_amount
                        
                        # –ù–æ–≤—ã–µ –ø–æ–ª—è –∏–∑ WB API
                        existing.warehouse_from = order_data.get("warehouseName")
                        existing.warehouse_to = order_data.get("regionName")
                        existing.spp_percent = order_data.get("spp")
                        existing.customer_price = order_data.get("finishedPrice")
                        existing.discount_percent = order_data.get("discountPercent")
                        
                        # –†–∞—Å—á–µ—Ç –ª–æ–≥–∏—Å—Ç–∏–∫–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç)
                        logistics_amount = self._calculate_logistics(
                            order_data.get("warehouseName"), 
                            order_data.get("regionName"),
                            total_price
                        )
                        existing.logistics_amount = logistics_amount
                        
                        # logger.info(f"Updated order {order_id}: commission_percent={commission_percent}, commission_amount={commission_amount}")
                        
                        existing.updated_at = datetime.now(timezone.utc)
                        updated += 1
                    else:
                        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑
                        try:
                            # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –ø—Ä–µ–¥–º–µ—Ç –∏–∑ —Ç–æ–≤–∞—Ä–∞ –ø–æ nmId
                            product = self.db.query(WBProduct).filter(
                                and_(
                                    WBProduct.cabinet_id == cabinet.id,
                                    WBProduct.nm_id == nm_id
                                )
                            ).first()
                            
                            if product:
                                category = product.category  # subjectName –∏–∑ —Ç–æ–≤–∞—Ä–∞
                                subject = product.name       # title –∏–∑ —Ç–æ–≤–∞—Ä–∞
                                # logger.info(f"Found product for nmId={nm_id}: category='{product.category}', subject='{product.name}'")
                            else:
                                # Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–∫–∞–∑–∞
                                category = order_data.get("subject")  # subject –∏–∑ –∑–∞–∫–∞–∑–∞ –∫–∞–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è
                                subject = order_data.get("subject")   # subject –∏–∑ –∑–∞–∫–∞–∑–∞ –∫–∞–∫ –ø—Ä–µ–¥–º–µ—Ç
                                # logger.info(f"Product not found for nmId={nm_id}, using order data: category='{category}', subject='{subject}'")
                            
                            total_price = order_data.get("totalPrice", 0)
                            commission_percent, commission_amount = self._calculate_commission(
                                category, subject, total_price, commissions_data
                            )
                            
                            
                            order = WBOrder(
                                cabinet_id=cabinet.id,
                                order_id=str(order_id),
                                nm_id=nm_id,
                                article=order_data.get("supplierArticle"),
                                name=order_data.get("subject"),  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: subject –≤–º–µ—Å—Ç–æ name
                                brand=order_data.get("brand"),
                                size=order_data.get("techSize"),  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: techSize –≤–º–µ—Å—Ç–æ size
                                barcode=order_data.get("barcode"),
                                # –ü–æ–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –∫–æ–º–∏—Å—Å–∏–∏
                                category=category,
                                subject=subject,
                                commission_percent=commission_percent,
                                commission_amount=commission_amount,
                                quantity=1,  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –≤—Å–µ–≥–¥–∞ 1, —Ç–∞–∫ –∫–∞–∫ –Ω–µ—Ç –ø–æ–ª—è quantity
                                price=order_data.get("finishedPrice"),  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: finishedPrice –≤–º–µ—Å—Ç–æ price
                                total_price=order_data.get("totalPrice"),
                                # –ù–æ–≤—ã–µ –ø–æ–ª—è –∏–∑ WB API
                                warehouse_from=order_data.get("warehouseName"),
                                warehouse_to=order_data.get("regionName"),
                                spp_percent=order_data.get("spp"),
                                customer_price=order_data.get("finishedPrice"),
                                discount_percent=order_data.get("discountPercent"),
                                # –†–∞—Å—á–µ—Ç –ª–æ–≥–∏—Å—Ç–∏–∫–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç)
                                logistics_amount=self._calculate_logistics(
                                    order_data.get("warehouseName"), 
                                    order_data.get("regionName"),
                                    total_price
                                ),
                                status="canceled" if order_data.get("isCancel", False) else "active",  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –≤—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                                order_date=self._parse_datetime(order_data.get("date"))
                            )
                            
                            self.db.add(order)
                            self.db.flush()  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ–º –≤—Å—Ç–∞–≤–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
                            
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ
                            if should_notify:
                                await self._send_new_order_notification(cabinet, order_data, order)
                            
                            # logger.info(f"Created order {order_id}: commission_percent={commission_percent}, commission_amount={commission_amount}")
                            created += 1
                        except Exception as insert_error:
                            # –ï—Å–ª–∏ –∑–∞–∫–∞–∑ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (race condition), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ–≥–æ
                            if "duplicate key" in str(insert_error).lower() or "unique constraint" in str(insert_error).lower():
                                logger.warning(f"Order {order_id} already exists, skipping")
                                continue
                            else:
                                raise insert_error
                        
                except Exception as order_error:
                    logger.warning(f"Failed to process order {order_id}: {order_error}")
                    continue
            
            self.db.commit()
            
            return {
                "status": "success",
                "records_processed": len(orders_data),
                "records_created": created,
                "records_updated": updated
            }
            
        except Exception as e:
            logger.error(f"Orders sync failed: {str(e)}")
            # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
            try:
                self.db.rollback()
            except:
                pass
            return {"status": "error", "error_message": str(e)}

    async def sync_stocks(
        self, 
        cabinet: WBCabinet, 
        client: WBAPIClient, 
        date_from: str, 
        date_to: str
    ) -> Dict[str, Any]:
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ API
            stocks_data = await client.get_stocks(date_from, date_to)
            
            if not stocks_data:
                return {"status": "error", "error_message": "No stocks data received"}
            
            created = 0
            updated = 0
            
            for stock_data in stocks_data:
                nm_id = stock_data.get("nmId")
                warehouse_id = stock_data.get("warehouseId")
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏ –±–µ–∑ nm_id
                if not nm_id:
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫
                existing = self.db.query(WBStock).filter(
                    and_(
                        WBStock.cabinet_id == cabinet.id,
                        WBStock.nm_id == nm_id,
                        WBStock.warehouse_id == warehouse_id
                    )
                ).first()
                
                if existing:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫
                    existing.article = stock_data.get("supplierArticle")
                    existing.name = stock_data.get("name")  # –ù–ï–¢ –≤ API, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
                    existing.brand = stock_data.get("brand")
                    existing.size = stock_data.get("techSize")
                    existing.barcode = stock_data.get("barcode")
                    existing.quantity = stock_data.get("quantity")
                    existing.in_way_to_client = stock_data.get("inWayToClient")
                    existing.in_way_from_client = stock_data.get("inWayFromClient")
                    existing.warehouse_name = stock_data.get("warehouseName")
                    existing.last_updated = self._parse_datetime(stock_data.get("lastChangeDate"))
                    # –ù–æ–≤—ã–µ –ø–æ–ª—è –∏–∑ WB API
                    existing.category = stock_data.get("category")
                    existing.subject = stock_data.get("subject")
                    existing.price = stock_data.get("Price")
                    existing.discount = stock_data.get("Discount")
                    existing.quantity_full = stock_data.get("quantityFull")
                    existing.is_supply = stock_data.get("isSupply")
                    existing.is_realization = stock_data.get("isRealization")
                    existing.sc_code = stock_data.get("SCCode")
                    existing.updated_at = datetime.now(timezone.utc)
                    updated += 1
                else:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ—Å—Ç–∞—Ç–æ–∫
                    stock = WBStock(
                        cabinet_id=cabinet.id,
                        nm_id=nm_id,
                        article=stock_data.get("supplierArticle"),
                        name=stock_data.get("name"),  # –ù–ï–¢ –≤ API, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
                        brand=stock_data.get("brand"),
                        size=stock_data.get("techSize"),
                        barcode=stock_data.get("barcode"),
                        quantity=stock_data.get("quantity"),
                        in_way_to_client=stock_data.get("inWayToClient"),
                        in_way_from_client=stock_data.get("inWayFromClient"),
                        warehouse_id=warehouse_id,
                        warehouse_name=stock_data.get("warehouseName"),
                        last_updated=self._parse_datetime(stock_data.get("lastChangeDate")),
                        # –ù–æ–≤—ã–µ –ø–æ–ª—è –∏–∑ WB API
                        category=stock_data.get("category"),
                        subject=stock_data.get("subject"),
                        price=stock_data.get("Price"),
                        discount=stock_data.get("Discount"),
                        quantity_full=stock_data.get("quantityFull"),
                        is_supply=stock_data.get("isSupply"),
                        is_realization=stock_data.get("isRealization"),
                        sc_code=stock_data.get("SCCode")
                    )
                    self.db.add(stock)
                    created += 1
            
            self.db.commit()
            
            return {
                "status": "success",
                "records_processed": len(stocks_data),
                "records_created": created,
                "records_updated": updated
            }
            
        except Exception as e:
            logger.error(f"Stocks sync failed: {str(e)}")
            return {"status": "error", "error_message": str(e)}

    async def sync_reviews(
        self, 
        cabinet: WBCabinet, 
        client: WBAPIClient, 
        date_from: str, 
        date_to: str
    ) -> Dict[str, Any]:
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ç–∑—ã–≤–æ–≤"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –í–°–ï –æ—Ç–∑—ã–≤—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
            all_reviews_data = []
            skip = 0
            take = 1000
            total_fetched = 0
            
            while True:
                reviews_response = await client.get_reviews(is_answered=True, take=take, skip=skip)
                
                if not reviews_response or "data" not in reviews_response:
                    break
                
                reviews_data = reviews_response["data"].get("feedbacks", [])
                if not reviews_data:
                    break
                
                all_reviews_data.extend(reviews_data)
                total_fetched += len(reviews_data)
                
                logger.info(f"Fetched {len(reviews_data)} reviews (skip={skip}, total={total_fetched})")
                
                # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –º–µ–Ω—å—à–µ —á–µ–º –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
                if len(reviews_data) < take:
                    break
                
                skip += take
            
            logger.info(f"Total reviews fetched from WB API: {total_fetched}")
            
            if not all_reviews_data:
                return {"status": "success", "records_processed": 0, "records_created": 0, "records_updated": 0}
            
            reviews_data = all_reviews_data
            
            created = 0
            updated = 0
            
            for review_data in reviews_data:
                review_id = review_data.get("id")  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: id –≤–º–µ—Å—Ç–æ reviewId
                nm_id = review_data.get("productDetails", {}).get("nmId")  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏–∑ productDetails
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–∑—ã–≤—ã –±–µ–∑ review_id
                if not review_id:
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ—Ç–∑—ã–≤
                existing = self.db.query(WBReview).filter(
                    and_(
                        WBReview.cabinet_id == cabinet.id,
                        WBReview.review_id == str(review_id)
                    )
                ).first()
                
                if existing:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ—Ç–∑—ã–≤
                    existing.nm_id = nm_id
                    existing.text = review_data.get("text")
                    existing.rating = review_data.get("productValuation")  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: productValuation –≤–º–µ—Å—Ç–æ rating
                    existing.is_answered = review_data.get("answer") is not None  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Ç–≤–µ—Ç–∞
                    existing.created_date = self._parse_datetime(review_data.get("createdDate"))
                    existing.updated_date = self._parse_datetime(review_data.get("createdDate"))  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –Ω–µ—Ç updatedDate
                    
                    # –ù–æ–≤—ã–µ –ø–æ–ª—è –∏–∑ WB API –æ—Ç–∑—ã–≤–æ–≤
                    existing.pros = review_data.get("pros")
                    existing.cons = review_data.get("cons")
                    existing.user_name = review_data.get("userName")
                    existing.color = review_data.get("color")
                    existing.bables = str(review_data.get("bables", [])) if review_data.get("bables") else None
                    existing.matching_size = review_data.get("matchingSize")
                    existing.was_viewed = review_data.get("wasViewed")
                    existing.supplier_feedback_valuation = review_data.get("supplierFeedbackValuation")
                    existing.supplier_product_valuation = review_data.get("supplierProductValuation")
                    
                    existing.updated_at = datetime.now(timezone.utc)
                    updated += 1
                else:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ—Ç–∑—ã–≤
                    review = WBReview(
                        cabinet_id=cabinet.id,
                        nm_id=nm_id,
                        review_id=str(review_id),
                        text=review_data.get("text"),
                        rating=review_data.get("productValuation"),  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: productValuation –≤–º–µ—Å—Ç–æ rating
                        is_answered=review_data.get("answer") is not None,  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Ç–≤–µ—Ç–∞
                        created_date=self._parse_datetime(review_data.get("createdDate")),
                        updated_date=self._parse_datetime(review_data.get("createdDate")),  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –Ω–µ—Ç updatedDate
                        
                        # –ù–æ–≤—ã–µ –ø–æ–ª—è –∏–∑ WB API –æ—Ç–∑—ã–≤–æ–≤
                        pros=review_data.get("pros"),
                        cons=review_data.get("cons"),
                        user_name=review_data.get("userName"),
                        color=review_data.get("color"),
                        bables=str(review_data.get("bables", [])) if review_data.get("bables") else None,
                        matching_size=review_data.get("matchingSize"),
                        was_viewed=review_data.get("wasViewed"),
                        supplier_feedback_valuation=review_data.get("supplierFeedbackValuation"),
                        supplier_product_valuation=review_data.get("supplierProductValuation")
                    )
                    self.db.add(review)
                    created += 1
            
            self.db.commit()
            
            return {
                "status": "success",
                "records_processed": len(reviews_data),
                "records_created": created,
                "records_updated": updated
            }
            
        except Exception as e:
            logger.error(f"Reviews sync failed: {str(e)}")
            return {"status": "error", "error_message": str(e)}

    def _parse_datetime(self, date_str: str) -> Optional[datetime]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏"""
        if not date_str:
            return None
        
        try:
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç
            for fmt in ["%Y-%m-%dT%H:%M:%S", "%Y-%m-%d %H:%M:%S", "%Y-%m-%d"]:
                try:
                    return datetime.strptime(date_str, fmt).replace(tzinfo=timezone.utc)
                except ValueError:
                    continue
            
            # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
            return None
            
        except Exception:
            return None

    async def get_sync_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            last_sync = self.db.query(WBSyncLog).order_by(
                WBSyncLog.started_at.desc()
            ).first()
            
            if not last_sync:
                return {
                    "status": "never_synced",
                    "message": "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª–∞—Å—å"
                }
            
            return {
                "status": last_sync.status,
                "sync_type": last_sync.sync_type,
                "started_at": last_sync.started_at.isoformat() if last_sync.started_at else None,
                "completed_at": last_sync.completed_at.isoformat() if last_sync.completed_at else None,
                "records_processed": last_sync.records_processed,
                "records_created": last_sync.records_created,
                "records_updated": last_sync.records_updated,
                "records_errors": last_sync.records_errors,
                "error_message": last_sync.error_message
            }
            
        except Exception as e:
            logger.error(f"Get sync status failed: {str(e)}")
            return {"status": "error", "error_message": str(e)}

    def _calculate_commission(self, category: str, subject: str, total_price: float, commissions_data) -> tuple[float, float]:
        """–†–∞—Å—á–µ—Ç –∫–æ–º–∏—Å—Å–∏–∏ –¥–ª—è –∑–∞–∫–∞–∑–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø—Ä–µ–¥–º–µ—Ç–∞"""
        try:
            if not category or not subject or not total_price or not commissions_data:
                # logger.warning(f"Missing data: category={category}, subject={subject}, total_price={total_price}, commissions_data={bool(commissions_data)}")
                return 0.0, 0.0
            
            # logger.info(f"Calculating commission for category='{category}', subject='{subject}', total_price={total_price}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ commissions_data - —ç—Ç–æ —Å–ø–∏—Å–æ–∫
            if not isinstance(commissions_data, list):
                logger.warning(f"Commissions data is not a list: {type(commissions_data)}")
                return 0.0, 0.0
            
            if len(commissions_data) == 0:
                logger.warning("Commissions data is empty")
                return 0.0, 0.0
            
            # logger.info(f"Searching through {len(commissions_data)} commission records")
            # logger.info(f"First commission record structure: {commissions_data[0] if commissions_data else 'No data'}")
            
            # –ò—â–µ–º –∫–æ–º–∏—Å—Å–∏—é –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø—Ä–µ–¥–º–µ—Ç—É (—Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)
            for i, commission in enumerate(commissions_data):
                if not isinstance(commission, dict):
                    logger.debug(f"Commission record {i} is not a dict: {type(commission)}")
                    continue
                    
                parent_name = commission.get("parentName")
                subject_name = commission.get("subjectName")
                kgvp_marketplace = commission.get("kgvpMarketplace")
                
                # logger.info(f"Commission {i}: parentName='{parent_name}', subjectName='{subject_name}', kgvpMarketplace={kgvp_marketplace}")
                
                # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                if (parent_name == category and subject_name == subject):
                    commission_percent = float(kgvp_marketplace) if kgvp_marketplace is not None else 0.0
                    commission_amount = (total_price * commission_percent) / 100
                    
                    # logger.info(f"Found exact match: {category}/{subject} -> {commission_percent}% = {commission_amount}‚ÇΩ")
                    return commission_percent, commission_amount
                
                # –ù–µ—á–µ—Ç–∫–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É (–µ—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–æ–≤–ø–∞–¥–∞—é—Ç)
                if (parent_name == category and subject_name and subject and 
                    (subject_name.lower() in subject.lower() or subject.lower() in subject_name.lower())):
                    commission_percent = float(kgvp_marketplace) if kgvp_marketplace is not None else 0.0
                    commission_amount = (total_price * commission_percent) / 100
                    
                    # logger.info(f"Found fuzzy match: {category}/{subject} ~ {parent_name}/{subject_name} -> {commission_percent}% = {commission_amount}‚ÇΩ")
                    return commission_percent, commission_amount
            
            # –ï—Å–ª–∏ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–µ—Ç, –∏—â–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            # logger.info(f"No exact match found, searching by category: {category}")
            for i, commission in enumerate(commissions_data):
                if not isinstance(commission, dict):
                    continue
                
                parent_name = commission.get("parentName")
                kgvp_marketplace = commission.get("kgvpMarketplace")
                
                # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                if parent_name == category:
                    commission_percent = float(kgvp_marketplace) if kgvp_marketplace is not None else 0.0
                    commission_amount = (total_price * commission_percent) / 100
                    
                    # logger.info(f"Found exact category match: {category} -> {commission_percent}% = {commission_amount}‚ÇΩ")
                    return commission_percent, commission_amount
                
                # –ù–µ—á–µ—Ç–∫–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                if (parent_name and category and 
                    (parent_name.lower() in category.lower() or category.lower() in parent_name.lower())):
                    commission_percent = float(kgvp_marketplace) if kgvp_marketplace is not None else 0.0
                    commission_amount = (total_price * commission_percent) / 100
                    
                    # logger.info(f"Found fuzzy category match: {category} ~ {parent_name} -> {commission_percent}% = {commission_amount}‚ÇΩ")
                    return commission_percent, commission_amount
            
            # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –∫–æ–º–∏—Å—Å–∏—é 20%

            commission_percent = 20.0
            commission_amount = (total_price * commission_percent) / 100
            return commission_percent, commission_amount
            
        except Exception as e:
            logger.error(f"Commission calculation failed: {e}")
            return 0.0, 0.0
    
    def _calculate_logistics(self, warehouse_from: str, warehouse_to: str, total_price: float) -> float:
        """–†–∞—Å—á–µ—Ç –ª–æ–≥–∏—Å—Ç–∏–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∫–ª–∞–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ —Ä–µ–≥–∏–æ–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∏"""
        try:
            if not warehouse_from or not warehouse_to or not total_price:
                return 0.0
            
            # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç –ª–æ–≥–∏—Å—Ç–∏–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –∏ —Ü–µ–Ω—ã
            # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–∞—Ä–∏—Ñ—ã WB API
            
            # –ë–∞–∑–æ–≤—ã–µ —Ç–∞—Ä–∏—Ñ—ã –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º (–ø—Ä–∏–º–µ—Ä–Ω—ã–µ)
            region_tariffs = {
                "–ú–æ—Å–∫–≤–∞": 0.0,  # –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –≤ –ú–æ—Å–∫–≤—É
                "–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å": 50.0,
                "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥": 100.0,
                "–õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å": 150.0,
                "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥": 200.0,
                "–°–µ–≤–µ—Ä–æ-–ó–∞–ø–∞–¥–Ω—ã–π —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥": 250.0,
                "–Æ–∂–Ω—ã–π —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥": 300.0,
                "–ü—Ä–∏–≤–æ–ª–∂—Å–∫–∏–π —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥": 350.0,
                "–£—Ä–∞–ª—å—Å–∫–∏–π —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥": 400.0,
                "–°–∏–±–∏—Ä—Å–∫–∏–π —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥": 500.0,
                "–î–∞–ª—å–Ω–µ–≤–æ—Å—Ç–æ—á–Ω—ã–π —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥": 600.0,
            }
            
            # –ò—â–µ–º —Ç–∞—Ä–∏—Ñ –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞
            for region, tariff in region_tariffs.items():
                if region in warehouse_to:
                    return tariff
            
            # –ï—Å–ª–∏ —Ä–µ–≥–∏–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ä–µ–¥–Ω–∏–π —Ç–∞—Ä–∏—Ñ
            return 300.0
            
        except Exception as e:
            logger.error(f"Logistics calculation failed: {e}")
            return 0.0

    async def update_product_prices_from_stocks(self, cabinet: WBCabinet) -> Dict[str, Any]:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –æ—Å—Ç–∞—Ç–∫–æ–≤"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Å—Ç–∞—Ç–∫–∏ –¥–ª—è –∫–∞–±–∏–Ω–µ—Ç–∞
            stocks = self.db.query(WBStock).filter(
                WBStock.cabinet_id == cabinet.id
            ).all()
            
            updated_count = 0
            
            for stock in stocks:
                if stock.price is not None:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞
                    product = self.db.query(WBProduct).filter(
                        and_(
                            WBProduct.cabinet_id == cabinet.id,
                            WBProduct.nm_id == stock.nm_id
                        )
                    ).first()
                    
                    if product:
                        product.price = stock.price
                        product.discount_price = stock.discount if stock.discount else None
                        updated_count += 1
            
            self.db.commit()
            
            return {
                "status": "success",
                "updated_products": updated_count
            }
            
        except Exception as e:
            logger.error(f"Failed to update product prices: {e}")
            return {"status": "error", "error_message": str(e)}

    async def update_product_ratings_from_reviews(self, cabinet: WBCabinet) -> Dict[str, Any]:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –æ—Ç–∑—ã–≤–æ–≤"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–∑—ã–≤—ã –¥–ª—è –∫–∞–±–∏–Ω–µ—Ç–∞
            reviews = self.db.query(WBReview).filter(
                WBReview.cabinet_id == cabinet.id
            ).all()
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ—Ç–∑—ã–≤—ã –ø–æ —Ç–æ–≤–∞—Ä–∞–º
            product_reviews = {}
            for review in reviews:
                if review.nm_id and review.rating:
                    if review.nm_id not in product_reviews:
                        product_reviews[review.nm_id] = []
                    product_reviews[review.nm_id].append(review.rating)
            
            updated_count = 0
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥–∏ —Ç–æ–≤–∞—Ä–æ–≤
            for nm_id, ratings in product_reviews.items():
                if ratings:
                    avg_rating = sum(ratings) / len(ratings)
                    
                    product = self.db.query(WBProduct).filter(
                        and_(
                            WBProduct.cabinet_id == cabinet.id,
                            WBProduct.nm_id == nm_id
                        )
                    ).first()
                    
                    if product:
                        product.rating = round(avg_rating, 1)
                        product.reviews_count = len(ratings)
                        updated_count += 1
            
            self.db.commit()
            
            return {
                "status": "success",
                "updated_products": updated_count
            }
            
        except Exception as e:
            logger.error(f"Failed to update product ratings: {e}")
            return {"status": "error", "error_message": str(e)}

    async def _send_new_order_notification(self, cabinet: WBCabinet, order_data: Dict[str, Any], order: WBOrder):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ"""
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º WebhookSender –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
            from app.features.bot_api.webhook import WebhookSender
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–±–∏–Ω–µ—Ç–∞
            user = self.db.query(User).filter(User.id == cabinet.user_id).first()
            if not user:
                logger.warning(f"User not found for cabinet {cabinet.id}")
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            today_stats = await self._get_today_stats(cabinet)
            stocks = await self._get_order_stocks(cabinet, order.nm_id)
            
            notification_data = {
                "order_id": order.order_id,
                "date": order.order_date.isoformat() if order.order_date else datetime.now(timezone.utc).isoformat(),
                "amount": float(order.total_price or 0),
                "product_name": order.name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
                "brand": order.brand or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
                "warehouse_from": order.warehouse_from or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
                "warehouse_to": order.warehouse_to or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
                "today_stats": today_stats,
                "stocks": stocks
            }
            
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –≤ –±–æ—Ç–∞
            logger.info(f"üì§ WEBHOOK DATA for user {user.telegram_id}:")
            logger.info(f"   Order ID: {notification_data['order_id']}")
            logger.info(f"   Amount: {notification_data['amount']}‚ÇΩ")
            logger.info(f"   Product: {notification_data['product_name']}")
            logger.info(f"   Brand: {notification_data['brand']}")
            logger.info(f"   Route: {notification_data['warehouse_from']} ‚Üí {notification_data['warehouse_to']}")
            logger.info(f"   Today stats: {today_stats}")
            logger.info(f"   Stocks: {stocks}")
            logger.info(f"   Telegram ID: {user.telegram_id}")
            logger.info(f"   Cabinet ID: {cabinet.id}")
            
            # URL –±–æ—Ç–∞ –¥–ª—è webhook
            bot_webhook_url = f"http://bot-webhook:8001/webhook/notifications"
            
            # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä WebhookSender
            webhook_sender = WebhookSender()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            result = await webhook_sender.send_new_order_notification(
                telegram_id=user.telegram_id,
                order_data=notification_data,
                bot_webhook_url=bot_webhook_url
            )
            
            if result.get("success"):
                logger.info(f"‚úÖ WEBHOOK SUCCESS: Order {order.order_id} notification sent to user {user.telegram_id}")
                logger.info(f"   Attempts: {result.get('attempts', 'N/A')}")
                logger.info(f"   Status: {result.get('status', 'N/A')}")
            else:
                logger.error(f"‚ùå WEBHOOK FAILED: Order {order.order_id} notification failed for user {user.telegram_id}")
                logger.error(f"   Error: {result.get('error', 'Unknown error')}")
                logger.error(f"   Attempts: {result.get('attempts', 'N/A')}")
                logger.error(f"   Status: {result.get('status', 'N/A')}")
                
        except Exception as e:
            logger.error(f"Error sending new order notification: {e}")

    async def _get_today_stats(self, cabinet: WBCabinet) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
        try:
            today = datetime.now(timezone.utc).date()
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–∫–∞–∑—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            orders_today = self.db.query(WBOrder).filter(
                and_(
                    WBOrder.cabinet_id == cabinet.id,
                    func.date(WBOrder.order_date) == today
                )
            ).all()
            
            count = len(orders_today)
            amount = sum(float(order.total_price or 0) for order in orders_today)
            
            return {
                "count": count,
                "amount": amount
            }
        except Exception as e:
            logger.error(f"Error getting today stats: {e}")
            return {"count": 0, "amount": 0}

    async def _get_order_stocks(self, cabinet: WBCabinet, nm_id: int) -> Dict[str, int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ –ø–æ —Ç–æ–≤–∞—Ä—É"""
        try:
            stocks = self.db.query(WBStock).filter(
                and_(
                    WBStock.cabinet_id == cabinet.id,
                    WBStock.nm_id == nm_id
                )
            ).all()
            
            stocks_dict = {}
            for stock in stocks:
                size = stock.size or "Unknown"
                quantity = stock.quantity or 0
                stocks_dict[size] = quantity
                
            return stocks_dict
        except Exception as e:
            logger.error(f"Error getting order stocks: {e}")
            return {}

    async def _should_send_notification(self, cabinet: WBCabinet) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–Ω–µ –ø–µ—Ä–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è)"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ —É–∂–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ä–∞–Ω–µ–µ
            # –ï—Å–ª–∏ last_sync_at –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –æ—á–µ–Ω—å —Å—Ç–∞—Ä—ã–π, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –ø–µ—Ä–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
            if not cabinet.last_sync_at:
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
            # –ï—Å–ª–∏ –Ω–µ—Ç, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –ø–µ—Ä–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ –¥–æ–ª–≥–æ–≥–æ –ø–µ—Ä–µ—Ä—ã–≤–∞
            from datetime import datetime, timezone, timedelta
            now = datetime.now(timezone.utc)
            time_diff = now - cabinet.last_sync_at
            
            if time_diff > timedelta(hours=24):
                return False
            
            # –ï—Å–ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –±—ã–ª–∞ –Ω–µ–¥–∞–≤–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            return True
            
        except Exception as e:
            logger.error(f"Error checking notification eligibility: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            return False