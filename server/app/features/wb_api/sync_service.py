import asyncio
import logging
from datetime import datetime, timezone, timedelta
from typing import Dict, List, Any, Optional
from sqlalchemy.orm import Session
from sqlalchemy import and_, or_, func

from .models import WBCabinet, WBProduct, WBOrder, WBStock, WBReview, WBSyncLog
from .models_cabinet_users import CabinetUser
from .client import WBAPIClient
from .cache_manager import WBCacheManager
from .cabinet_manager import CabinetManager
from app.features.user.models import User
from app.utils.timezone import TimezoneUtils

logger = logging.getLogger(__name__)


class WBSyncService:
    """
    –°–µ—Ä–≤–∏—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å Wildberries API
    """
    
    def __init__(self, db: Session, cache_manager: WBCacheManager = None):
        self.db = db
        self.cache_manager = cache_manager or WBCacheManager(db)
        self.cabinet_manager = CabinetManager(db)
    
    async def sync_all_data(self, cabinet: WBCabinet) -> Dict[str, Any]:
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –∫–∞–±–∏–Ω–µ—Ç–∞ —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ NotificationService
            from app.features.notifications.notification_service import NotificationService
            notification_service = NotificationService(self.db)
            
            async with notification_service._get_sync_lock(cabinet.id):
                logger.info(f"üîí –ü–æ–ª—É—á–µ–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è –∫–∞–±–∏–Ω–µ—Ç–∞ {cabinet.id}")
                return await self._perform_sync_with_lock(cabinet)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–∞–±–∏–Ω–µ—Ç–∞ {cabinet.id}: {e}")
            return {"status": "error", "error": str(e)}
    
    async def _perform_sync_with_lock(self, cabinet: WBCabinet) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π"""
        try:
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º API –∫–ª—é—á –ø–µ—Ä–µ–¥ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π
            logger.info(f"Validating API key for cabinet {cabinet.id} before sync")
            validation_result = await self.cabinet_manager.validate_and_cleanup_cabinet(cabinet, max_retries=3)
            
            if not validation_result.get("valid", False):
                if validation_result.get("cabinet_removed", False):
                    logger.warning(f"Cabinet {cabinet.id} was removed due to invalid API key")
                    return {
                        "status": "error",
                        "message": "Cabinet removed due to invalid API key",
                        "cabinet_removed": True,
                        "validation_result": validation_result
                    }
                else:
                    logger.error(f"API validation failed for cabinet {cabinet.id}: {validation_result}")
                    return {
                        "status": "error",
                        "message": "API validation failed",
                        "validation_result": validation_result
                    }
            
            logger.info(f"API key validation successful for cabinet {cabinet.id}")
            
            # –ö–†–ò–¢–ò–ß–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –î–û –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–π
            if not cabinet.last_sync_at:
                # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è, –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                previous_sync_at = None
                logger.info(f"üìÖ First sync detected for cabinet {cabinet.id} - NO notifications will be sent")
            else:
                previous_sync_at = cabinet.last_sync_at
                logger.info(f"üìÖ Previous sync time for cabinet {cabinet.id}: {previous_sync_at}")
            
            # –°–æ–∑–¥–∞–µ–º –ª–æ–≥ –Ω–∞—á–∞–ª–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            sync_log = WBSyncLog(
                cabinet_id=cabinet.id,
                sync_type="full",
                status="started",
                started_at=TimezoneUtils.now_msk()
            )
            self.db.add(sync_log)
            self.db.flush()  # –ü–æ–ª—É—á–∞–µ–º ID –ª–æ–≥–∞
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–æ–¥–∏–Ω —Ä–∞–∑ –≤ –Ω–∞—á–∞–ª–µ)
            should_notify = await self._should_send_notification(cabinet)
            if should_notify:
                logger.info(f"üì¢ Notifications ENABLED for cabinet {cabinet.id}")
            else:
                logger.info(f"üîá Notifications DISABLED for cabinet {cabinet.id} (first sync or long break)")
            
            client = WBAPIClient(cabinet)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            import os
            sync_days = int(os.getenv("SYNC_DAYS"))
            now_msk = TimezoneUtils.now_msk()
            date_to = now_msk.strftime("%Y-%m-%d")
            date_from = (now_msk - timedelta(days=sync_days)).strftime("%Y-%m-%d")
            
            results = {}
            
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
            logger.info(f"Starting sync_all_data for cabinet {cabinet.id}, period: {sync_days} days ({date_from} to {date_to})")
            sync_tasks = [
                ("products", self.sync_products(cabinet, client)),
                ("orders", self.sync_orders(cabinet, client, date_from, date_to, should_notify)),
                ("stocks", self.sync_stocks(cabinet, client, date_from, date_to, should_notify)),
                ("reviews", self.sync_reviews(cabinet, client, date_from, date_to)),
                ("sales", self.sync_sales(cabinet, client, date_from, date_to, should_notify)),
                ("claims", self.sync_claims(cabinet, client, should_notify))
            ]
            
            for task_name, task in sync_tasks:
                try:
                    result = await task
                    results[task_name] = result
                    logger.info(f"Sync {task_name} completed: {result.get('status', 'unknown')}")
                except Exception as e:
                    logger.error(f"Sync {task_name} failed: {e}")
                    results[task_name] = {"status": "error", "error": str(e)}
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –æ—Å—Ç–∞—Ç–∫–æ–≤
            try:
                price_result = await self.update_product_prices_from_stocks(cabinet)
                results["product_prices"] = price_result
                logger.info(f"Product prices updated: {price_result.get('updated_products', 0)} products")
            except Exception as e:
                logger.error(f"Failed to update product prices: {e}")
                results["product_prices"] = {"status": "error", "error": str(e)}
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –æ—Ç–∑—ã–≤–æ–≤
            try:
                rating_result = await self.update_product_ratings_from_reviews(cabinet)
                results["product_ratings"] = rating_result
                logger.info(f"Product ratings updated: {rating_result.get('updated_products', 0)} products")
            except Exception as e:
                logger.error(f"Failed to update product ratings: {e}")
                results["product_ratings"] = {"status": "error", "error": str(e)}
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è, –ø–æ—Ç–æ–º –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö –î–û –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è last_sync_at
            await self._send_sync_completion_notification(cabinet.id, previous_sync_at)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ü–û–°–õ–ï –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π
            cabinet.last_sync_at = TimezoneUtils.now_msk()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–≥ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            sync_log.status = "completed"
            sync_log.completed_at = TimezoneUtils.now_msk()
            
            self.db.commit()
            logger.info(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–±–∏–Ω–µ—Ç–∞ {cabinet.id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {results}")
            
            # –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            await self._invalidate_user_cache(cabinet.id)
            
            # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞
            if not cabinet.last_sync_at:
                logger.info(f"–ü–ª–∞–Ω–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –¥–ª—è –∫–∞–±–∏–Ω–µ—Ç–∞ {cabinet.id}")
                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
                from app.features.sync.tasks import schedule_cabinet_sync
                schedule_cabinet_sync(cabinet.id)
            
            return {
                "status": "success",
                "results": results,
                "sync_time": cabinet.last_sync_at.isoformat()
            }
            
        except Exception as e:
            logger.error(f"Sync all data failed: {str(e)}")
            # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–≥ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            try:
                if 'sync_log' in locals():
                    sync_log.status = "error"
                    sync_log.completed_at = TimezoneUtils.now_msk()
                    sync_log.error_message = str(e)
                
                # –î–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã—Ö "–ø–µ—Ä–≤—ã—Ö —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–π"
                cabinet.last_sync_at = TimezoneUtils.now_msk()
                self.db.commit()
                logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä–µ–º—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–∞–±–∏–Ω–µ—Ç–∞ {cabinet.id} –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –æ—à–∏–±–∫—É")
            except Exception as commit_error:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å last_sync_at: {commit_error}")
            return {"status": "error", "error_message": str(e)}
    
    async def _invalidate_user_cache(self, cabinet_id: int):
        """–ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫—ç—à–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–∞–±–∏–Ω–µ—Ç–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–∞–±–∏–Ω–µ—Ç–∞
            from app.features.wb_api.crud_cabinet_users import CabinetUserCRUD
            cabinet_user_crud = CabinetUserCRUD()
            user_ids = cabinet_user_crud.get_cabinet_users(self.db, cabinet_id)
            
            # –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            for user_id in user_ids:
                cache_patterns = [
                    f"orders:*:{user_id}:*",
                    f"dashboard:{user_id}",
                    f"analytics:{user_id}:*",
                    f"stocks:{user_id}:*"
                ]
                
                for pattern in cache_patterns:
                    try:
                        if hasattr(self.cache_manager, 'delete_pattern'):
                            await self.cache_manager.delete_pattern(pattern)
                            logger.info(f"üóëÔ∏è Invalidated cache pattern: {pattern}")
                        else:
                            logger.warning(f"Cache manager doesn't support delete_pattern, skipping: {pattern}")
                    except Exception as cache_error:
                        logger.warning(f"Cache invalidation error for pattern {pattern}: {cache_error}")
                    
        except Exception as e:
            logger.error(f"Error invalidating cache for cabinet {cabinet_id}: {e}")
    
    async def _send_sync_completion_notification(self, cabinet_id: int, previous_sync_at: datetime = None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        
        Args:
            cabinet_id: ID –∫–∞–±–∏–Ω–µ—Ç–∞
            previous_sync_at: –í—Ä–µ–º—è –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (–î–û —Ç–µ–∫—É—â–µ–π)
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–∞–±–∏–Ω–µ—Ç–∞
            from app.features.wb_api.crud_cabinet_users import CabinetUserCRUD
            cabinet_user_crud = CabinetUserCRUD()
            user_ids = cabinet_user_crud.get_cabinet_users(self.db, cabinet_id)
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º NotificationService –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            from app.features.notifications.notification_service import NotificationService
            notification_service = NotificationService(self.db)
            
            # –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            for user_id in user_ids:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –ª–∏ –ø–µ—Ä–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                cabinet_user = self.db.query(CabinetUser).filter(
                    CabinetUser.cabinet_id == cabinet_id,
                    CabinetUser.user_id == user_id
                ).first()
                
                is_first_sync = not cabinet_user.first_sync_completed if cabinet_user else True
                
                notification_data = {
                    "type": "sync_completed",
                    "cabinet_id": cabinet_id,
                    "message": "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –î–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.",
                    "timestamp": TimezoneUtils.now_msk().isoformat(),
                    "is_first_sync": is_first_sync
                }
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ NotificationService
                try:
                    webhook_result = await notification_service.send_sync_completion_notification(
                        user_id=user_id,
                        cabinet_id=cabinet_id,
                        is_first_sync=is_first_sync
                    )
                    logger.info(f"üì¢ Webhook notification sent for user {user_id}: {webhook_result}")
                except Exception as e:
                    logger.error(f"‚ùå Failed to send webhook notification for user {user_id}: {e}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
                from app.features.notifications.models import NotificationHistory
                import json
                import uuid
                
                notification = NotificationHistory(
                    id=f"sync_completed_{uuid.uuid4().hex[:8]}",
                    user_id=user_id,
                    notification_type="sync_completed",
                    priority="HIGH",
                    title="–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
                    content=json.dumps(notification_data),
                    sent_at=TimezoneUtils.to_utc(TimezoneUtils.now_msk()),
                    status="delivered"
                )
                
                self.db.add(notification)
                logger.info(f"üì¢ Sync completion notification created for user {user_id}")
                
                # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥
                if is_first_sync and cabinet_user:
                    cabinet_user.first_sync_completed = True
                    # –ù–ï –ö–û–ú–ú–ò–¢–ò–ú –ó–î–ï–°–¨ - –±—É–¥–µ—Ç –æ–±—â–∏–π –∫–æ–º–º–∏—Ç –≤ –∫–æ–Ω—Ü–µ
                    logger.info(f"üèÅ First sync completed for user {user_id} in cabinet {cabinet_id}")
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö (–ü–†–û–°–¢–ê–Ø –õ–û–ì–ò–ö–ê)
                if previous_sync_at:
                    try:
                        logger.info(f"üîç [Simple] Processing sync events for user {user_id} with previous_sync_at={previous_sync_at}")
                        
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é –ª–æ–≥–∏–∫—É (–∫–∞–∫ –≤ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏)
                        events_result = await notification_service.process_sync_events_simple(
                            user_id=user_id,
                            cabinet_id=cabinet_id,
                            last_sync_at=previous_sync_at
                        )
                        
                        # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
                        events_summary = {
                            "status": events_result.get("status", "unknown"),
                            "notifications_sent": events_result.get("notifications_sent", 0),
                            "events_processed": len(events_result.get("events", [])) if isinstance(events_result.get("events"), list) else 0
                        }
                        logger.info(f"üì¢ [Simple] Processed sync events for user {user_id}: {events_summary}")
                        
                    except Exception as e:
                        logger.error(f"‚ùå [Simple] Failed to process sync events for user {user_id}: {e}")
            
            # –£–ë–ò–†–ê–ï–ú –î–í–û–ô–ù–û–ô –ö–û–ú–ú–ò–¢ - –∫–æ–º–º–∏—Ç –±—É–¥–µ—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
            
        except Exception as e:
            logger.error(f"Error sending sync completion notification for cabinet {cabinet_id}: {e}")

    async def sync_products(
        self, 
        cabinet: WBCabinet, 
        client: WBAPIClient
    ) -> Dict[str, Any]:
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            cache_key = f"products_{cabinet.id}"
            cached_data = await self.cache_manager.get_products_cache(cabinet.id)
            
            if cached_data:
                return {
                    "status": "success",
                    "records_processed": cached_data.get("total", 0),
                    "records_created": 0,
                    "records_updated": 0,
                    "cached": True
                }
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ API
            products_data = await client.get_products()
            
            if not products_data:
                return {"status": "error", "error_message": "No products data received"}
            
            logger.info(f"Fetched {len(products_data)} products from WB API")
            
            created = 0
            updated = 0
            
            # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–µ—Ä–≤–æ–π —Ñ–æ—Ç–æ-—Å—Å—ã–ª–∫–∏
            def extract_first_photo_url(card: dict) -> str:
                photos = card.get("photos") or []
                if isinstance(photos, list) and photos:
                    first = photos[0]
                    return (
                        first.get("c516x688")
                        or first.get("c246x328")
                        or first.get("big")
                        or first.get("square")
                        or first.get("tm")
                    )
                return None

            for product_data in products_data:
                nm_id = product_data.get("nmID")  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: nmID –≤–º–µ—Å—Ç–æ nmId
                if not nm_id:
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–≤–∞—Ä
                existing = self.db.query(WBProduct).filter(
                    and_(
                        WBProduct.cabinet_id == cabinet.id,
                        WBProduct.nm_id == nm_id
                    )
                ).first()
                
                photo_url = extract_first_photo_url(product_data)

                if existing:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–≤–∞—Ä
                    existing.name = product_data.get("title")  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: title –≤–º–µ—Å—Ç–æ name
                    existing.vendor_code = product_data.get("vendorCode")
                    existing.brand = product_data.get("brand")
                    existing.category = product_data.get("subjectName")  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: subjectName –≤–º–µ—Å—Ç–æ category
                    if photo_url:
                        existing.image_url = photo_url
                    # –¶–µ–Ω—ã –∏ —Ä–µ–π—Ç–∏–Ω–≥–∏ –ø–æ–ª—É—á–∞–µ–º –∏–∑ –¥—Ä—É–≥–∏—Ö API (–æ—Å—Ç–∞—Ç–∫–∏, –æ—Ç–∑—ã–≤—ã)
                    # existing.price = product_data.get("price")  # –ù–ï–¢ –≤ API —Ç–æ–≤–∞—Ä–æ–≤
                    # existing.discount_price = product_data.get("discountPrice")  # –ù–ï–¢ –≤ API —Ç–æ–≤–∞—Ä–æ–≤
                    # existing.rating = product_data.get("rating")  # –ù–ï–¢ –≤ API —Ç–æ–≤–∞—Ä–æ–≤
                    # existing.reviews_count = product_data.get("reviewsCount")  # –ù–ï–¢ –≤ API —Ç–æ–≤–∞—Ä–æ–≤
                    existing.in_stock = product_data.get("inStock", True)
                    existing.is_active = product_data.get("isActive", True)
                    existing.updated_at = TimezoneUtils.now_msk()
                    updated += 1
                else:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä
                    product = WBProduct(
                        cabinet_id=cabinet.id,
                        nm_id=nm_id,
                        name=product_data.get("title"),  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: title –≤–º–µ—Å—Ç–æ name
                        vendor_code=product_data.get("vendorCode"),
                        brand=product_data.get("brand"),
                        category=product_data.get("subjectName"),  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: subjectName –≤–º–µ—Å—Ç–æ category
                        image_url=photo_url,
                        # –¶–µ–Ω—ã –∏ —Ä–µ–π—Ç–∏–Ω–≥–∏ –ø–æ–ª—É—á–∞–µ–º –∏–∑ –¥—Ä—É–≥–∏—Ö API (–æ—Å—Ç–∞—Ç–∫–∏, –æ—Ç–∑—ã–≤—ã)
                        # price=product_data.get("price"),  # –ù–ï–¢ –≤ API —Ç–æ–≤–∞—Ä–æ–≤
                        # discount_price=product_data.get("discountPrice"),  # –ù–ï–¢ –≤ API —Ç–æ–≤–∞—Ä–æ–≤
                        # rating=product_data.get("rating"),  # –ù–ï–¢ –≤ API —Ç–æ–≤–∞—Ä–æ–≤
                        # reviews_count=product_data.get("reviewsCount"),  # –ù–ï–¢ –≤ API —Ç–æ–≤–∞—Ä–æ–≤
                        in_stock=product_data.get("inStock", True),
                        is_active=product_data.get("isActive", True)
                    )
                    self.db.add(product)
                    created += 1
            
            self.db.commit()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            await self.cache_manager.set_products_cache(
                cabinet.id, 
                {"total": len(products_data), "products": products_data}
            )
            
            return {
                "status": "success",
                "records_processed": len(products_data),
                "records_created": created,
                "records_updated": updated
            }
            
        except Exception as e:
            logger.error(f"Products sync failed: {str(e)}")
            return {"status": "error", "error_message": str(e)}

    async def sync_orders(
        self, 
        cabinet: WBCabinet, 
        client: WBAPIClient, 
        date_from: str, 
        date_to: str,
        should_notify: bool = False
    ) -> Dict[str, Any]:
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–∫–∞–∑–æ–≤"""
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –≤—Å–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
            import asyncio
            return await asyncio.wait_for(
                self._sync_orders_internal(cabinet, client, date_from, date_to, should_notify),
                timeout=300  # 5 –º–∏–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º
            )
        except asyncio.TimeoutError:
            logger.error("Orders sync timeout after 5 minutes")
            return {"status": "error", "error_message": "Sync timeout"}
        except Exception as e:
            logger.error(f"Orders sync failed: {str(e)}")
            return {"status": "error", "error_message": str(e)}

    async def _sync_orders_internal(
        self, 
        cabinet: WBCabinet, 
        client: WBAPIClient, 
        date_from: str, 
        date_to: str,
        should_notify: bool = False
    ) -> Dict[str, Any]:
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–æ–≤"""
        try:
            logger.info(f"Starting orders sync for cabinet {cabinet.id}, dates: {date_from} to {date_to}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–∫–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä–æ–≤ –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–ª—è —ç—Ç–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞
            products_count = self.db.query(WBProduct).filter(WBProduct.cabinet_id == cabinet.id).count()
                # logger.info(f"Products in database for cabinet {cabinet.id}: {products_count}")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ API
            logger.info("Fetching orders from WB API...")
            orders_data = await client.get_orders(date_from, date_to)
            logger.info(f"Received {len(orders_data) if orders_data else 0} orders from API")
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∏—Å—Å–∏–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
            try:
                commissions_data = await client.get_commissions()
                # logger.info(f"Commissions data type: {type(commissions_data)}, length: {len(commissions_data) if isinstance(commissions_data, list) else 'N/A'}")
                # –ü–µ—á–∞—Ç–∞–µ–º –æ–±—Ä–∞–∑–µ—Ü –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (–±–µ–∑ —à—É–º–∞ –≤ –ª–æ–≥–∞—Ö)
                if isinstance(commissions_data, list) and commissions_data:
                    sample = commissions_data[0]
                    # try:
                    #     # –û–≥—Ä–∞–Ω–∏—á–∏–º –∫–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
                    #     sample_filtered = {k: sample.get(k) for k in list(sample.keys())[:10]}
                    #     logger.info(f"Commissions sample: {sample_filtered}")
                    # except Exception:
                    #     logger.info("Commissions sample: <unserializable>")
            except Exception as e:
                logger.error(f"Failed to get commissions: {e}")
                commissions_data = []
            
            if not orders_data:
                return {"status": "error", "error_message": "No orders data received"}
            
            created = 0
            updated = 0
            processed_order_ids = set()  # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ order_id –≤ —Ä–∞–º–∫–∞—Ö –æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            
            logger.info(f"Processing {len(orders_data)} orders from WB API")
            
            
            for i, order_data in enumerate(orders_data):
                try:
                    order_id = order_data.get("gNumber")
                    nm_id = order_data.get("nmId")
                    
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–∫–∞–∑—ã –±–µ–∑ order_id –∏–ª–∏ nm_id
                    if not order_id or not nm_id:
                        continue
                    
                    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∑–∞–∫–∞–∑–æ–≤ –±–µ–∑ nm_id –≤ –±–∞–∑–µ
                    if not nm_id:
                        logger.warning(f"Order {order_id} has no nm_id in WB API data")
                        continue
                    
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –≤ —Ä–∞–º–∫–∞—Ö –æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                    if order_id in processed_order_ids:
                        continue
                    processed_order_ids.add(order_id)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∑–∞–∫–∞–∑
                    existing = self.db.query(WBOrder).filter(
                        and_(
                            WBOrder.cabinet_id == cabinet.id,
                            WBOrder.order_id == str(order_id)
                        )
                    ).first()
                    
                    if existing:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ª–∏ –¥–∞–Ω–Ω—ã–µ
                        new_status = "canceled" if order_data.get("isCancel", False) else "active"
                        new_total_price = order_data.get("totalPrice")
                        new_article = order_data.get("supplierArticle")
                        new_name = order_data.get("subject")
                        new_brand = order_data.get("brand")
                        new_size = order_data.get("techSize")
                        new_price = order_data.get("finishedPrice")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –ø–æ–ª—è—Ö
                        status_changed = existing.status != new_status
                        price_changed = existing.total_price != new_total_price
                        article_changed = existing.article != new_article
                        name_changed = existing.name != new_name
                        brand_changed = existing.brand != new_brand
                        size_changed = existing.size != new_size
                        finished_price_changed = existing.price != new_price
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                        if status_changed or price_changed or article_changed or name_changed or brand_changed or size_changed or finished_price_changed:
                            changes = []
                            if status_changed:
                                changes.append(f"status {existing.status} -> {new_status}")
                            if price_changed:
                                changes.append(f"total_price {existing.total_price} -> {new_total_price}")
                            if article_changed:
                                changes.append(f"article {existing.article} -> {new_article}")
                            if name_changed:
                                changes.append(f"name {existing.name} -> {new_name}")
                            if brand_changed:
                                changes.append(f"brand {existing.brand} -> {new_brand}")
                            if size_changed:
                                changes.append(f"size {existing.size} -> {new_size}")
                            if finished_price_changed:
                                changes.append(f"price {existing.price} -> {new_price}")
                            
                            logger.info(f"Order {order_id} changed: {', '.join(changes)}")
                            
                            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω–∏–≤—à–∏–µ—Å—è –ø–æ–ª—è
                            if status_changed:
                                existing.status = new_status
                            if price_changed:
                                existing.total_price = new_total_price
                            if article_changed:
                                existing.article = new_article
                            if name_changed:
                                existing.name = new_name
                            if brand_changed:
                                existing.brand = new_brand
                            if size_changed:
                                existing.size = new_size
                            if finished_price_changed:
                                existing.price = new_price
                            
                            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
                            existing.nm_id = nm_id
                            existing.barcode = order_data.get("barcode")
                            existing.quantity = 1
                            existing.order_date = self._parse_datetime(order_data.get("date"))
                        else:
                            # –î–∞–Ω–Ω—ã–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                            continue
                        
                        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –ø—Ä–µ–¥–º–µ—Ç –∏–∑ —Ç–æ–≤–∞—Ä–∞ –ø–æ nmId
                        product = self.db.query(WBProduct).filter(
                            and_(
                                WBProduct.cabinet_id == cabinet.id,
                                WBProduct.nm_id == nm_id
                            )
                        ).first()
                        
                        if product:
                            existing.category = product.category  # subjectName –∏–∑ —Ç–æ–≤–∞—Ä–∞
                            existing.subject = product.name       # title –∏–∑ —Ç–æ–≤–∞—Ä–∞
                            # logger.info(f"Found product for nmId={nm_id}: category='{product.category}', subject='{product.name}'")
                        else:
                            # Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–∫–∞–∑–∞
                            existing.category = order_data.get("subject")  # subject –∏–∑ –∑–∞–∫–∞–∑–∞ –∫–∞–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è
                            existing.subject = order_data.get("subject")   # subject –∏–∑ –∑–∞–∫–∞–∑–∞ –∫–∞–∫ –ø—Ä–µ–¥–º–µ—Ç
                            # logger.info(f"Product not found for nmId={nm_id}, using order data: category='{existing.category}', subject='{existing.subject}'")
                        
                        total_price = order_data.get("totalPrice", 0)
                        # –í—ã–±–æ—Ä –ø–æ–ª—è –∫–æ–º–∏—Å—Å–∏–∏ —Å —É—á–µ—Ç–æ–º —Ä–µ–∂–∏–º–∞ –∑–∞–∫–∞–∑–∞
                        commission_field = self._select_commission_field(order_data)
                        commission_percent, commission_amount = self._calculate_commission(
                            existing.category, existing.subject, total_price, commissions_data, commission_field
                        )
                        existing.commission_percent = commission_percent
                        existing.commission_amount = commission_amount
                        
                        # –ù–æ–≤—ã–µ –ø–æ–ª—è –∏–∑ WB API
                        existing.warehouse_from = order_data.get("warehouseName")
                        existing.warehouse_to = order_data.get("regionName")
                        existing.spp_percent = order_data.get("spp")
                        existing.customer_price = order_data.get("finishedPrice")
                        existing.discount_percent = order_data.get("discountPercent")
                        
                        # –õ–æ–≥–∏—Å—Ç–∏–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
                        
                        # logger.info(f"Updated order {order_id}: commission_percent={commission_percent}, commission_amount={commission_amount}")
                        
                        existing.updated_at = TimezoneUtils.now_msk()
                        updated += 1
                    else:
                        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑
                        try:
                            # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –ø—Ä–µ–¥–º–µ—Ç –∏–∑ —Ç–æ–≤–∞—Ä–∞ –ø–æ nmId
                            product = self.db.query(WBProduct).filter(
                                and_(
                                    WBProduct.cabinet_id == cabinet.id,
                                    WBProduct.nm_id == nm_id
                                )
                            ).first()
                            
                            if product:
                                category = product.category  # subjectName –∏–∑ —Ç–æ–≤–∞—Ä–∞
                                subject = product.name       # title –∏–∑ —Ç–æ–≤–∞—Ä–∞
                                # logger.info(f"Found product for nmId={nm_id}: category='{product.category}', subject='{product.name}'")
                            else:
                                # Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–∫–∞–∑–∞
                                category = order_data.get("subject")  # subject –∏–∑ –∑–∞–∫–∞–∑–∞ –∫–∞–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è
                                subject = order_data.get("subject")   # subject –∏–∑ –∑–∞–∫–∞–∑–∞ –∫–∞–∫ –ø—Ä–µ–¥–º–µ—Ç
                                # logger.info(f"Product not found for nmId={nm_id}, using order data: category='{category}', subject='{subject}'")
                            
                            total_price = order_data.get("totalPrice", 0)
                            commission_field = self._select_commission_field(order_data)
                            commission_percent, commission_amount = self._calculate_commission(
                                category, subject, total_price, commissions_data, commission_field
                            )
                            
                            
                            order = WBOrder(
                                cabinet_id=cabinet.id,
                                order_id=str(order_id),
                                nm_id=nm_id,
                                article=order_data.get("supplierArticle"),
                                name=order_data.get("subject"),  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: subject –≤–º–µ—Å—Ç–æ name
                                brand=order_data.get("brand"),
                                size=order_data.get("techSize"),  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: techSize –≤–º–µ—Å—Ç–æ size
                                barcode=order_data.get("barcode"),
                                # –ü–æ–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –∫–æ–º–∏—Å—Å–∏–∏
                                category=category,
                                subject=subject,
                                commission_percent=commission_percent,
                                commission_amount=commission_amount,
                                quantity=1,  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –≤—Å–µ–≥–¥–∞ 1, —Ç–∞–∫ –∫–∞–∫ –Ω–µ—Ç –ø–æ–ª—è quantity
                                price=order_data.get("finishedPrice"),  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: finishedPrice –≤–º–µ—Å—Ç–æ price
                                total_price=order_data.get("totalPrice"),
                                # –ù–æ–≤—ã–µ –ø–æ–ª—è –∏–∑ WB API
                                warehouse_from=order_data.get("warehouseName"),
                                warehouse_to=order_data.get("regionName"),
                                spp_percent=order_data.get("spp"),
                                customer_price=order_data.get("finishedPrice"),
                                discount_percent=order_data.get("discountPercent"),
                                # –õ–æ–≥–∏—Å—Ç–∏–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
                                status="canceled" if order_data.get("isCancel", False) else "active",  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –≤—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                                order_date=self._parse_datetime(order_data.get("date"))
                            )
                            
                            self.db.add(order)
                            
                            try:
                                self.db.flush()  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ–º –≤—Å—Ç–∞–≤–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
                                
                                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–∞—Ö –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                                # (—É–¥–∞–ª–µ–Ω –≤—ã–∑–æ–≤ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –º–µ—Ç–æ–¥–∞ _send_new_order_notification)
                                
                                # logger.info(f"Created order {order_id}: commission_percent={commission_percent}, commission_amount={commission_amount}")
                                created += 1
                            except Exception as flush_error:
                                # –ï—Å–ª–∏ –∑–∞–∫–∞–∑ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (race condition), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ–≥–æ
                                if "duplicate key" in str(flush_error).lower() or "unique constraint" in str(flush_error).lower() or "uniqueviolation" in str(flush_error).lower():
                                    logger.warning(f"Order {order_id} already exists, skipping: {flush_error}")
                                    self.db.rollback()  # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                                    continue
                                else:
                                    raise flush_error
                        except Exception as insert_error:
                            # –ï—Å–ª–∏ –∑–∞–∫–∞–∑ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (race condition), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ–≥–æ
                            if "duplicate key" in str(insert_error).lower() or "unique constraint" in str(insert_error).lower():
                                logger.warning(f"Order {order_id} already exists, skipping")
                                continue
                            else:
                                raise insert_error
                        
                except Exception as order_error:
                    logger.warning(f"Failed to process order {order_id}: {order_error}")
                    continue
            
            self.db.commit()
            
            return {
                "status": "success",
                "records_processed": len(orders_data),
                "records_created": created,
                "records_updated": updated
            }
            
        except Exception as e:
            logger.error(f"Orders sync failed: {str(e)}")
            # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
            try:
                self.db.rollback()
            except:
                pass
            return {"status": "error", "error_message": str(e)}

    async def sync_stocks(
        self, 
        cabinet: WBCabinet, 
        client: WBAPIClient, 
        date_from: str, 
        date_to: str,
        should_notify: bool = True
    ) -> Dict[str, Any]:
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ API
            stocks_data = await client.get_stocks(date_from, date_to)
            
            if not stocks_data:
                return {"status": "error", "error_message": "No stocks data received"}
            
            created = 0
            updated = 0
            
            for stock_data in stocks_data:
                nm_id = stock_data.get("nmId")
                warehouse_id = stock_data.get("warehouseId")
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏ –±–µ–∑ nm_id
                if not nm_id:
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫
                existing = self.db.query(WBStock).filter(
                    and_(
                        WBStock.cabinet_id == cabinet.id,
                        WBStock.nm_id == nm_id,
                        WBStock.warehouse_id == warehouse_id
                    )
                ).first()
                
                if existing:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ª–∏ –¥–∞–Ω–Ω—ã–µ
                    new_quantity = stock_data.get("quantity")
                    new_last_updated = self._parse_datetime(stock_data.get("lastChangeDate"))
                    new_article = stock_data.get("supplierArticle")
                    new_brand = stock_data.get("brand")
                    new_size = stock_data.get("techSize")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –ø–æ–ª—è—Ö
                    quantity_changed = existing.quantity != new_quantity
                    date_changed = existing.last_updated != new_last_updated
                    article_changed = existing.article != new_article
                    brand_changed = existing.brand != new_brand
                    size_changed = existing.size != new_size
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                    if quantity_changed or date_changed or article_changed or brand_changed or size_changed:
                        changes = []
                        if quantity_changed:
                            changes.append(f"quantity {existing.quantity} -> {new_quantity}")
                        if date_changed:
                            changes.append(f"date {existing.last_updated} -> {new_last_updated}")
                        if article_changed:
                            changes.append(f"article {existing.article} -> {new_article}")
                        if brand_changed:
                            changes.append(f"brand {existing.brand} -> {new_brand}")
                        if size_changed:
                            changes.append(f"size {existing.size} -> {new_size}")
                        
                        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –æ—Å—Ç–∞—Ç–∫–æ–≤ —É–±—Ä–∞–Ω–æ - —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —à—É–º–∞
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω–∏–≤—à–∏–µ—Å—è –ø–æ–ª—è
                        if quantity_changed:
                            existing.quantity = new_quantity
                        if date_changed:
                            existing.last_updated = new_last_updated
                        if article_changed:
                            existing.article = new_article
                        if brand_changed:
                            existing.brand = new_brand
                        if size_changed:
                            existing.size = new_size
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
                        existing.barcode = stock_data.get("barcode")
                        existing.in_way_to_client = stock_data.get("inWayToClient")
                        existing.in_way_from_client = stock_data.get("inWayFromClient")
                        existing.warehouse_name = stock_data.get("warehouseName")
                        
                        # –ù–æ–≤—ã–µ –ø–æ–ª—è –∏–∑ WB API
                        existing.category = stock_data.get("category")
                        existing.subject = stock_data.get("subject")
                        existing.price = stock_data.get("Price")
                        existing.discount = stock_data.get("Discount")
                        existing.quantity_full = stock_data.get("quantityFull")
                        existing.is_supply = stock_data.get("isSupply")
                        existing.is_realization = stock_data.get("isRealization")
                        existing.sc_code = stock_data.get("SCCode")
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º updated_at –¢–û–õ–¨–ö–û –ø—Ä–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
                        existing.updated_at = TimezoneUtils.now_msk()
                        updated += 1
                    else:
                        # –î–∞–Ω–Ω—ã–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                        continue
                else:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ—Å—Ç–∞—Ç–æ–∫
                    stock = WBStock(
                        cabinet_id=cabinet.id,
                        nm_id=nm_id,
                        article=stock_data.get("supplierArticle"),
                        name=stock_data.get("name"),  # –ù–ï–¢ –≤ API, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
                        brand=stock_data.get("brand"),
                        size=stock_data.get("techSize"),
                        barcode=stock_data.get("barcode"),
                        quantity=stock_data.get("quantity"),
                        in_way_to_client=stock_data.get("inWayToClient"),
                        in_way_from_client=stock_data.get("inWayFromClient"),
                        warehouse_id=warehouse_id,
                        warehouse_name=stock_data.get("warehouseName"),
                        last_updated=self._parse_datetime(stock_data.get("lastChangeDate")),
                        # –ù–æ–≤—ã–µ –ø–æ–ª—è –∏–∑ WB API
                        category=stock_data.get("category"),
                        subject=stock_data.get("subject"),
                        price=stock_data.get("Price"),
                        discount=stock_data.get("Discount"),
                        quantity_full=stock_data.get("quantityFull"),
                        is_supply=stock_data.get("isSupply"),
                        is_realization=stock_data.get("isRealization"),
                        sc_code=stock_data.get("SCCode")
                    )
                    self.db.add(stock)
                    created += 1
            
            self.db.commit()
            
            return {
                "status": "success",
                "records_processed": len(stocks_data),
                "records_created": created,
                "records_updated": updated
            }
            
        except Exception as e:
            logger.error(f"Stocks sync failed: {str(e)}")
            return {"status": "error", "error_message": str(e)}

    async def sync_reviews(
        self, 
        cabinet: WBCabinet, 
        client: WBAPIClient, 
        date_from: str, 
        date_to: str
    ) -> Dict[str, Any]:
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ç–∑—ã–≤–æ–≤"""
        try:
            # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ç–∑—ã–≤–æ–≤ —Å batch –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
            all_reviews_data = []
            skip = 0
            take = 5000  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
            total_fetched = 0
            batch_size = 1000  # –†–∞–∑–º–µ—Ä batch –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –ë–î
            
            while True:
                reviews_response = await client.get_reviews(is_answered=True, take=take, skip=skip)
                
                if not reviews_response or "data" not in reviews_response:
                    break
                
                reviews_data = reviews_response["data"].get("feedbacks", [])
                if not reviews_data:
                    break
                
                all_reviews_data.extend(reviews_data)
                total_fetched += len(reviews_data)
                
                logger.info(f"Fetched {len(reviews_data)} reviews (skip={skip}, total={total_fetched})")
                
                # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –º–µ–Ω—å—à–µ —á–µ–º –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
                if len(reviews_data) < take:
                    break
                
                skip += take
                
                # Batch –æ–±—Ä–∞–±–æ—Ç–∫–∞: –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ë–î –∫–∞–∂–¥—ã–µ batch_size –æ—Ç–∑—ã–≤–æ–≤
                if len(all_reviews_data) >= batch_size:
                    await self._process_reviews_batch(cabinet, all_reviews_data[:batch_size])
                    all_reviews_data = all_reviews_data[batch_size:]
            
            logger.info(f"Total reviews fetched from WB API: {total_fetched}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –æ—Ç–∑—ã–≤—ã
            if all_reviews_data:
                await self._process_reviews_batch(cabinet, all_reviews_data)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ batch –æ–±—Ä–∞–±–æ—Ç–∫–∏
            total_created, total_updated = await self._get_reviews_batch_stats()
            
            return {
                "status": "success",
                "records_processed": total_fetched,
                "records_created": total_created,
                "records_updated": total_updated
            }
            
        except Exception as e:
            logger.error(f"Reviews sync failed: {str(e)}")
            return {"status": "error", "error_message": str(e)}
    
    async def _process_reviews_batch(self, cabinet: WBCabinet, reviews_data: List[Dict]) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ batch –æ—Ç–∑—ã–≤–æ–≤ —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∑–∞–ø–∏—Å—å—é –≤ –ë–î"""
        try:
            created = 0
            updated = 0
            
            for review_data in reviews_data:
                review_id = review_data.get("id")
                nm_id = review_data.get("productDetails", {}).get("nmId")
                
                if not review_id:
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ—Ç–∑—ã–≤
                existing = self.db.query(WBReview).filter(
                    and_(
                        WBReview.cabinet_id == cabinet.id,
                        WBReview.review_id == str(review_id)
                    )
                ).first()
                
                if existing:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ—Ç–∑—ã–≤
                    existing.nm_id = nm_id
                    existing.text = review_data.get("text")
                    existing.rating = review_data.get("productValuation")
                    existing.is_answered = review_data.get("answer") is not None
                    existing.created_date = self._parse_datetime(review_data.get("createdDate"))
                    existing.updated_date = self._parse_datetime(review_data.get("createdDate"))
                    
                    # –ù–æ–≤—ã–µ –ø–æ–ª—è –∏–∑ WB API –æ—Ç–∑—ã–≤–æ–≤
                    existing.pros = review_data.get("pros")
                    existing.cons = review_data.get("cons")
                    existing.user_name = review_data.get("userName")
                    existing.color = review_data.get("color")
                    existing.bables = str(review_data.get("bables", [])) if review_data.get("bables") else None
                    existing.matching_size = review_data.get("matchingSize")
                    existing.was_viewed = review_data.get("wasViewed")
                    existing.supplier_feedback_valuation = review_data.get("supplierFeedbackValuation")
                    existing.supplier_product_valuation = review_data.get("supplierProductValuation")
                    
                    existing.updated_at = TimezoneUtils.now_msk()
                    updated += 1
                else:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ—Ç–∑—ã–≤
                    review = WBReview(
                        cabinet_id=cabinet.id,
                        nm_id=nm_id,
                        review_id=str(review_id),
                        text=review_data.get("text"),
                        rating=review_data.get("productValuation"),
                        is_answered=review_data.get("answer") is not None,
                        created_date=self._parse_datetime(review_data.get("createdDate")),
                        updated_date=self._parse_datetime(review_data.get("createdDate")),
                        
                        # –ù–æ–≤—ã–µ –ø–æ–ª—è –∏–∑ WB API –æ—Ç–∑—ã–≤–æ–≤
                        pros=review_data.get("pros"),
                        cons=review_data.get("cons"),
                        user_name=review_data.get("userName"),
                        color=review_data.get("color"),
                        bables=str(review_data.get("bables", [])) if review_data.get("bables") else None,
                        matching_size=review_data.get("matchingSize"),
                        was_viewed=review_data.get("wasViewed"),
                        supplier_feedback_valuation=review_data.get("supplierFeedbackValuation"),
                        supplier_product_valuation=review_data.get("supplierProductValuation")
                    )
                    self.db.add(review)
                    created += 1
            
            # –ö–æ–º–º–∏—Ç–∏–º batch
            self.db.commit()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            if not hasattr(self, '_batch_stats'):
                self._batch_stats = {'created': 0, 'updated': 0}
            self._batch_stats['created'] += created
            self._batch_stats['updated'] += updated
            
            logger.info(f"Processed batch: {created} created, {updated} updated")
            
        except Exception as e:
            logger.error(f"Error processing reviews batch: {e}")
            self.db.rollback()
            raise e
    
    async def _get_reviews_batch_stats(self) -> tuple:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ batch –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        if hasattr(self, '_batch_stats'):
            stats = self._batch_stats
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self._batch_stats = {'created': 0, 'updated': 0}
            return stats['created'], stats['updated']
        return 0, 0
    
    async def _handle_duplicate_reviews(self, cabinet: WBCabinet, reviews_data: List[Dict]) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –æ—Ç–∑—ã–≤–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º UPSERT"""
        try:
            created = 0
            updated = 0
            
            for review_data in reviews_data:
                nm_id = review_data.get("nmId")
                review_id = review_data.get("id")
                
                if not review_id:
                    continue
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º merge –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
                from sqlalchemy.dialects.postgresql import insert
                
                review_dict = {
                    "cabinet_id": cabinet.id,
                    "nm_id": nm_id,
                    "review_id": str(review_id),
                    "text": review_data.get("text"),
                    "rating": review_data.get("productValuation"),
                    "is_answered": review_data.get("answer") is not None,
                    "created_date": self._parse_datetime(review_data.get("createdDate")),
                    "updated_date": self._parse_datetime(review_data.get("createdDate")),
                    "pros": review_data.get("pros"),
                    "cons": review_data.get("cons"),
                    "user_name": review_data.get("userName"),
                    "color": review_data.get("color"),
                    "bables": str(review_data.get("bables", [])) if review_data.get("bables") else None,
                    "matching_size": review_data.get("matchingSize"),
                    "was_viewed": review_data.get("wasViewed"),
                    "supplier_feedback_valuation": review_data.get("supplierFeedbackValuation"),
                    "supplier_product_valuation": review_data.get("supplierProductValuation"),
                    "updated_at": TimezoneUtils.now_msk()
                }
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º PostgreSQL UPSERT
                stmt = insert(WBReview).values(**review_dict)
                stmt = stmt.on_conflict_do_update(
                    index_elements=['cabinet_id', 'review_id'],
                    set_={
                        'nm_id': stmt.excluded.nm_id,
                        'text': stmt.excluded.text,
                        'rating': stmt.excluded.rating,
                        'is_answered': stmt.excluded.is_answered,
                        'created_date': stmt.excluded.created_date,
                        'updated_date': stmt.excluded.updated_date,
                        'pros': stmt.excluded.pros,
                        'cons': stmt.excluded.cons,
                        'user_name': stmt.excluded.user_name,
                        'color': stmt.excluded.color,
                        'bables': stmt.excluded.bables,
                        'matching_size': stmt.excluded.matching_size,
                        'was_viewed': stmt.excluded.was_viewed,
                        'supplier_feedback_valuation': stmt.excluded.supplier_feedback_valuation,
                        'supplier_product_valuation': stmt.excluded.supplier_product_valuation,
                        'updated_at': stmt.excluded.updated_at
                    }
                )
                
                self.db.execute(stmt)
                updated += 1
            
            self.db.commit()
            
            return {
                "status": "success",
                "records_processed": len(reviews_data),
                "records_created": 0,
                "records_updated": updated,
                "duplicate_handled": True
            }
            
        except Exception as e:
            logger.error(f"Error handling duplicate reviews: {e}")
            self.db.rollback()
            return {"status": "error", "error_message": str(e)}

    def _parse_datetime(self, date_str: str) -> Optional[datetime]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏ WB - –≤—Å—ë –ø–æ –ú–°–ö"""
        return TimezoneUtils.parse_wb_datetime(date_str)

    async def get_sync_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            last_sync = self.db.query(WBSyncLog).order_by(
                WBSyncLog.started_at.desc()
            ).first()
            
            if not last_sync:
                return {
                    "status": "never_synced",
                    "message": "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª–∞—Å—å"
                }
            
            return {
                "status": last_sync.status,
                "sync_type": last_sync.sync_type,
                "started_at": last_sync.started_at.isoformat() if last_sync.started_at else None,
                "completed_at": last_sync.completed_at.isoformat() if last_sync.completed_at else None,
                "records_processed": last_sync.records_processed,
                "records_created": last_sync.records_created,
                "records_updated": last_sync.records_updated,
                "records_errors": last_sync.records_errors,
                "error_message": last_sync.error_message
            }
            
        except Exception as e:
            logger.error(f"Get sync status failed: {str(e)}")
            return {"status": "error", "error_message": str(e)}

    def _select_commission_field(self, order_data: dict) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∫–∞–∫–æ–µ –ø–æ–ª–µ –∫–æ–º–∏—Å—Å–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, –∏—Å—Ö–æ–¥—è –∏–∑ —Ä–µ–∂–∏–º–∞ –∑–∞–∫–∞–∑–∞.
        –ü–æ—Ä—è–¥–æ–∫ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞: pickup -> booking -> supplierExpress -> supplier -> marketplace.
        –û–∂–∏–¥–∞–µ–º—ã–µ –∫–ª—é—á–∏ –≤ order_data (–ø–æ –Ω–∞–ª–∏—á–∏—é/–∏—Å—Ç–∏–Ω–µ): isPickup, isBooking, isSupplierExpress, isSupplier.
        """
        try:
            if order_data.get("isPickup"):
                return "kgvpPickup"
            if order_data.get("isBooking"):
                return "kgvpBooking"
            if order_data.get("isSupplierExpress"):
                return "kgvpSupplierExpress"
            if order_data.get("isSupplier"):
                return "kgvpSupplier"
        except Exception:
            pass
        return "kgvpMarketplace"

    def _calculate_commission(self, category: str, subject: str, total_price: float, commissions_data, commission_field: str = "kgvpMarketplace") -> tuple[float, float]:
        """–†–∞—Å—á–µ—Ç –∫–æ–º–∏—Å—Å–∏–∏ –¥–ª—è –∑–∞–∫–∞–∑–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –ø—Ä–µ–¥–º–µ—Ç–∞ –∏ —Ä–µ–∂–∏–º–Ω–æ–≥–æ –ø–æ–ª—è –∫–æ–º–∏—Å—Å–∏–∏."""
        try:
            if not category or not subject or not total_price or not commissions_data:
                # logger.warning(f"Missing data: category={category}, subject={subject}, total_price={total_price}, commissions_data={bool(commissions_data)}")
                return 0.0, 0.0
            
            # logger.info(f"Calculating commission for category='{category}', subject='{subject}', total_price={total_price}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ commissions_data - —ç—Ç–æ —Å–ø–∏—Å–æ–∫
            if not isinstance(commissions_data, list):
                logger.warning(f"Commissions data is not a list: {type(commissions_data)}")
                return 0.0, 0.0
            
            if len(commissions_data) == 0:
                logger.warning("Commissions data is empty")
                return 0.0, 0.0
            
            # logger.info(f"Searching through {len(commissions_data)} commission records")
            # logger.info(f"First commission record structure: {commissions_data[0] if commissions_data else 'No data'}")
            
            # –ò—â–µ–º –∫–æ–º–∏—Å—Å–∏—é –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø—Ä–µ–¥–º–µ—Ç—É (—Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)
            for i, commission in enumerate(commissions_data):
                if not isinstance(commission, dict):
                    logger.debug(f"Commission record {i} is not a dict: {type(commission)}")
                    continue
                    
                parent_name = commission.get("parentName")
                subject_name = commission.get("subjectName")
                percent_value = commission.get(commission_field)
                
                # logger.info(f"Commission {i}: parentName='{parent_name}', subjectName='{subject_name}', kgvpMarketplace={kgvp_marketplace}")
                
                # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                if (parent_name == category and subject_name == subject):
                    commission_percent = float(percent_value) if percent_value is not None else 0.0
                    commission_amount = (total_price * commission_percent) / 100
                    # logger.info(f"Commission match ({commission_field}) for {category}/{subject}: {commission_percent}% -> {commission_amount}‚ÇΩ")
                    # logger.info(f"Found exact match: {category}/{subject} -> {commission_percent}% = {commission_amount}‚ÇΩ")
                    return commission_percent, commission_amount
                
                # –ù–µ—á–µ—Ç–∫–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É (–µ—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–æ–≤–ø–∞–¥–∞—é—Ç)
                if (parent_name == category and subject_name and subject and 
                    (subject_name.lower() in subject.lower() or subject.lower() in subject_name.lower())):
                    commission_percent = float(percent_value) if percent_value is not None else 0.0
                    commission_amount = (total_price * commission_percent) / 100
                    
                    # logger.info(f"Found fuzzy match: {category}/{subject} ~ {parent_name}/{subject_name} -> {commission_percent}% = {commission_amount}‚ÇΩ")
                    return commission_percent, commission_amount
            
            # –ï—Å–ª–∏ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–µ—Ç, –∏—â–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            # logger.info(f"No exact match found, searching by category: {category}")
            for i, commission in enumerate(commissions_data):
                if not isinstance(commission, dict):
                    continue
                
                parent_name = commission.get("parentName")
                percent_value = commission.get(commission_field)
                
                # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                if parent_name == category:
                    commission_percent = float(percent_value) if percent_value is not None else 0.0
                    commission_amount = (total_price * commission_percent) / 100
                    
                    # logger.info(f"Found exact category match: {category} -> {commission_percent}% = {commission_amount}‚ÇΩ")
                    return commission_percent, commission_amount
                
                # –ù–µ—á–µ—Ç–∫–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                if (parent_name and category and 
                    (parent_name.lower() in category.lower() or category.lower() in parent_name.lower())):
                    commission_percent = float(percent_value) if percent_value is not None else 0.0
                    commission_amount = (total_price * commission_percent) / 100
                    
                    # logger.info(f"Found fuzzy category match: {category} ~ {parent_name} -> {commission_percent}% = {commission_amount}‚ÇΩ")
                    return commission_percent, commission_amount
            
            # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –∫–æ–º–∏—Å—Å–∏—é 20%

            commission_percent = 20.0
            commission_amount = (total_price * commission_percent) / 100
            return commission_percent, commission_amount
            
        except Exception as e:
            logger.error(f"Commission calculation failed: {e}")
            return 0.0, 0.0
    
    # –ú–µ—Ç–æ–¥ —Ä–∞—Å—á–µ—Ç–∞ –ª–æ–≥–∏—Å—Ç–∏–∫–∏ —É–¥–∞–ª–µ–Ω - –ª–æ–≥–∏—Å—Ç–∏–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã

    async def update_product_prices_from_stocks(self, cabinet: WBCabinet) -> Dict[str, Any]:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –æ—Å—Ç–∞—Ç–∫–æ–≤"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Å—Ç–∞—Ç–∫–∏ –¥–ª—è –∫–∞–±–∏–Ω–µ—Ç–∞
            stocks = self.db.query(WBStock).filter(
                WBStock.cabinet_id == cabinet.id
            ).all()
            
            updated_count = 0
            
            for stock in stocks:
                if stock.price is not None:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞
                    product = self.db.query(WBProduct).filter(
                        and_(
                            WBProduct.cabinet_id == cabinet.id,
                            WBProduct.nm_id == stock.nm_id
                        )
                    ).first()
                    
                    if product:
                        product.price = stock.price
                        product.discount_price = stock.discount if stock.discount else None
                        updated_count += 1
            
            self.db.commit()
            
            return {
                "status": "success",
                "updated_products": updated_count
            }
            
        except Exception as e:
            logger.error(f"Failed to update product prices: {e}")
            return {"status": "error", "error_message": str(e)}

    async def update_product_ratings_from_reviews(self, cabinet: WBCabinet) -> Dict[str, Any]:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –æ—Ç–∑—ã–≤–æ–≤"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–∑—ã–≤—ã –¥–ª—è –∫–∞–±–∏–Ω–µ—Ç–∞
            reviews = self.db.query(WBReview).filter(
                WBReview.cabinet_id == cabinet.id
            ).all()
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ—Ç–∑—ã–≤—ã –ø–æ —Ç–æ–≤–∞—Ä–∞–º
            product_reviews = {}
            for review in reviews:
                if review.nm_id and review.rating:
                    if review.nm_id not in product_reviews:
                        product_reviews[review.nm_id] = []
                    product_reviews[review.nm_id].append(review.rating)
            
            updated_count = 0
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥–∏ —Ç–æ–≤–∞—Ä–æ–≤
            for nm_id, ratings in product_reviews.items():
                if ratings:
                    avg_rating = sum(ratings) / len(ratings)
                    
                    product = self.db.query(WBProduct).filter(
                        and_(
                            WBProduct.cabinet_id == cabinet.id,
                            WBProduct.nm_id == nm_id
                        )
                    ).first()
                    
                    if product:
                        product.rating = round(avg_rating, 1)
                        product.reviews_count = len(ratings)
                        updated_count += 1
            
            self.db.commit()
            
            return {
                "status": "success",
                "updated_products": updated_count
            }
            
        except Exception as e:
            logger.error(f"Failed to update product ratings: {e}")
            return {"status": "error", "error_message": str(e)}

    # Webhook —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

    async def _get_today_stats(self, cabinet: WBCabinet) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
        try:
            today = TimezoneUtils.now_msk().date()
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–∫–∞–∑—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            orders_today = self.db.query(WBOrder).filter(
                and_(
                    WBOrder.cabinet_id == cabinet.id,
                    func.date(WBOrder.order_date) == today
                )
            ).all()
            
            count = len(orders_today)
            amount = sum(float(order.total_price or 0) for order in orders_today)
            
            return {
                "count": count,
                "amount": amount
            }
        except Exception as e:
            logger.error(f"Error getting today stats: {e}")
            return {"count": 0, "amount": 0}

    async def _get_product_statistics(self, cabinet_id: int, nm_id: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ–≤–∞—Ä–∞ (–≤—ã–∫—É–ø, —Å–∫–æ—Ä–æ—Å—Ç—å –∑–∞–∫–∞–∑–æ–≤, –ø—Ä–æ–¥–∞–∂–∏)"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            thirty_days_ago = TimezoneUtils.now_msk() - timedelta(days=30)
            
            # –ó–∞–∫–∞–∑—ã –∑–∞ 7 –¥–Ω–µ–π
            orders_7d = self.db.query(WBOrder).filter(
                and_(
                    WBOrder.cabinet_id == cabinet_id,
                    WBOrder.nm_id == nm_id,
                    WBOrder.order_date >= TimezoneUtils.now_msk() - timedelta(days=7)
                )
            ).all()
            
            # –ó–∞–∫–∞–∑—ã –∑–∞ 14 –¥–Ω–µ–π
            orders_14d = self.db.query(WBOrder).filter(
                and_(
                    WBOrder.cabinet_id == cabinet_id,
                    WBOrder.nm_id == nm_id,
                    WBOrder.order_date >= TimezoneUtils.now_msk() - timedelta(days=14)
                )
            ).all()
            
            # –ó–∞–∫–∞–∑—ã –∑–∞ 30 –¥–Ω–µ–π
            orders_30d = self.db.query(WBOrder).filter(
                and_(
                    WBOrder.cabinet_id == cabinet_id,
                    WBOrder.nm_id == nm_id,
                    WBOrder.order_date >= thirty_days_ago
                )
            ).all()
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            buyout_rates = {
                "7_days": 100.0 if orders_7d else 0.0,
                "14_days": 100.0 if orders_14d else 0.0,
                "30_days": 100.0 if orders_30d else 0.0
            }
            
            order_speed = {
                "7_days": len(orders_7d) / 7.0,
                "14_days": len(orders_14d) / 14.0,
                "30_days": len(orders_30d) / 30.0
            }
            
            sales_periods = {
                "7_days": len(orders_7d),
                "14_days": len(orders_14d),
                "30_days": len(orders_30d)
            }
            
            return {
                "buyout_rates": buyout_rates,
                "order_speed": order_speed,
                "sales_periods": sales_periods
            }
            
        except Exception as e:
            logger.error(f"Error getting product statistics: {e}")
            return {
                "buyout_rates": {},
                "order_speed": {},
                "sales_periods": {}
            }

    async def _get_order_stocks(self, cabinet: WBCabinet, nm_id: int) -> Dict[str, int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ –ø–æ —Ç–æ–≤–∞—Ä—É"""
        try:
            stocks = self.db.query(WBStock).filter(
                and_(
                    WBStock.cabinet_id == cabinet.id,
                    WBStock.nm_id == nm_id
                )
            ).all()
            
            stocks_dict = {}
            for stock in stocks:
                size = stock.size or "Unknown"
                quantity = stock.quantity or 0
                stocks_dict[size] = quantity
                
            return stocks_dict
        except Exception as e:
            logger.error(f"Error getting order stocks: {e}")
            return {}

    async def _should_send_notification(self, cabinet: WBCabinet) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–Ω–µ –ø–µ—Ä–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è)"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ —É–∂–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ä–∞–Ω–µ–µ
            # –ï—Å–ª–∏ last_sync_at –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –æ—á–µ–Ω—å —Å—Ç–∞—Ä—ã–π, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –ø–µ—Ä–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
            if not cabinet.last_sync_at:
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
            # –ï—Å–ª–∏ –Ω–µ—Ç, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –ø–µ—Ä–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ –¥–æ–ª–≥–æ–≥–æ –ø–µ—Ä–µ—Ä—ã–≤–∞
            now = TimezoneUtils.now_msk()
            time_diff = now - cabinet.last_sync_at
            
            if time_diff > timedelta(hours=24):
                return False
            
            # –ï—Å–ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –±—ã–ª–∞ –Ω–µ–¥–∞–≤–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            return True
            
        except Exception as e:
            logger.error(f"Error checking notification eligibility: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            return False

    async def sync_sales(
        self, 
        cabinet: WBCabinet, 
        client: WBAPIClient, 
        date_from: str, 
        date_to: str,
        should_notify: bool = False
    ) -> Dict[str, Any]:
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ–¥–∞–∂ –∏ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤"""
        try:
            logger.info(f"Starting sales sync for cabinet {cabinet.id}")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            # –ü–µ—Ä–≤–∏—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: last_sync_at == None (–ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ)
            # –ü–æ—Å–ª–µ–¥—É—é—â–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: last_sync_at != None (—Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ)
            is_initial_sync = cabinet.last_sync_at is None
            flag = 0 if is_initial_sync else 1
            
            logger.info(f"Sales sync type: {'initial' if is_initial_sync else 'incremental'} (flag={flag})")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–∂ –∏–∑ WB API
            sales_data = await client.get_sales(date_from, flag=flag)
            
            logger.info(f"üîç [sync_sales] Received {len(sales_data) if sales_data else 0} sales records from WB API")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            if sales_data:
                logger.info(f"üîç [sync_sales] First 3 sales records:")
                for i, sale_item in enumerate(sales_data[:3]):
                    logger.info(f"   {i+1}. Sale ID: {sale_item.get('srid', 'N/A')}, Date: {sale_item.get('date', 'N/A')}, Amount: {sale_item.get('totalPrice', 'N/A')}")
            
            if not sales_data:
                logger.warning(f"No sales data received for cabinet {cabinet.id}")
                return {"status": "success", "records_processed": 0, "records_created": 0}
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º CRUD –¥–ª—è –ø—Ä–æ–¥–∞–∂
            from .crud_sales import WBSalesCRUD
            sales_crud = WBSalesCRUD()
            
            records_processed = 0
            records_created = 0
            
            for sale_item in sales_data:
                try:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø—Ä–æ–¥–∞–∂–∏ (–≤—ã–∫—É–ø –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—Ç)
                    sale_type = "buyout"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–∫—É–ø
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –≤–æ–∑–≤—Ä–∞—Ç–æ–º
                    # –í WB API –≤–æ–∑–≤—Ä–∞—Ç—ã –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è –ø–æ:
                    # 1. –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º —Å—É–º–º–∞–º (totalPrice < 0)
                    # 2. –ü—Ä–µ—Ñ–∏–∫—Å—É saleID (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "R")
                    # 3. –ü–æ–ª—é isCancel = true
                    total_price = float(sale_item.get("totalPrice", 0))
                    sale_id = str(sale_item.get("srid", ""))
                    is_cancel = bool(sale_item.get("isCancel", False))
                    
                    if (total_price < 0 or 
                        sale_id.startswith("R") or 
                        is_cancel):
                        sale_type = "return"
                    
                    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                    sale_data = {
                        "cabinet_id": cabinet.id,
                        "sale_id": str(sale_item.get("srid", "")),
                        "order_id": str(sale_item.get("orderId", "")),
                        "nm_id": sale_item.get("nmId", 0),
                        "product_name": sale_item.get("subject", ""),
                        "brand": sale_item.get("brand", ""),
                        "size": sale_item.get("techSize", ""),
                        "amount": float(sale_item.get("totalPrice", 0)),
                        "sale_date": self._parse_wb_date(sale_item.get("date")),
                        "type": sale_type,
                        "status": "completed",
                        "is_cancel": bool(sale_item.get("isCancel", False)),
                        "last_change_date": self._parse_wb_date(sale_item.get("lastChangeDate"))
                    }
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –∑–∞–ø–∏—Å—å
                    existing_sale = sales_crud.get_sale_by_sale_id(self.db, cabinet.id, sale_data["sale_id"])
                    
                    if not existing_sale:
                        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                        sales_crud.create_sale(self.db, sale_data)
                        records_created += 1
                        
                        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–¥–∞–∂–∞—Ö –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ NotificationService.process_sync_events
                        # –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
                    else:
                        logger.debug(f"üîç [sync_sales] Sale already exists: {sale_data['sale_id']}")
                    
                    records_processed += 1
                    
                except Exception as e:
                    logger.error(f"Error processing sale item: {e}")
                    continue
            
            logger.info(f"Sales sync completed for cabinet {cabinet.id}: {records_processed} processed, {records_created} created")
            
            return {
                "status": "success",
                "records_processed": records_processed,
                "records_created": records_created
            }
            
        except Exception as e:
            logger.error(f"Sales sync failed for cabinet {cabinet.id}: {e}")
            return {"status": "error", "error_message": str(e)}

    async def sync_claims(
        self, 
        cabinet: WBCabinet, 
        client: WBAPIClient, 
        should_notify: bool = False
    ) -> Dict[str, Any]:
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤–æ–∑–≤—Ä–∞—Ç–æ–≤ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π (Claims API)"""
        try:
            logger.info(f"Starting claims sync for cabinet {cabinet.id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∏ –∞—Ä—Ö–∏–≤–Ω—ã–µ –≤–æ–∑–≤—Ä–∞—Ç—ã
            active_claims = await client.get_claims(is_archive=False)
            archive_claims = await client.get_claims(is_archive=True)
            
            all_claims = active_claims + archive_claims
            logger.info(f"Received {len(all_claims)} total claims for cabinet {cabinet.id}")
            
            if not all_claims:
                return {
                    "status": "success",
                    "records_processed": 0,
                    "records_created": 0,
                    "records_updated": 0,
                    "records_errors": 0,
                    "message": "No claims data to sync"
                }
            
            from .crud_sales import WBSalesCRUD
            sales_crud = WBSalesCRUD()
            
            records_processed = 0
            records_created = 0
            records_updated = 0
            records_errors = 0
            
            for claim in all_claims:
                try:
                    records_processed += 1
                    
                    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                    claim_data = {
                        "cabinet_id": cabinet.id,
                        "sale_id": str(claim.get("srid", "")),
                        "order_id": str(claim.get("order_dt", "")),
                        "nm_id": claim.get("nm_id", 0),
                        "product_name": claim.get("imt_name", ""),
                        "brand": "",  # –í Claims API –Ω–µ—Ç –±—Ä–µ–Ω–¥–∞
                        "size": "",   # –í Claims API –Ω–µ—Ç —Ä–∞–∑–º–µ—Ä–∞
                        "amount": float(claim.get("price", 0)),
                        "sale_date": self._parse_wb_date(claim.get("dt")),
                        "type": "return",  # –í—Å–µ Claims - —ç—Ç–æ –≤–æ–∑–≤—Ä–∞—Ç—ã
                        "status": "completed" if claim.get("status") == 2 else "pending",
                        "is_cancel": claim.get("status") == 1,  # status=1 –æ–∑–Ω–∞—á–∞–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
                        "last_change_date": self._parse_wb_date(claim.get("dt_update"))
                    }
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –∑–∞–ø–∏—Å—å
                    existing_sale = sales_crud.get_sale_by_sale_id(self.db, cabinet.id, claim_data["sale_id"])
                    
                    if existing_sale:
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
                        for key, value in claim_data.items():
                            if key != "cabinet_id" and key != "sale_id":
                                setattr(existing_sale, key, value)
                        records_updated += 1
                    else:
                        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                        sales_crud.create_sale(self.db, claim_data)
                        records_created += 1
                    
                except Exception as e:
                    records_errors += 1
                    logger.error(f"Error processing claim {claim.get('id', 'unknown')}: {e}")
                    continue
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            logger.info(f"Claims sync completed for cabinet {cabinet.id}: "
                       f"{records_created} created, {records_updated} updated, {records_errors} errors")
            
            return {
                "status": "success",
                "records_processed": records_processed,
                "records_created": records_created,
                "records_updated": records_updated,
                "records_errors": records_errors,
                "message": f"Claims sync completed: {records_created} created, {records_updated} updated, {records_errors} errors"
            }
            
        except Exception as e:
            logger.error(f"Error syncing claims for cabinet {cabinet.id}: {e}")
            return {
                "status": "error",
                "error": str(e),
                "message": f"Claims sync failed: {str(e)}"
            }
    
    def _parse_wb_date(self, date_str: str) -> Optional[datetime]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã –∏–∑ WB API"""
        if not date_str:
            return None
        
        try:
            # WB API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ "2025-01-28T12:00:00"
            return datetime.fromisoformat(date_str.replace('Z', '+00:00'))
        except Exception as e:
            logger.error(f"Error parsing date {date_str}: {e}")
            return None
    
    def _get_current_orders_for_notifications(self, cabinet_id: int, previous_sync_at: datetime = None) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        
        Args:
            cabinet_id: ID –∫–∞–±–∏–Ω–µ—Ç–∞
            previous_sync_at: –í—Ä–µ–º—è –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (–¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤)
        """
        try:
            # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º—è 24 —á–∞—Å–∞ –Ω–∞–∑–∞–¥
            if not previous_sync_at:
                previous_sync_at = TimezoneUtils.now_msk() - timedelta(hours=24)
                logger.info(f"üìÖ No previous sync time for cabinet {cabinet_id}, using 24h ago: {previous_sync_at}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ —Å–æ–∑–¥–∞–Ω—ã/–æ–±–Ω–æ–≤–ª–µ–Ω—ã –ø–æ—Å–ª–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            recent_orders = self.db.query(WBOrder).filter(
                WBOrder.cabinet_id == cabinet_id,
                WBOrder.updated_at > previous_sync_at  # –ò—Å–ø–æ–ª—å–∑—É–µ–º previous_sync_at –≤–º–µ—Å—Ç–æ cabinet.last_sync_at
            ).all()
            
            # –ü–æ–ª—É—á–∞–µ–º image_url –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑–∞ –∏–∑ —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
            order_data_list = []
            for order in recent_orders:
                # –ò—â–µ–º —Ç–æ–≤–∞—Ä –ø–æ nm_id –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è image_url
                product = self.db.query(WBProduct).filter(
                    and_(
                        WBProduct.cabinet_id == cabinet_id,
                        WBProduct.nm_id == order.nm_id
                    )
                ).first()
                
                order_data = {
                    "order_id": order.order_id,
                    "id": order.order_id,  # –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å format_order_detail
                    "status": order.status,
                    "amount": order.total_price,
                    "total_price": order.total_price,  # ‚Üê –î–û–ë–ê–í–õ–ï–ù–û!
                    "product_name": order.name,  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º name –≤–º–µ—Å—Ç–æ product_name
                    "brand": order.brand,
                    "nm_id": order.nm_id,
                    "size": order.size,
                    "warehouse_from": order.warehouse_from,
                    "warehouse_to": order.warehouse_to,
                    "created_at": order.created_at,
                    "order_date": order.order_date,  # ‚Üê –î–û–ë–ê–í–õ–ï–ù–û!
                    "date": order.created_at.isoformat() if order.created_at else "",  # –î–ª—è format_order_detail
                    "article": order.article,
                    "supplier_article": order.article,
                    "barcode": order.barcode,
                    "spp_percent": order.spp_percent,
                    "customer_price": order.customer_price,
                    "discount_percent": order.discount_percent,  # ‚Üê –î–û–ë–ê–í–õ–ï–ù–û!
                    # –õ–æ–≥–∏—Å—Ç–∏–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
                    "image_url": product.image_url if product else None,  # –î–æ–±–∞–≤–ª—è–µ–º image_url –∏–∑ —Ç–æ–≤–∞—Ä–∞
                    "dimensions": "",  # –ü–æ–ª—É—á–∞—Ç—å –∏–∑ —Ç–æ–≤–∞—Ä–∞
                    "volume_liters": 0,  # –ü–æ–ª—É—á–∞—Ç—å –∏–∑ —Ç–æ–≤–∞—Ä–∞
                    "warehouse_rate_per_liter": 0,  # –ü–æ–ª—É—á–∞—Ç—å –∏–∑ —Ç–æ–≤–∞—Ä–∞
                    "warehouse_rate_extra": 0,  # –ü–æ–ª—É—á–∞—Ç—å –∏–∑ —Ç–æ–≤–∞—Ä–∞
                    "rating": 0,  # –ü–æ–ª—É—á–∞—Ç—å –∏–∑ —Ç–æ–≤–∞—Ä–∞
                    "reviews_count": 0,  # –ü–æ–ª—É—á–∞—Ç—å –∏–∑ —Ç–æ–≤–∞—Ä–∞
                    "sales_periods": {},  # –ü–æ–ª—É—á–∞—Ç—å –∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                    "stocks": {},  # –ü–æ–ª—É—á–∞—Ç—å –∏–∑ –æ—Å—Ç–∞—Ç–∫–æ–≤
                    "stock_days": {}  # –ü–æ–ª—É—á–∞—Ç—å –∏–∑ –æ—Å—Ç–∞—Ç–∫–æ–≤
                }
                order_data_list.append(order_data)
            
            return order_data_list
        except Exception as e:
            logger.error(f"Error getting current orders for notifications: {e}")
            return []
    
    def _get_previous_orders_for_notifications(self, cabinet_id: int, previous_sync_at: datetime = None) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        
        Args:
            cabinet_id: ID –∫–∞–±–∏–Ω–µ—Ç–∞
            previous_sync_at: –í—Ä–µ–º—è –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (–¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏)
        """
        try:
            # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º—è 24 —á–∞—Å–∞ –Ω–∞–∑–∞–¥
            if not previous_sync_at:
                previous_sync_at = TimezoneUtils.now_msk() - timedelta(hours=24)
                logger.info(f"üìÖ No previous sync time for cabinet {cabinet_id}, using 24h ago: {previous_sync_at}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            old_orders = self.db.query(WBOrder).filter(
                WBOrder.cabinet_id == cabinet_id,
                WBOrder.updated_at <= previous_sync_at  # –ò—Å–ø–æ–ª—å–∑—É–µ–º previous_sync_at
            ).all()
            
            # –ü–æ–ª—É—á–∞–µ–º image_url –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑–∞ –∏–∑ —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
            order_data_list = []
            for order in old_orders:
                # –ò—â–µ–º —Ç–æ–≤–∞—Ä –ø–æ nm_id –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è image_url
                product = self.db.query(WBProduct).filter(
                    and_(
                        WBProduct.cabinet_id == cabinet_id,
                        WBProduct.nm_id == order.nm_id
                    )
                ).first()
                
                order_data = {
                    "order_id": order.order_id,
                    "id": order.order_id,  # –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å format_order_detail
                    "status": order.status,
                    "amount": order.total_price,
                    "product_name": order.name,  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º name –≤–º–µ—Å—Ç–æ product_name
                    "brand": order.brand,
                    "nm_id": order.nm_id,
                    "size": order.size,
                    "warehouse_from": order.warehouse_from,
                    "warehouse_to": order.warehouse_to,
                    "created_at": order.created_at,
                    "date": order.created_at.isoformat() if order.created_at else "",  # –î–ª—è format_order_detail
                    "article": order.article,
                    "supplier_article": order.article,
                    "barcode": order.barcode,
                    "spp_percent": order.spp_percent,
                    "customer_price": order.customer_price,
                    # –õ–æ–≥–∏—Å—Ç–∏–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
                    "image_url": product.image_url if product else None,  # –î–æ–±–∞–≤–ª—è–µ–º image_url –∏–∑ —Ç–æ–≤–∞—Ä–∞
                    "dimensions": "",  # –ü–æ–ª—É—á–∞—Ç—å –∏–∑ —Ç–æ–≤–∞—Ä–∞
                    "volume_liters": 0,  # –ü–æ–ª—É—á–∞—Ç—å –∏–∑ —Ç–æ–≤–∞—Ä–∞
                    "warehouse_rate_per_liter": 0,  # –ü–æ–ª—É—á–∞—Ç—å –∏–∑ —Ç–æ–≤–∞—Ä–∞
                    "warehouse_rate_extra": 0,  # –ü–æ–ª—É—á–∞—Ç—å –∏–∑ —Ç–æ–≤–∞—Ä–∞
                    "rating": 0,  # –ü–æ–ª—É—á–∞—Ç—å –∏–∑ —Ç–æ–≤–∞—Ä–∞
                    "reviews_count": 0,  # –ü–æ–ª—É—á–∞—Ç—å –∏–∑ —Ç–æ–≤–∞—Ä–∞
                    "sales_periods": {},  # –ü–æ–ª—É—á–∞—Ç—å –∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                    "stocks": {},  # –ü–æ–ª—É—á–∞—Ç—å –∏–∑ –æ—Å—Ç–∞—Ç–∫–æ–≤
                    "stock_days": {}  # –ü–æ–ª—É—á–∞—Ç—å –∏–∑ –æ—Å—Ç–∞—Ç–∫–æ–≤
                }
                order_data_list.append(order_data)
            
            return order_data_list
        except Exception as e:
            logger.error(f"Error getting previous orders for notifications: {e}")
            return []
    
    def _get_current_reviews_for_notifications(self, cabinet_id: int, previous_sync_at: datetime = None) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        
        Args:
            cabinet_id: ID –∫–∞–±–∏–Ω–µ—Ç–∞
            previous_sync_at: –í—Ä–µ–º—è –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        """
        try:
            # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º—è 24 —á–∞—Å–∞ –Ω–∞–∑–∞–¥
            if not previous_sync_at:
                previous_sync_at = TimezoneUtils.now_msk() - timedelta(hours=24)
                logger.info(f"üìÖ No previous sync time for cabinet {cabinet_id}, using 24h ago: {previous_sync_at}")
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∑—ã–≤—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ —Å–æ–∑–¥–∞–Ω—ã –ø–æ—Å–ª–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            recent_reviews = self.db.query(WBReview).filter(
                WBReview.cabinet_id == cabinet_id,
                WBReview.created_date > previous_sync_at  # –ò—Å–ø–æ–ª—å–∑—É–µ–º previous_sync_at
            ).all()
            
            return [{
                "review_id": review.review_id,
                "rating": review.rating,
                "text": review.text,
                "nm_id": review.nm_id,
                "user_name": review.user_name,
                "created_date": review.created_date
            } for review in recent_reviews]
        except Exception as e:
            logger.error(f"Error getting current reviews for notifications: {e}")
            return []
    
    def _get_previous_reviews_for_notifications(self, cabinet_id: int, previous_sync_at: datetime = None) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        
        Args:
            cabinet_id: ID –∫–∞–±–∏–Ω–µ—Ç–∞
            previous_sync_at: –í—Ä–µ–º—è –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        """
        try:
            # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º—è 24 —á–∞—Å–∞ –Ω–∞–∑–∞–¥
            if not previous_sync_at:
                previous_sync_at = TimezoneUtils.now_msk() - timedelta(hours=24)
                logger.info(f"üìÖ No previous sync time for cabinet {cabinet_id}, using 24h ago: {previous_sync_at}")
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∑—ã–≤—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ —Å–æ–∑–¥–∞–Ω—ã –¥–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            old_reviews = self.db.query(WBReview).filter(
                WBReview.cabinet_id == cabinet_id,
                WBReview.created_date <= previous_sync_at  # –ò—Å–ø–æ–ª—å–∑—É–µ–º previous_sync_at
            ).all()
            
            return [{
                "review_id": review.review_id,
                "rating": review.rating,
                "text": review.text,
                "nm_id": review.nm_id,
                "user_name": review.user_name,
                "created_date": review.created_date
            } for review in old_reviews]
        except Exception as e:
            logger.error(f"Error getting previous reviews for notifications: {e}")
            return []
    
    def _get_current_stocks_for_notifications(self, cabinet_id: int, previous_sync_at: datetime = None) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        
        Args:
            cabinet_id: ID –∫–∞–±–∏–Ω–µ—Ç–∞
            previous_sync_at: –í—Ä–µ–º—è –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        """
        try:
            # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º—è 24 —á–∞—Å–∞ –Ω–∞–∑–∞–¥
            if not previous_sync_at:
                previous_sync_at = TimezoneUtils.now_msk() - timedelta(hours=24)
                logger.info(f"üìÖ No previous sync time for cabinet {cabinet_id}, using 24h ago: {previous_sync_at}")
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –ø–æ—Å–ª–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            recent_stocks = self.db.query(WBStock).filter(
                WBStock.cabinet_id == cabinet_id,
                WBStock.updated_at > previous_sync_at  # –ò—Å–ø–æ–ª—å–∑—É–µ–º previous_sync_at
            ).all()
            
            return [{
                "nm_id": stock.nm_id,
                "product_name": stock.name,  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º name –≤–º–µ—Å—Ç–æ product_name
                "quantity": stock.quantity,
                "in_way_to_client": stock.in_way_to_client,
                "in_way_from_client": stock.in_way_from_client,
                "warehouse_name": stock.warehouse_name,
                "updated_at": stock.updated_at
            } for stock in recent_stocks]
        except Exception as e:
            logger.error(f"Error getting current stocks for notifications: {e}")
            return []
    
    def _get_previous_stocks_for_notifications(self, cabinet_id: int, previous_sync_at: datetime = None) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        
        Args:
            cabinet_id: ID –∫–∞–±–∏–Ω–µ—Ç–∞
            previous_sync_at: –í—Ä–µ–º—è –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        """
        try:
            # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º—è 24 —á–∞—Å–∞ –Ω–∞–∑–∞–¥
            if not previous_sync_at:
                previous_sync_at = TimezoneUtils.now_msk() - timedelta(hours=24)
                logger.info(f"üìÖ No previous sync time for cabinet {cabinet_id}, using 24h ago: {previous_sync_at}")
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            old_stocks = self.db.query(WBStock).filter(
                WBStock.cabinet_id == cabinet_id,
                WBStock.updated_at <= previous_sync_at  # –ò—Å–ø–æ–ª—å–∑—É–µ–º previous_sync_at
            ).all()
            
            return [{
                "nm_id": stock.nm_id,
                "product_name": stock.name,  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º name –≤–º–µ—Å—Ç–æ product_name
                "quantity": stock.quantity,
                "in_way_to_client": stock.in_way_to_client,
                "in_way_from_client": stock.in_way_from_client,
                "warehouse_name": stock.warehouse_name,
                "updated_at": stock.updated_at
            } for stock in old_stocks]
        except Exception as e:
            logger.error(f"Error getting previous stocks for notifications: {e}")
            return []
    
    def _get_current_sales_for_notifications(self, cabinet_id: int, previous_sync_at: datetime = None) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –ø—Ä–æ–¥–∞–∂ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        
        Args:
            cabinet_id: ID –∫–∞–±–∏–Ω–µ—Ç–∞
            previous_sync_at: –í—Ä–µ–º—è –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        """
        try:
            from ..wb_api.models_sales import WBSales
            
            # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º—è 24 —á–∞—Å–∞ –Ω–∞–∑–∞–¥
            if not previous_sync_at:
                previous_sync_at = TimezoneUtils.now_msk() - timedelta(hours=24)
                logger.info(f"üìÖ No previous sync time for cabinet {cabinet_id}, using 24h ago: {previous_sync_at}")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥–∞–∂–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ —Å–æ–∑–¥–∞–Ω—ã –ø–æ—Å–ª–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            recent_sales = self.db.query(WBSales).filter(
                WBSales.cabinet_id == cabinet_id,
                WBSales.created_at > previous_sync_at
            ).all()
            
            return [{
                "sale_id": sale.sale_id,
                "order_id": sale.order_id,
                "nm_id": sale.nm_id,
                "product_name": sale.product_name,
                "brand": sale.brand,
                "size": sale.size,
                "amount": sale.amount,
                "sale_date": sale.sale_date,
                "type": sale.type,  # 'buyout' –∏–ª–∏ 'return'
                "status": sale.status,
                "is_cancel": sale.is_cancel
            } for sale in recent_sales]
        except Exception as e:
            logger.error(f"Error getting current sales for notifications: {e}")
            return []
    
    def _get_previous_sales_for_notifications(self, cabinet_id: int, previous_sync_at: datetime = None) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –ø—Ä–æ–¥–∞–∂ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        
        Args:
            cabinet_id: ID –∫–∞–±–∏–Ω–µ—Ç–∞
            previous_sync_at: –í—Ä–µ–º—è –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        """
        try:
            from ..wb_api.models_sales import WBSales
            
            # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º—è 24 —á–∞—Å–∞ –Ω–∞–∑–∞–¥
            if not previous_sync_at:
                previous_sync_at = TimezoneUtils.now_msk() - timedelta(hours=24)
                logger.info(f"üìÖ No previous sync time for cabinet {cabinet_id}, using 24h ago: {previous_sync_at}")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥–∞–∂–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ —Å–æ–∑–¥–∞–Ω—ã –¥–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            old_sales = self.db.query(WBSales).filter(
                WBSales.cabinet_id == cabinet_id,
                WBSales.created_at <= previous_sync_at
            ).all()
            
            return [{
                "sale_id": sale.sale_id,
                "order_id": sale.order_id,
                "nm_id": sale.nm_id,
                "product_name": sale.product_name,
                "brand": sale.brand,
                "size": sale.size,
                "amount": sale.amount,
                "sale_date": sale.sale_date,
                "type": sale.type,  # 'buyout' –∏–ª–∏ 'return'
                "status": sale.status,
                "is_cancel": sale.is_cancel
            } for sale in old_sales]
        except Exception as e:
            logger.error(f"Error getting previous sales for notifications: {e}")
            return []