"""
Notification Generator –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π S3
–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–±—ã—Ç–∏–π
"""

from datetime import datetime, timezone
from typing import Dict, Any, Optional


class NotificationGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–±—ã—Ç–∏–π"""
    
    def generate_notification(self, event_data: Dict[str, Any], user_settings: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–±—ã—Ç–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–æ–æ–±—â–µ
        if not user_settings.get("notifications_enabled", True):
            return None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        event_type = event_data.get("type")
        if not self._is_notification_type_enabled(event_type, user_settings):
            return None
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
        if event_type == "new_order":
            return self._generate_new_order_notification(event_data, user_settings)
        elif event_type == "order_buyout":
            return self._generate_order_buyout_notification(event_data, user_settings)
        elif event_type == "order_cancellation":
            return self._generate_order_cancellation_notification(event_data, user_settings)
        elif event_type == "order_return":
            return self._generate_order_return_notification(event_data, user_settings)
        elif event_type == "negative_review":
            return self._generate_negative_review_notification(event_data, user_settings)
        elif event_type == "critical_stocks":
            return self._generate_critical_stocks_notification(event_data, user_settings)
        
        return None
    
    def _is_notification_type_enabled(self, event_type: str, user_settings: Dict[str, Any]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –≤–∫–ª—é—á–µ–Ω –ª–∏ —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        type_mapping = {
            "new_order": "new_orders_enabled",
            "order_buyout": "order_buyouts_enabled",
            "order_cancellation": "order_cancellations_enabled",
            "order_return": "order_returns_enabled",
            "negative_review": "negative_reviews_enabled",
            "critical_stocks": "critical_stocks_enabled"
        }
        
        setting_key = type_mapping.get(event_type)
        if not setting_key:
            return False
        
        return user_settings.get(setting_key, True)
    
    def _generate_new_order_notification(self, event_data: Dict[str, Any], user_settings: Dict[str, Any]) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ"""
        order_id = event_data.get("order_id", "N/A")
        amount = event_data.get("amount", 0)
        product_name = event_data.get("product_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä")
        brand = event_data.get("brand", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±—Ä–µ–Ω–¥")
        
        title = f"üõí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order_id}"
        content = self._format_new_order_content(order_id, amount, product_name, brand)
        
        return {
            "type": "new_order",
            "user_id": event_data.get("user_id"),
            "order_id": order_id,
            "amount": amount,
            "title": title,
            "content": content,
            "priority": "HIGH",
            "grouping_enabled": user_settings.get("grouping_enabled", True),
            "max_group_size": user_settings.get("max_group_size", 5),
            "group_timeout": user_settings.get("group_timeout", 300),
            "generated_at": datetime.now(timezone.utc)
        }
    
    def _generate_order_buyout_notification(self, event_data: Dict[str, Any], user_settings: Dict[str, Any]) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—ã–∫—É–ø–µ –∑–∞–∫–∞–∑–∞"""
        order_id = event_data.get("order_id", "N/A")
        amount = event_data.get("amount", 0)
        product_name = event_data.get("product_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä")
        brand = event_data.get("brand", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±—Ä–µ–Ω–¥")
        
        title = f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} –≤—ã–∫—É–ø–ª–µ–Ω"
        content = self._format_order_buyout_content(order_id, amount, product_name, brand)
        
        return {
            "type": "order_buyout",
            "user_id": event_data.get("user_id"),
            "order_id": order_id,
            "amount": amount,
            "title": title,
            "content": content,
            "priority": "HIGH",
            "grouping_enabled": user_settings.get("grouping_enabled", True),
            "max_group_size": user_settings.get("max_group_size", 5),
            "group_timeout": user_settings.get("group_timeout", 300),
            "generated_at": datetime.now(timezone.utc)
        }
    
    def _generate_order_cancellation_notification(self, event_data: Dict[str, Any], user_settings: Dict[str, Any]) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞"""
        order_id = event_data.get("order_id", "N/A")
        amount = event_data.get("amount", 0)
        product_name = event_data.get("product_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä")
        brand = event_data.get("brand", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±—Ä–µ–Ω–¥")
        
        title = f"‚ùå –ó–∞–∫–∞–∑ #{order_id} –æ—Ç–º–µ–Ω–µ–Ω"
        content = self._format_order_cancellation_content(order_id, amount, product_name, brand)
        
        return {
            "type": "order_cancellation",
            "user_id": event_data.get("user_id"),
            "order_id": order_id,
            "amount": amount,
            "title": title,
            "content": content,
            "priority": "HIGH",
            "grouping_enabled": user_settings.get("grouping_enabled", True),
            "max_group_size": user_settings.get("max_group_size", 5),
            "group_timeout": user_settings.get("group_timeout", 300),
            "generated_at": datetime.now(timezone.utc)
        }
    
    def _generate_order_return_notification(self, event_data: Dict[str, Any], user_settings: Dict[str, Any]) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–æ–∑–≤—Ä–∞—Ç–µ –∑–∞–∫–∞–∑–∞"""
        order_id = event_data.get("order_id", "N/A")
        amount = event_data.get("amount", 0)
        product_name = event_data.get("product_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä")
        brand = event_data.get("brand", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±—Ä–µ–Ω–¥")
        
        title = f"üîÑ –ó–∞–∫–∞–∑ #{order_id} –≤–æ–∑–≤—Ä–∞—â–µ–Ω"
        content = self._format_order_return_content(order_id, amount, product_name, brand)
        
        return {
            "type": "order_return",
            "user_id": event_data.get("user_id"),
            "order_id": order_id,
            "amount": amount,
            "title": title,
            "content": content,
            "priority": "HIGH",
            "grouping_enabled": user_settings.get("grouping_enabled", True),
            "max_group_size": user_settings.get("max_group_size", 5),
            "group_timeout": user_settings.get("group_timeout", 300),
            "generated_at": datetime.now(timezone.utc)
        }
    
    def _generate_negative_review_notification(self, event_data: Dict[str, Any], user_settings: Dict[str, Any]) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–º –æ—Ç–∑—ã–≤–µ"""
        review_id = event_data.get("review_id", "N/A")
        rating = event_data.get("rating", 0)
        text = event_data.get("text", "")
        product_name = event_data.get("product_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä")
        order_id = event_data.get("order_id")
        
        title = f"üòû –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–π –æ—Ç–∑—ã–≤ #{review_id}"
        content = self._format_negative_review_content(review_id, rating, text, product_name, order_id)
        
        return {
            "type": "negative_review",
            "user_id": event_data.get("user_id"),
            "review_id": review_id,
            "rating": rating,
            "title": title,
            "content": content,
            "priority": "CRITICAL",
            "grouping_enabled": user_settings.get("grouping_enabled", True),
            "max_group_size": user_settings.get("max_group_size", 5),
            "group_timeout": user_settings.get("group_timeout", 300),
            "generated_at": datetime.now(timezone.utc)
        }
    
    def _generate_critical_stocks_notification(self, event_data: Dict[str, Any], user_settings: Dict[str, Any]) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –æ—Å—Ç–∞—Ç–∫–∞—Ö"""
        nm_id = event_data.get("nm_id", "N/A")
        name = event_data.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä")
        brand = event_data.get("brand", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±—Ä–µ–Ω–¥")
        critical_sizes = event_data.get("critical_sizes", [])
        zero_sizes = event_data.get("zero_sizes", [])
        
        title = f"‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏ #{nm_id}"
        content = self._format_critical_stocks_content(nm_id, name, brand, critical_sizes, zero_sizes)
        
        return {
            "type": "critical_stocks",
            "user_id": event_data.get("user_id"),
            "nm_id": nm_id,
            "title": title,
            "content": content,
            "priority": "HIGH",
            "grouping_enabled": user_settings.get("grouping_enabled", True),
            "max_group_size": user_settings.get("max_group_size", 5),
            "group_timeout": user_settings.get("group_timeout", 300),
            "generated_at": datetime.now(timezone.utc)
        }
    
    def _format_new_order_content(self, order_id: int, amount: int, product_name: str, brand: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ"""
        return f"""üõí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order_id}

üí∞ –°—É–º–º–∞: {amount:,} ‚ÇΩ
üì¶ –¢–æ–≤–∞—Ä: {product_name}
üè∑Ô∏è –ë—Ä–µ–Ω–¥: {brand}

–í—Ä–µ–º—è: {datetime.now(timezone.utc).strftime('%H:%M:%S')}"""
    
    def _format_order_buyout_content(self, order_id: int, amount: int, product_name: str, brand: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—ã–∫—É–ø–µ –∑–∞–∫–∞–∑–∞"""
        return f"""‚úÖ –ó–∞–∫–∞–∑ #{order_id} –≤—ã–∫—É–ø–ª–µ–Ω

üí∞ –°—É–º–º–∞: {amount:,} ‚ÇΩ
üì¶ –¢–æ–≤–∞—Ä: {product_name}
üè∑Ô∏è –ë—Ä–µ–Ω–¥: {brand}

–í—Ä–µ–º—è: {datetime.now(timezone.utc).strftime('%H:%M:%S')}"""
    
    def _format_order_cancellation_content(self, order_id: int, amount: int, product_name: str, brand: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞"""
        return f"""‚ùå –ó–∞–∫–∞–∑ #{order_id} –æ—Ç–º–µ–Ω–µ–Ω

üí∞ –°—É–º–º–∞: {amount:,} ‚ÇΩ
üì¶ –¢–æ–≤–∞—Ä: {product_name}
üè∑Ô∏è –ë—Ä–µ–Ω–¥: {brand}

–í—Ä–µ–º—è: {datetime.now(timezone.utc).strftime('%H:%M:%S')}"""
    
    def _format_order_return_content(self, order_id: int, amount: int, product_name: str, brand: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–æ–∑–≤—Ä–∞—Ç–µ –∑–∞–∫–∞–∑–∞"""
        return f"""üîÑ –ó–∞–∫–∞–∑ #{order_id} –≤–æ–∑–≤—Ä–∞—â–µ–Ω

üí∞ –°—É–º–º–∞: {amount:,} ‚ÇΩ
üì¶ –¢–æ–≤–∞—Ä: {product_name}
üè∑Ô∏è –ë—Ä–µ–Ω–¥: {brand}

–í—Ä–µ–º—è: {datetime.now(timezone.utc).strftime('%H:%M:%S')}"""
    
    def _format_negative_review_content(self, review_id: int, rating: int, text: str, product_name: str, order_id: Optional[int]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–º –æ—Ç–∑—ã–≤–µ"""
        order_info = f"–ó–∞–∫–∞–∑: #{order_id}" if order_id else "–ó–∞–∫–∞–∑: –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
        
        return f"""üòû –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–π –æ—Ç–∑—ã–≤ #{review_id}

‚≠ê –û—Ü–µ–Ω–∫–∞: {rating}/5
üìù –¢–µ–∫—Å—Ç: {text}
üì¶ –¢–æ–≤–∞—Ä: {product_name}
üõí {order_info}

–í—Ä–µ–º—è: {datetime.now(timezone.utc).strftime('%H:%M:%S')}"""
    
    def _format_critical_stocks_content(self, nm_id: int, name: str, brand: str, critical_sizes: list, zero_sizes: list) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –æ—Å—Ç–∞—Ç–∫–∞—Ö"""
        critical_info = f"–ö—Ä–∏—Ç–∏—á–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã: {', '.join(critical_sizes)}" if critical_sizes else "–ù–µ—Ç –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤"
        zero_info = f"–ù—É–ª–µ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã: {', '.join(zero_sizes)}" if zero_sizes else "–ù–µ—Ç –Ω—É–ª–µ–≤—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤"
        
        return f"""‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏ #{nm_id}

üì¶ –¢–æ–≤–∞—Ä: {name}
üè∑Ô∏è –ë—Ä–µ–Ω–¥: {brand}
üî¥ {critical_info}
‚ö´ {zero_info}

–í—Ä–µ–º—è: {datetime.now(timezone.utc).strftime('%H:%M:%S')}"""
