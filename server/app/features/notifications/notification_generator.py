"""
Notification Generator –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π S3
–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–±—ã—Ç–∏–π
"""

from datetime import datetime, timezone
from typing import Dict, Any, Optional
from app.utils.timezone import TimezoneUtils


class NotificationGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–±—ã—Ç–∏–π"""
    
    @staticmethod
    def format_currency(amount: float) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞–ª—é—Ç—É —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ –≤–º–µ—Å—Ç–æ –∑–∞–ø—è—Ç—ã—Ö"""
        return f"{amount:,.0f}‚ÇΩ".replace(",", " ")
    
    def generate_notification(self, event_data: Dict[str, Any], user_settings: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–±—ã—Ç–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–æ–æ–±—â–µ
        if not user_settings.get("notifications_enabled", True):
            return None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        event_type = event_data.get("type")
        if not self._is_notification_type_enabled(event_type, user_settings):
            return None
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
        if event_type == "negative_review":
            return self._generate_negative_review_notification(event_data, user_settings)
        elif event_type == "critical_stocks":
            return self._generate_critical_stocks_notification(event_data, user_settings)
        # –î–ª—è –∑–∞–∫–∞–∑–æ–≤ (new_order, order_buyout, order_cancellation, order_return) 
        # –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–µ—Ç–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤ NotificationService
        
        return None
    
    def _is_notification_type_enabled(self, event_type: str, user_settings: Dict[str, Any]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –≤–∫–ª—é—á–µ–Ω –ª–∏ —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        type_mapping = {
            "new_order": "new_orders_enabled",
            "order_buyout": "order_buyouts_enabled",
            "order_cancellation": "order_cancellations_enabled",
            "order_return": "order_returns_enabled",
            "negative_review": "negative_reviews_enabled",
            "critical_stocks": "critical_stocks_enabled"
        }
        
        setting_key = type_mapping.get(event_type)
        if not setting_key:
            return False
        
        return user_settings.get(setting_key, True)
    
    
    def _generate_negative_review_notification(self, event_data: Dict[str, Any], user_settings: Dict[str, Any]) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–º –æ—Ç–∑—ã–≤–µ"""
        review_id = event_data.get("review_id", "N/A")
        rating = event_data.get("rating", 0)
        text = event_data.get("text", "")
        product_name = event_data.get("product_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä")
        order_id = event_data.get("order_id")
        
        title = f"üòû –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–π –æ—Ç–∑—ã–≤ #{review_id}"
        content = self._format_negative_review_content(review_id, rating, text, product_name, order_id)
        
        return {
            "type": "negative_review",
            "user_id": event_data.get("user_id"),
            "review_id": review_id,
            "rating": rating,
            "title": title,
            "content": content,
            "priority": "CRITICAL",
            "grouping_enabled": user_settings.get("grouping_enabled", True),
            "max_group_size": user_settings.get("max_group_size", 5),
            "group_timeout": user_settings.get("group_timeout", 300),
            "generated_at": TimezoneUtils.format_for_user(TimezoneUtils.now_msk())
        }
    
    def _generate_critical_stocks_notification(self, event_data: Dict[str, Any], user_settings: Dict[str, Any]) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –æ—Å—Ç–∞—Ç–∫–∞—Ö"""
        nm_id = event_data.get("nm_id", "N/A")
        # –ù–∞–¥–µ–∂–Ω—ã–π fallback –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
        name = (
            event_data.get("name")
            or event_data.get("product_name")
            or event_data.get("title")
            or f"–¢–æ–≤–∞—Ä {nm_id}"
        )
        critical_sizes = event_data.get("critical_sizes", [])
        zero_sizes = event_data.get("zero_sizes", [])
        
        title = f"‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏ #{nm_id}"
        content = self._format_critical_stocks_content(nm_id, name, critical_sizes, zero_sizes)
        
        return {
            "type": "critical_stocks",
            "user_id": event_data.get("user_id"),
            "nm_id": nm_id,
            "title": title,
            "content": content,
            "priority": "HIGH",
            "grouping_enabled": user_settings.get("grouping_enabled", True),
            "max_group_size": user_settings.get("max_group_size", 5),
            "group_timeout": user_settings.get("group_timeout", 300),
            "generated_at": TimezoneUtils.format_for_user(TimezoneUtils.now_msk())
        }
    
    
    def _format_negative_review_content(self, review_id: int, rating: int, text: str, product_name: str, order_id: Optional[int]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–º –æ—Ç–∑—ã–≤–µ"""
        order_info = f"–ó–∞–∫–∞–∑: #{order_id}" if order_id else "–ó–∞–∫–∞–∑: –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
        
        return f"""üòû –ù–ï–ì–ê–¢–ò–í–ù–´–ô –û–¢–ó–´–í

üì¶ –¢–æ–≤–∞—Ä: {product_name}
‚≠ê –†–µ–π—Ç–∏–Ω–≥: {rating}/5
üí¨ –¢–µ–∫—Å—Ç: "{text[:100]}{'...' if len(text) > 100 else ''}"
üë§ –ê–≤—Ç–æ—Ä: {review_id}
üÜî ID –æ—Ç–∑—ã–≤–∞: {review_id}

‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –æ—Ç–∑—ã–≤ –∏–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º"""
    
    def _format_critical_stocks_content(self, nm_id: int, name: str, critical_sizes: list, zero_sizes: list) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –æ—Å—Ç–∞—Ç–∫–∞—Ö"""
        critical_info = f"–ö—Ä–∏—Ç–∏—á–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã: {', '.join(critical_sizes)}" if critical_sizes else "–ù–µ—Ç –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤"
        zero_info = f"–ù—É–ª–µ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã: {', '.join(zero_sizes)}" if zero_sizes else "–ù–µ—Ç –Ω—É–ª–µ–≤—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤"
        
        return f"""‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ù–´–ï –û–°–¢–ê–¢–ö–ò

üì¶ {name}
üÜî {nm_id}
üìä –û—Å—Ç–∞—Ç–∫–∏: {critical_info}
‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–Ω–æ: {zero_info}"""
    
    def generate_sales_notification(self, event: Dict[str, Any]) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–¥–∞–∂–µ/–≤–æ–∑–≤—Ä–∞—Ç–µ"""
        notification_type = event["type"]
        
        if notification_type == "new_buyout":
            return self._generate_new_buyout_notification(event)
        elif notification_type == "new_return":
            return self._generate_new_return_notification(event)
        elif notification_type == "sale_status_change":
            return self._generate_sale_status_change_notification(event)
        elif notification_type == "sale_cancellation_change":
            return self._generate_sale_cancellation_change_notification(event)
        else:
            return self._generate_unknown_sales_notification(event)
    
    def _generate_new_buyout_notification(self, event: Dict[str, Any]) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –≤—ã–∫—É–ø–µ"""
        return {
            "type": "new_buyout",
            "title": f"üí∞ –í—ã–∫—É–ø #{event.get('order_id', 'N/A')}",
            "content": self._format_new_buyout_content(
                event.get("order_id"),
                event.get("amount"),
                event.get("product_name"),
                event.get("brand"),
                event.get("size")
            ),
            "priority": "HIGH",
            "data": event
        }
    
    def _generate_new_return_notification(self, event: Dict[str, Any]) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –≤–æ–∑–≤—Ä–∞—Ç–µ"""
        return {
            "type": "new_return",
            "title": f"üîÑ –í–æ–∑–≤—Ä–∞—Ç #{event.get('order_id', 'N/A')}",
            "content": self._format_new_return_content(
                event.get("order_id"),
                event.get("amount"),
                event.get("product_name"),
                event.get("brand"),
                event.get("size")
            ),
            "priority": "HIGH",
            "data": event
        }
    
    def _generate_sale_status_change_notification(self, event: Dict[str, Any]) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–¥–∞–∂–∏"""
        return {
            "type": "sale_status_change",
            "title": f"üìä –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω #{event.get('order_id', 'N/A')}",
            "content": self._format_sale_status_change_content(
                event.get("order_id"),
                event.get("product_name"),
                event.get("previous_status"),
                event.get("current_status"),
                event.get("amount")
            ),
            "priority": "MEDIUM",
            "data": event
        }
    
    def _generate_sale_cancellation_change_notification(self, event: Dict[str, Any]) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –æ—Ç–º–µ–Ω—ã –ø—Ä–æ–¥–∞–∂–∏"""
        return {
            "type": "sale_cancellation_change",
            "title": f"‚ùå –û—Ç–º–µ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ #{event.get('order_id', 'N/A')}",
            "content": self._format_sale_cancellation_change_content(
                event.get("order_id"),
                event.get("product_name"),
                event.get("was_cancelled"),
                event.get("is_cancelled"),
                event.get("amount")
            ),
            "priority": "MEDIUM",
            "data": event
        }
    
    def _generate_unknown_sales_notification(self, event: Dict[str, Any]) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–º —Å–æ–±—ã—Ç–∏–∏ –ø—Ä–æ–¥–∞–∂–∏"""
        return {
            "type": "unknown_sales_event",
            "title": "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –ø—Ä–æ–¥–∞–∂–∏",
            "content": f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ: {event.get('type', 'unknown')}",
            "priority": "LOW",
            "data": event
        }
    
    def _format_new_buyout_content(self, order_id: str, amount: float, product_name: str, brand: str, size: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –≤—ã–∫—É–ø–µ"""
        return f"""üí∞ –ù–æ–≤—ã–π –≤—ã–∫—É–ø #{order_id}

üíµ –°—É–º–º–∞: {self.format_currency(amount)}
üì¶ –¢–æ–≤–∞—Ä: {product_name}
üè∑Ô∏è –ë—Ä–µ–Ω–¥: {brand}
üìè –†–∞–∑–º–µ—Ä: {size}

–í—Ä–µ–º—è: {TimezoneUtils.format_time_only(TimezoneUtils.now_msk())}"""
    
    def _format_new_return_content(self, order_id: str, amount: float, product_name: str, brand: str, size: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –≤–æ–∑–≤—Ä–∞—Ç–µ"""
        return f"""üîÑ –ù–æ–≤—ã–π –≤–æ–∑–≤—Ä–∞—Ç #{order_id}

üíµ –°—É–º–º–∞: {self.format_currency(amount)}
üì¶ –¢–æ–≤–∞—Ä: {product_name}
üè∑Ô∏è –ë—Ä–µ–Ω–¥: {brand}
üìè –†–∞–∑–º–µ—Ä: {size}

–í—Ä–µ–º—è: {TimezoneUtils.format_time_only(TimezoneUtils.now_msk())}"""
    
    def _format_sale_status_change_content(self, order_id: str, product_name: str, previous_status: str, current_status: str, amount: float) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–¥–∞–∂–∏"""
        return f"""üìä –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω #{order_id}

üì¶ –¢–æ–≤–∞—Ä: {product_name}
üíµ –°—É–º–º–∞: {self.format_currency(amount)}
üîÑ {previous_status} -> {current_status}

–í—Ä–µ–º—è: {TimezoneUtils.format_time_only(TimezoneUtils.now_msk())}"""
    
    def _format_sale_cancellation_change_content(self, order_id: str, product_name: str, was_cancelled: bool, is_cancelled: bool, amount: float) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –æ—Ç–º–µ–Ω—ã –ø—Ä–æ–¥–∞–∂–∏"""
        status_change = "–æ—Ç–º–µ–Ω–µ–Ω–∞" if is_cancelled else "–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
        return f"""‚ùå –ü—Ä–æ–¥–∞–∂–∞ {status_change} #{order_id}

üì¶ –¢–æ–≤–∞—Ä: {product_name}
üíµ –°—É–º–º–∞: {self.format_currency(amount)}
üîÑ –°—Ç–∞—Ç—É—Å: {'–û—Ç–º–µ–Ω–µ–Ω–∞' if is_cancelled else '–ê–∫—Ç–∏–≤–Ω–∞'}

–í—Ä–µ–º—è: {TimezoneUtils.format_time_only(TimezoneUtils.now_msk())}"""
