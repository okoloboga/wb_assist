"""
Notification Service - –µ–¥–∏–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π S3
"""

import asyncio
import json
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional
from sqlalchemy.orm import Session
from sqlalchemy import func
from contextlib import asynccontextmanager

# –£–¥–∞–ª–µ–Ω—ã –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è
from .crud import (
    NotificationSettingsCRUD,
    NotificationHistoryCRUD,
    OrderStatusHistoryCRUD
)
from app.features.bot_api.formatter import BotMessageFormatter
from app.utils.timezone import TimezoneUtils
from app.features.wb_api.models import WBOrder, WBCabinet, WBReview, WBProduct, WBStock
from app.features.notifications.models import NotificationHistory
from .webhook_sender import WebhookSender

logger = logging.getLogger(__name__)


class NotificationService:
    """–ï–¥–∏–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏"""
    
    def __init__(self, db: Session):
        self.db = db
        self._sync_locks = {}  # {cabinet_id: asyncio.Lock} - –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.message_formatter = BotMessageFormatter()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º CRUD
        self.settings_crud = NotificationSettingsCRUD()
        self.history_crud = NotificationHistoryCRUD()
        self.order_crud = OrderStatusHistoryCRUD()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º WebhookSender
        self.webhook_sender = WebhookSender()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Redis –∫–ª–∏–µ–Ω—Ç
        from ...core.redis import get_redis_client
        self.redis_client = get_redis_client()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º EventDetector
        from .event_detector import EventDetector
        self.event_detector = EventDetector()
    
    @asynccontextmanager
    async def _get_sync_lock(self, cabinet_id: int):
        """–ü–æ–ª—É—á–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–∞–±–∏–Ω–µ—Ç–∞"""
        if cabinet_id not in self._sync_locks:
            self._sync_locks[cabinet_id] = asyncio.Lock()
        
        async with self._sync_locks[cabinet_id]:
            yield
    
    def _is_sync_in_progress(self, cabinet_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∏–¥–µ—Ç –ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–±–∏–Ω–µ—Ç–∞"""
        try:
            if cabinet_id in self._sync_locks:
                return self._sync_locks[cabinet_id].locked()
            return False
        except Exception as e:
            logger.warning(f"Error checking sync status for cabinet {cabinet_id}: {e}")
            return False
    
    async def process_sync_events(
        self, 
        user_id: int, 
        cabinet_id: int,
        current_orders: List[Dict[str, Any]],
        previous_orders: List[Dict[str, Any]],
        current_reviews: List[Dict[str, Any]] = None,
        previous_reviews: List[Dict[str, Any]] = None,
        current_stocks: List[Dict[str, Any]] = None,
        previous_stocks: List[Dict[str, Any]] = None,
        current_sales: List[Dict[str, Any]] = None,
        previous_sales: List[Dict[str, Any]] = None,
    ) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_settings = self.settings_crud.get_user_settings(self.db, user_id)
            if not user_settings:
                user_settings = self.settings_crud.create_default_settings(self.db, user_id)
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            logger.info(f"üîß [process_sync_events] User {user_id} settings: "
                       f"notifications_enabled={user_settings.notifications_enabled}, "
                       f"order_buyouts_enabled={user_settings.order_buyouts_enabled}, "
                       f"order_cancellations_enabled={user_settings.order_cancellations_enabled}, "
                       f"order_returns_enabled={user_settings.order_returns_enabled}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            if not user_settings.notifications_enabled:
                logger.info(f"Notifications disabled for user {user_id}")
                return {"status": "disabled", "notifications_sent": 0}
            
            notifications_sent = 0
            events_processed = []
            
            # 1. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–∫–∞–∑—ã (–Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã + –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞)
            logger.info(f"üîß [process_sync_events] Processing orders: current={len(current_orders)}, previous={len(previous_orders)}")
            order_events = await self._process_order_events(
                user_id, current_orders, previous_orders, user_settings
            )
            logger.info(f"üîß [process_sync_events] Order events found: {len(order_events)}")
            events_processed.extend(order_events)
            
            # 2. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–∑—ã–≤—ã (–Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –æ—Ç–∑—ã–≤—ã)
            if current_reviews and previous_reviews:
                review_events = await self._process_review_events(
                    user_id, current_reviews, previous_reviews, user_settings
                )
                events_processed.extend(review_events)
            
            # 3. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏ (–∫—Ä–∏—Ç–∏—á–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏)
            if current_stocks and previous_stocks:
                stock_events = await self._process_stock_events(
                    user_id, current_stocks, previous_stocks, user_settings
                )
                events_processed.extend(stock_events)
            
            # 4. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ–¥–∞–∂–∏ (–≤—ã–∫—É–ø—ã –∏ –≤–æ–∑–≤—Ä–∞—Ç—ã)
            if current_sales and previous_sales:
                sales_events = await self._process_sales_events(
                    user_id, current_sales, previous_sales, user_settings
                )
                events_processed.extend(sales_events)
            
            # 5. –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å –±–∞—Ç—á–µ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
            if events_processed:
                # –û—á–∏—â–∞–µ–º datetime –æ–±—ä–µ–∫—Ç—ã –¥–ª—è JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
                clean_events = [self._clean_datetime_objects(event) for event in events_processed]
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                for clean_event in clean_events:
                    telegram_text = self._format_notification_for_telegram(clean_event)
                    clean_event["telegram_text"] = telegram_text
                
                # –ë–∞—Ç—á–µ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –≤ Redis
                non_duplicate_events = await self._batch_check_duplicates_in_redis(user_id, clean_events)
                
                if non_duplicate_events:
                    logger.info(f"üì¶ Processing {len(non_duplicate_events)} non-duplicate events for user {user_id}")
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                    successful_notifications = []
                    for clean_event in non_duplicate_events:
                        try:
                            # –ê–¢–û–ú–ê–†–ù–ê–Ø –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
                            webhook_result = await self._send_notification_atomically(
                                user_id=user_id,
                                notification=clean_event
                            )
                            
                            if webhook_result.get("success"):
                                notifications_sent += 1
                                successful_notifications.append(clean_event)
                                logger.info(f"üì¢ Notification sent atomically for user {user_id}: {clean_event.get('type')}")
                            elif webhook_result.get("error") == "Duplicate notification (Redis)":
                                logger.info(f"üö´ Duplicate prevented (Redis) for user {user_id}: {clean_event.get('type')}")
                            elif webhook_result.get("error") == "Duplicate notification (DB)":
                                logger.info(f"üö´ Duplicate prevented (DB) for user {user_id}: {clean_event.get('type')}")
                            else:
                                logger.warning(f"‚ùå Failed to send notification for user {user_id}: {webhook_result.get('error')}")
                                
                        except Exception as e:
                            logger.error(f"‚ùå Error sending notification for user {user_id}: {e}")
                    
                    # –ë–∞—Ç—á–µ–≤–æ–µ –æ—Ç–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Redis
                    if successful_notifications:
                        await self._batch_mark_as_sent_in_redis(user_id, successful_notifications)
                else:
                    logger.info(f"üö´ All {len(clean_events)} events were duplicates for user {user_id}")
            
            return {
                "status": "success",
                "events_processed": len(events_processed),
                "notifications_sent": notifications_sent,
                "events": events_processed
            }
            
        except Exception as e:
            logger.error(f"Error processing sync events for user {user_id}: {e}")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await self._send_error_notification(user_id, "sync_processing_error", str(e))
            return {"status": "error", "error": str(e)}
    
    def _clean_datetime_objects(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """–û—á–∏—Å—Ç–∫–∞ datetime –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
        import datetime
        
        if isinstance(data, dict):
            cleaned = {}
            for key, value in data.items():
                if isinstance(value, datetime.datetime):
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º datetime –≤ ISO —Å—Ç—Ä–æ–∫—É
                    cleaned[key] = value.isoformat()
                elif isinstance(value, dict):
                    cleaned[key] = self._clean_datetime_objects(value)
                elif isinstance(value, list):
                    cleaned[key] = [self._clean_datetime_objects(item) if isinstance(item, dict) else item for item in value]
                else:
                    cleaned[key] = value
            return cleaned
        return data
    
    async def _process_order_events(
        self, 
        user_id: int, 
        current_orders: List[Dict[str, Any]], 
        previous_orders: List[Dict[str, Any]], 
        user_settings
    ) -> List[Dict[str, Any]]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –∑–∞–∫–∞–∑–æ–≤"""
        events = []
        
        logger.info(f"üîß [_process_order_events] User {user_id}: new_orders_enabled={user_settings.new_orders_enabled}")
        
        # –û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã
        if user_settings.new_orders_enabled:
            logger.info(f"üîß [_process_order_events] Detecting new orders...")
            new_order_events = self.event_detector.detect_new_orders(
                user_id, current_orders, previous_orders
            )
            logger.info(f"üîß [_process_order_events] New order events: {len(new_order_events)}")
            events.extend(new_order_events)
        
        # –û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–æ–≤
        status_check_enabled = (user_settings.order_buyouts_enabled or 
                              user_settings.order_cancellations_enabled or 
                              user_settings.order_returns_enabled)
        
        logger.info(f"üîß [_process_order_events] Status change detection enabled: {status_check_enabled}")
        logger.info(f"üîß [_process_order_events] Status settings: buyouts={user_settings.order_buyouts_enabled}, "
                   f"cancellations={user_settings.order_cancellations_enabled}, returns={user_settings.order_returns_enabled}")
        
        if status_check_enabled:
            logger.info(f"üîß [_process_order_events] Detecting status changes...")
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º StatusChangeMonitor –≤–º–µ—Å—Ç–æ EventDetector
            from .status_monitor import StatusChangeMonitor
            status_monitor = StatusChangeMonitor()
            
            # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
            status_changes = status_monitor.track_order_changes(
                user_id, current_orders, self.redis_client
            )
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–∞
            status_change_events = status_monitor.get_status_change_events(status_changes)
            
            logger.info(f"üîß [_process_order_events] Status changes detected: {len(status_changes)}")
            logger.info(f"üîß [_process_order_events] Status change events: {len(status_change_events)}")
            events.extend(status_change_events)
        
        return events
    
    async def _process_review_events(
        self, 
        user_id: int, 
        current_reviews: List[Dict[str, Any]], 
        previous_reviews: List[Dict[str, Any]], 
        user_settings
    ) -> List[Dict[str, Any]]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –æ—Ç–∑—ã–≤–æ–≤"""
        events = []
        
        if user_settings.negative_reviews_enabled:
            # –ü–æ–ª—É—á–∞–µ–º ID –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –æ—Ç–∑—ã–≤–æ–≤
            previous_review_ids = {review["review_id"] for review in previous_reviews}
            
            # –ù–∞—Ö–æ–¥–∏–º –Ω–æ–≤—ã–µ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –æ—Ç–∑—ã–≤—ã (0-3 –∑–≤–µ–∑–¥—ã)
            for review in current_reviews:
                if (review["review_id"] not in previous_review_ids and 
                    review.get("rating", 0) <= 3):
                    
                    event = {
                        "type": "negative_review",
                        "user_id": user_id,
                        "review_id": review["review_id"],
                        "rating": review.get("rating", 0),
                        "text": review.get("text", ""),
                        "product_name": f"–¢–æ–≤–∞—Ä {review.get('nm_id', 'N/A')}",
                        "nm_id": review.get("nm_id"),
                        "user_name": review.get("user_name", ""),
                        "created_date": review.get("created_date"),
                        "detected_at": TimezoneUtils.now_msk()
                    }
                    events.append(event)
        
        return events
    
    async def _process_stock_events(
        self, 
        user_id: int, 
        current_stocks: List[Dict[str, Any]], 
        previous_stocks: List[Dict[str, Any]], 
        user_settings
    ) -> List[Dict[str, Any]]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –æ—Å—Ç–∞—Ç–∫–æ–≤"""
        events = []
        
        if user_settings.critical_stocks_enabled:
            critical_stocks_events = self.event_detector.detect_critical_stocks(
                user_id, current_stocks, previous_stocks
            )
            events.extend(critical_stocks_events)
        
        return events
    
    async def _process_sales_events(
        self,
        user_id: int,
        current_sales: List[Dict[str, Any]],
        previous_sales: List[Dict[str, Any]],
        user_settings
    ) -> List[Dict[str, Any]]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –ø—Ä–æ–¥–∞–∂ (–≤—ã–∫—É–ø–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤)"""
        events = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—ã–∫—É–ø–∞—Ö
        if user_settings.order_buyout_enabled:
            # –ü–æ–ª—É—á–∞–µ–º ID —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ–¥–∞–∂
            previous_sale_ids = {sale.get("sale_id") for sale in previous_sales if sale.get("sale_id")}
            
            # –ù–∞—Ö–æ–¥–∏–º –Ω–æ–≤—ã–µ –≤—ã–∫—É–ø—ã
            for sale in current_sales:
                sale_id = sale.get("sale_id")
                if sale_id and sale_id not in previous_sale_ids:
                    sale_type = sale.get("type")
                    
                    # –í—ã–∫—É–ø—ã
                    if sale_type == "buyout" and user_settings.order_buyout_enabled:
                        event = {
                            "type": "order_buyout",
                            "user_id": user_id,
                            "sale_id": sale_id,
                            "order_id": sale.get("order_id"),
                            "amount": sale.get("amount", 0),
                            "product_name": sale.get("product_name", ""),
                            "brand": sale.get("brand", ""),
                            "size": sale.get("size", ""),
                            "nm_id": sale.get("nm_id"),
                            "sale_date": sale.get("sale_date"),
                            "detected_at": TimezoneUtils.now_msk()
                        }
                        events.append(event)
                    
                    # –í–æ–∑–≤—Ä–∞—Ç—ã
                    elif sale_type == "return" and user_settings.order_return_enabled:
                        event = {
                            "type": "order_return",
                            "user_id": user_id,
                            "sale_id": sale_id,
                            "order_id": sale.get("order_id"),
                            "amount": sale.get("amount", 0),
                            "product_name": sale.get("product_name", ""),
                            "brand": sale.get("brand", ""),
                            "size": sale.get("size", ""),
                            "nm_id": sale.get("nm_id"),
                            "sale_date": sale.get("sale_date"),
                            "detected_at": TimezoneUtils.now_msk()
                        }
                        events.append(event)
        
        return events
    
    # _send_notifications —É–¥–∞–ª–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è webhook —Å–∏—Å—Ç–µ–º–∞
    
    def _format_notification_for_telegram(self, notification: Dict[str, Any]) -> str:
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è Telegram"""
        notification_type = notification.get("type")
        
        # –î–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∑–∞–∫–∞–∑–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        if notification_type in ["new_order", "order_buyout", "order_cancellation", "order_return"]:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–æ–±—ã—Ç–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–Ω–∏–º–∞–µ—Ç format_order_detail
            order_data = self._convert_notification_to_order_format(notification)
            return self.message_formatter.format_order_detail({"order": order_data})
        elif notification_type == "critical_stocks":
            return self.message_formatter.format_critical_stocks_notification(notification)
        elif notification_type == "negative_review":
            return self._format_negative_review_notification(notification)
        else:
            # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤
            return self._format_universal_notification(notification)
    
    def _convert_notification_to_order_format(self, notification: Dict[str, Any]) -> Dict[str, Any]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç –∑–∞–∫–∞–∑–∞ –¥–ª—è format_order_detail"""
        notification_type = notification.get("type")
        nm_id = notification.get("nm_id")
        order_id = notification.get("order_id")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –∑–∞–∫–∞–∑–∞ (–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º UTC –≤ –ú–°–ö –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        order_date = notification.get("order_date")
        if order_date:
            # –ï—Å–ª–∏ order_date –≤ UTC, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ú–°–ö
            if isinstance(order_date, str) and '+00:00' in order_date:
                from datetime import datetime
                dt = datetime.fromisoformat(order_date.replace('Z', '+00:00'))
                msk_dt = TimezoneUtils.to_msk(dt)
                order_date = msk_dt.isoformat()
        
        # –ë–∞–∑–æ–≤—ã–µ –ø–æ–ª—è –∏–∑ —Å–æ–±—ã—Ç–∏—è
        order_data = {
            "id": order_id or notification.get("sale_id", "N/A"),
            "order_id": order_id or "N/A",
            "date": order_date or notification.get("sale_date", notification.get("detected_at", "")),
            "status": self._get_status_from_notification_type(notification_type),
            "nm_id": nm_id or "N/A",
            "product_name": notification.get("product_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
            "article": notification.get("article", ""),
            "size": notification.get("size", ""),
            "barcode": notification.get("barcode", ""),
            "total_price": notification.get("amount", 0),
            "spp_percent": 0,
            "customer_price": 0,
            "discount_percent": 0,
            "warehouse_from": notification.get("warehouse_from", ""),
            "warehouse_to": notification.get("warehouse_to", ""),
            "sales_periods": {},
            "orders_stats": {},
            "avg_rating": 0,
            "reviews_count": 0,
            "rating_distribution": {},
            "stocks": {}
        }
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ nm_id, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç - –ø–æ order_id
        try:
            from ..wb_api.models import WBOrder, WBProduct, WBReview, WBStock
            from sqlalchemy import func
            
            # –ò—â–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            order_in_db = None
            if order_id and order_id != "N/A":
                order_in_db = self.db.query(WBOrder).filter(
                    WBOrder.order_id == str(order_id)
                ).first()
            
            # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –∑–∞–∫–∞–∑, –ø–æ–ª—É—á–∞–µ–º nm_id
            if order_in_db:
                nm_id_from_db = order_in_db.nm_id
                cabinet_id = order_in_db.cabinet_id
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞
                product = self.db.query(WBProduct).filter(
                    WBProduct.cabinet_id == cabinet_id,
                    WBProduct.nm_id == nm_id_from_db
                ).first()
                
                if product:
                    order_data.update({
                        "nm_id": nm_id_from_db,
                        "product_name": product.name or order_data["product_name"],
                        "article": order_data.get("article", ""),
                        "avg_rating": product.rating or 0,
                        "image_url": product.image_url,  # ‚Üê –î–û–ë–ê–í–õ–ï–ù–û!
                        "total_price": order_in_db.total_price or order_data["total_price"],
                        "spp_percent": order_in_db.spp_percent or 0,
                        "customer_price": order_in_db.customer_price or 0,
                        "discount_percent": order_in_db.discount_percent or 0,
                        "warehouse_from": order_in_db.warehouse_from or "",
                        "warehouse_to": order_in_db.warehouse_to or "",
                        "size": order_in_db.size or order_data["size"],
                        "barcode": order_in_db.barcode or order_data["barcode"]
                    })
                
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤
                reviews_count = self.db.query(func.count(WBReview.id)).filter(
                    WBReview.cabinet_id == cabinet_id,
                    WBReview.nm_id == nm_id_from_db
                ).scalar() or 0
                order_data["reviews_count"] = reviews_count
                
                # –ü–æ–ª—É—á–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏
                stocks = self.db.query(WBStock).filter(
                    WBStock.cabinet_id == cabinet_id,
                    WBStock.nm_id == nm_id_from_db
                ).all()
                
                stocks_dict = {}
                for stock in stocks:
                    size = stock.size or "ONE SIZE"
                    quantity = stock.quantity or 0
                    if size in stocks_dict:
                        stocks_dict[size] += quantity
                    else:
                        stocks_dict[size] = quantity
                order_data["stocks"] = stocks_dict
                
                # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º —Å–ª–æ–∂–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                # —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å –ø–∞—Ä—Å–∏–Ω–≥–æ–º Markdown
                order_data["sales_periods"] = {}
                order_data["orders_stats"] = {}
                order_data["rating_distribution"] = {}
                
                logger.info(f"‚úÖ Enhanced notification data for order {order_id}: nm_id={nm_id_from_db}, product={product.name if product else 'N/A'}")
            else:
                logger.warning(f"‚ùå Order {order_id} not found in database for notification enhancement")
                
        except Exception as e:
            logger.warning(f"Could not fetch additional data for notification: {e}")
        
        return order_data
    
    def _get_status_from_notification_type(self, notification_type: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ –∏–∑ —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        status_mapping = {
            "new_order": "active",
            "order_buyout": "buyout",
            "order_cancellation": "canceled",
            "order_return": "return"
        }
        return status_mapping.get(notification_type, "unknown")
    
    def _format_negative_review_notification(self, notification: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–º –æ—Ç–∑—ã–≤–µ"""
        try:
            rating = notification.get("rating", 0)
            text = notification.get("text", "")
            product_name = notification.get("product_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä")
            nm_id = notification.get("nm_id", "N/A")
            user_name = notification.get("user_name", "–ê–Ω–æ–Ω–∏–º")
            
            message_text = (
                f"üòû **–ù–ï–ì–ê–¢–ò–í–ù–´–ô –û–¢–ó–´–í**\n\n"
                f"‚≠ê –û—Ü–µ–Ω–∫–∞: {rating}/5\n"
                f"üìù –¢–µ–∫—Å—Ç: {text[:200]}{'...' if len(text) > 200 else ''}\n"
                f"üì¶ –¢–æ–≤–∞—Ä: {product_name}\n"
                f"üÜî ID: {nm_id}\n"
                f"üë§ –û—Ç: {user_name}\n\n"
                f"üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –æ—Ç–∑—ã–≤"
            )
            
            return message_text
            
        except Exception as e:
            logger.error(f"Error formatting negative review notification: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–∑—ã–≤–µ"
    
    def _format_universal_notification(self, notification: Dict[str, Any]) -> str:
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –¥–µ—Ç–∞–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
        notification_type = notification.get("type")
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤ (–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å)
        if notification_type == "negative_review":
            rating = notification.get("rating", 0)
            text = notification.get("text", "")
            product_name = notification.get("product_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä")
            order_id = notification.get("order_id", "N/A")
            order_info = f"–ó–∞–∫–∞–∑: #{order_id}" if order_id != "N/A" else "–ó–∞–∫–∞–∑: –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
            time_str = TimezoneUtils.format_time_only(TimezoneUtils.now_msk())
        
            return f"""üòû –ù–ï–ì–ê–¢–ò–í–ù–´–ô –û–¢–ó–´–í

‚≠ê –û—Ü–µ–Ω–∫–∞: {rating}/5
üìù –¢–µ–∫—Å—Ç: {text}
üì¶ –¢–æ–≤–∞—Ä: {product_name}
üõí {order_info}

–í—Ä–µ–º—è: {time_str}"""
        
        # –î–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∑–∞–∫–∞–∑–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        return self._format_detailed_order_notification(notification)
    
    def _format_detailed_order_notification(self, notification: Dict[str, Any]) -> str:
        """–î–µ—Ç–∞–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–µ (–∫–∞–∫ –≤ –º–µ–Ω—é)"""
        notification_type = notification.get("type")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
        status_map = {
            "new_order": "–ù–û–í–´–ô –ó–ê–ö–ê–ó",
            "order_buyout": "–ó–ê–ö–ê–ó –í–´–ö–£–ü–õ–ï–ù", 
            "order_cancellation": "–ó–ê–ö–ê–ó –û–¢–ú–ï–ù–ï–ù",
            "order_return": "–ó–ê–ö–ê–ó –í–û–ó–í–†–ê–©–ï–ù"
        }
        
        status = status_map.get(notification_type, "–ó–ê–ö–ê–ó")
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        order_id = notification.get("order_id", notification.get("id", "N/A"))
        order_date = self._format_datetime(notification.get("date", notification.get("order_date", "")))
        brand = notification.get("brand", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        product_name = notification.get("product_name", notification.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"))
        nm_id = notification.get("nm_id", "N/A")
        supplier_article = notification.get("supplier_article", notification.get("article", ""))
        size = notification.get("size", "")
        barcode = notification.get("barcode", "")
        warehouse_from = notification.get("warehouse_from", "")
        warehouse_to = notification.get("warehouse_to", "")
        
        # –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        order_amount = notification.get("amount", notification.get("total_price", 0))
        spp_percent = notification.get("spp_percent", 0)
        customer_price = notification.get("customer_price", 0)
        # –õ–æ–≥–∏—Å—Ç–∏–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
        dimensions = notification.get("dimensions", "")
        volume_liters = notification.get("volume_liters", 0)
        warehouse_rate_per_liter = notification.get("warehouse_rate_per_liter", 0)
        warehouse_rate_extra = notification.get("warehouse_rate_extra", 0)
        
        # –†–µ–π—Ç–∏–Ω–≥–∏ –∏ –æ—Ç–∑—ã–≤—ã
        rating = notification.get("rating", 0)
        reviews_count = notification.get("reviews_count", 0)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        sales_periods = notification.get("sales_periods", {})
        
        # –û—Å—Ç–∞—Ç–∫–∏
        stocks = notification.get("stocks", {})
        stock_days = notification.get("stock_days", {})
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–æ–º –∂–µ —Ñ–æ—Ä–º–∞—Ç–µ, —á—Ç–æ –∏ –≤ –º–µ–Ω—é
        message = f"üßæ {status} [#{order_id}] {order_date}\n\n"
        message += f"‚úè {product_name}\n"
        message += f"üÜî {nm_id} / {supplier_article} / ({size})\n"
        if barcode:
            message += f"üéπ {barcode}\n"
        message += f"üöõ {warehouse_from} ‚ü∂ {warehouse_to}\n"
        message += f"üí∞ –¶–µ–Ω–∞ –∑–∞–∫–∞–∑–∞: {order_amount:,.0f}‚ÇΩ\n"
        
        # –£—Å–ª–æ–≤–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª–µ–π
        if spp_percent or customer_price:
            message += f"üõç –°–ü–ü: {spp_percent}% (–¶–µ–Ω–∞ –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è: {customer_price:,.0f}‚ÇΩ)\n"
        # –õ–æ–≥–∏—Å—Ç–∏–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
        if dimensions or volume_liters:
            message += f"        –ì–∞–±–∞—Ä–∏—Ç—ã: {dimensions}. ({volume_liters}–ª.)\n"
        if warehouse_rate_per_liter or warehouse_rate_extra:
            message += f"        –¢–∞—Ä–∏—Ñ —Å–∫–ª–∞–¥–∞: {warehouse_rate_per_liter:,.1f}‚ÇΩ –∑–∞ 1–ª. | {warehouse_rate_extra:,.1f}‚ÇΩ –∑–∞ –ª. —Å–≤—ã—à–µ)\n"
        if rating or reviews_count:
            message += f"üåü –û—Ü–µ–Ω–∫–∞: {rating}\n"
        message += f"üí¨ –û—Ç–∑—ã–≤—ã: {reviews_count}\n"
        
        # –ü—Ä–æ–¥–∞–∂–∏
        if sales_periods and any(sales_periods.values()):
            message += f"üìñ –ü—Ä–æ–¥–∞–∂ –∑–∞ 7 / 14 / 30 –¥–Ω–µ–π:\n"
            message += f"        {sales_periods.get('7_days', 0)} | {sales_periods.get('14_days', 0)} | {sales_periods.get('30_days', 0)} —à—Ç.\n"
        
        # –û—Å—Ç–∞—Ç–∫–∏
        if stocks and any(stocks.values()):
            message += f"üì¶ –û—Å—Ç–∞—Ç–æ–∫:\n"
            for size in ["L", "M", "S", "XL"]:
                stock_count = stocks.get(size, 0)
                stock_days_count = stock_days.get(size, 0)
                if stock_count > 0 or stock_days_count > 0:
                    message += f"        {size} ({stock_count} —à—Ç.) ‚âà –Ω–∞ {stock_days_count} –¥–Ω.\n"
        
        return message
    
    def _format_datetime(self, datetime_str: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏"""
        try:
            if not datetime_str:
                return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            
            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ú–°–ö
            from datetime import datetime
            dt = datetime.fromisoformat(datetime_str.replace('Z', '+00:00'))
            msk_dt = TimezoneUtils.to_msk(dt)
            
            return msk_dt.strftime("%d.%m.%Y %H:%M")
        except Exception:
            return datetime_str
    
    # –î—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –º–µ—Ç–æ–¥—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π _format_universal_notification
    
    async def _send_error_notification(self, user_id: int, error_type: str, error_message: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            # –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –æ—à–∏–±–∫–∏
            error_event = {
                "type": "system_error",
                "user_id": user_id,
                "data": {
                    "type": error_type,
                    "message": error_message,
                    "timestamp": TimezoneUtils.now_msk().isoformat()
                },
                "priority": "HIGH"
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            self.history_crud.create_notification(self.db, {
                "user_id": user_id,
                "notification_type": "system_error",
                "priority": "HIGH",
                "title": "–û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã",
                "content": error_message,
                "sent_at": TimezoneUtils.now_msk(),
                "status": "pending"
            })
            
            logger.error(f"üì¢ Error notification sent to user {user_id}: {error_type} - {error_message}")
            
        except Exception as e:
            logger.error(f"Failed to send error notification: {e}")
    
    
    async def get_new_events(
        self, 
        user_id: int, 
        last_check: datetime
    ) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –º–æ–º–µ–Ω—Ç–∞ last_check"""
        try:
            events = []
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–∞–±–∏–Ω–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            from app.features.wb_api.crud_cabinet_users import CabinetUserCRUD
            cabinet_user_crud = CabinetUserCRUD()
            cabinet_ids = cabinet_user_crud.get_user_cabinets(self.db, user_id)
            
            if not cabinet_ids:
                return events
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏–¥–µ—Ç –ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–ª—è –∫–∞–±–∏–Ω–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            sync_in_progress = False
            for cabinet_id in cabinet_ids:
                if self._is_sync_in_progress(cabinet_id):
                    logger.info(f"üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–±–∏–Ω–µ—Ç–∞ {cabinet_id} –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º webhook –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    sync_in_progress = True
                    break
            
            if sync_in_progress:
                return []  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, —á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã
            new_orders = await self._get_new_orders(user_id, cabinet_ids, last_check)
            events.extend(new_orders)
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –æ—Ç–∑—ã–≤—ã (0-3 –∑–≤–µ–∑–¥—ã)
            new_reviews = await self._get_new_reviews(user_id, cabinet_ids, last_check)
            events.extend(new_reviews)
            
            # –ü–æ–ª—É—á–∞–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å—Ç–∞—Ç–∫–∏
            critical_stocks = await self._get_critical_stocks(user_id, cabinet_ids, last_check)
            events.extend(critical_stocks)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–∫–∞–∑–æ–≤
            status_changes = await self._get_status_changes(user_id, cabinet_ids, last_check)
            events.extend(status_changes)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            sync_completed_events = await self._get_sync_completed_events(user_id, cabinet_ids, last_check)
            events.extend(sync_completed_events)
            
            return events
            
        except Exception as e:
            logger.error(f"Error getting new events for user {user_id}: {e}")
            return []
    
    async def _get_sync_completed_events(
        self, 
        user_id: int, 
        cabinet_ids: List[int], 
        last_check: datetime
    ) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        try:
            events = []
            
            # –ò—â–µ–º —Å–æ–±—ã—Ç–∏—è sync_completed –≤ NotificationHistory –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            from app.features.notifications.models import NotificationHistory
            
            # –î–ª—è sync_completed —Å–æ–±—ã—Ç–∏–π –∏—â–µ–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞, 
            # —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            from datetime import timedelta
            sync_search_start = TimezoneUtils.now_msk() - timedelta(hours=24)
            
            sync_events = self.db.query(NotificationHistory).filter(
                NotificationHistory.notification_type == "sync_completed",
                NotificationHistory.user_id == user_id,
                NotificationHistory.created_at > sync_search_start
            ).all()
            
            logger.info(f"üîç Found {len(sync_events)} sync_completed events for user {user_id}")
            
            for event in sync_events:
                try:
                    # –ü–∞—Ä—Å–∏–º content –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è cabinet_id
                    import json
                    content_data = json.loads(event.content) if event.content else {}
                    cabinet_id = content_data.get('cabinet_id')
                    
                    # –ü–∞—Ä—Å–∏–º content –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è is_first_sync
                    content_data = json.loads(event.content) if event.content else {}
                    is_first_sync = content_data.get('is_first_sync', False)
                    
                    events.append({
                        "type": "sync_completed",
                        "user_id": user_id,
                        "created_at": event.created_at.isoformat(),
                        "data": {
                            "cabinet_id": cabinet_id,
                            "message": "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ",
                            "timestamp": event.created_at.isoformat(),
                            "is_first_sync": is_first_sync
                        }
                    })
                    logger.info(f"üì° Found sync_completed event for cabinet {cabinet_id}")
                        
                except Exception as e:
                    logger.error(f"Error processing sync_completed event {event.id}: {e}")
                    continue
            
            return events
            
        except Exception as e:
            logger.error(f"Error getting sync completed events: {e}")
            return []
    
    async def _get_new_orders(self, user_id: int, cabinet_ids: List[int], last_check: datetime) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            from sqlalchemy import desc, and_

            # –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–µ—Ä–≤–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            cabinets = self.db.query(WBCabinet).filter(WBCabinet.id.in_(cabinet_ids)).all()
            if not cabinets:
                return []
            
            for cabinet in cabinets:
                if not cabinet.last_sync_at:
                    logger.info(f"Skipping order notifications for cabinet {cabinet.id} - first sync")
                    return []

            # –£–ü–†–û–©–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê: –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã, –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –≤ –∞—Ç–æ–º–∞—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
            orders = self.db.query(WBOrder).filter(
                and_(
                    WBOrder.cabinet_id.in_(cabinet_ids),
                    WBOrder.created_at > last_check  # –ò—Å–ø–æ–ª—å–∑—É–µ–º created_at - –≤—Ä–µ–º—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ë–î
                )
            ).all()
            
            events = []
            for order in orders:
                # –û–±–æ–≥–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä–∞
                product = self.db.query(WBProduct).filter(WBProduct.nm_id == order.nm_id).first()
                rating = (product.rating or 0.0) if product else 0.0
                reviews_cnt = (product.reviews_count or 0) if product else 0
                image_url = product.image_url if product and getattr(product, "image_url", None) else None
                
                # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                if image_url:
                    logger.info(f"üñºÔ∏è Found image for order {order.order_id}: {image_url}")
                else:
                    logger.warning(f"‚ö†Ô∏è No image found for order {order.order_id}, product: {product}")
                # –ë—ã—Å—Ç—Ä—ã–π —Ç–æ—á–Ω—ã–π —Ä–∞—Å—á—ë—Ç –∏–∑ WBReview (–ø–µ—Ä–µ–±–∏–≤–∞–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥, –µ—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–∑—ã–≤—ã)
                try:
                    avg_cnt = self.db.query(func.avg(WBReview.rating), func.count(WBReview.id)).filter(
                        WBReview.cabinet_id == order.cabinet_id,
                        WBReview.nm_id == order.nm_id,
                        WBReview.rating.isnot(None)
                    ).one()
                    avg_rating = avg_cnt[0] or 0.0
                    cnt_reviews = avg_cnt[1] or 0
                    if cnt_reviews > 0:
                        rating = round(float(avg_rating), 1)
                        reviews_cnt = int(cnt_reviews)
                except Exception:
                    pass
                order_data = {
                    "id": order.id,
                    "order_id": order.order_id,
                    "date": order.order_date.isoformat() if order.order_date else None,
                    "order_date": order.order_date.isoformat() if order.order_date else None,
                    "amount": order.total_price or 0,
                    "total_price": order.total_price or 0,
                    "product_name": order.name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
                    "name": order.name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
                    "brand": order.brand or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
                    "nm_id": order.nm_id,
                    "article": order.article or "",
                    "supplier_article": order.article or "",
                    "size": order.size or "",
                    "barcode": order.barcode or "",
                    "warehouse_from": order.warehouse_from or "",
                    "warehouse_to": order.warehouse_to or "",
                    "spp_percent": order.spp_percent or 0.0,
                    "customer_price": order.customer_price or 0.0,
                    # –õ–æ–≥–∏—Å—Ç–∏–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
                    "dimensions": getattr(order, 'dimensions', ''),
                    "volume_liters": getattr(order, 'volume_liters', 0),
                    "warehouse_rate_per_liter": getattr(order, 'warehouse_rate_per_liter', 0),
                    "warehouse_rate_extra": getattr(order, 'warehouse_rate_extra', 0),
                    "rating": rating,
                    "reviews_count": reviews_cnt,
                    "sales_periods": {},
                    "stocks": {},
                    "stock_days": {},
                    "status": order.status,
                    "image_url": image_url,
                }
                telegram_text = self.message_formatter.format_order_detail({"order": order_data})

                events.append({
                    "type": "new_order",
                    "user_id": user_id,
                    "data": order_data,
                    "telegram_text": telegram_text,
                    "created_at": order.created_at or TimezoneUtils.now_msk(),
                    "priority": "MEDIUM"
                })
            
            return events
            
        except Exception as e:
            logger.error(f"Error getting new orders: {e}")
            return []
    
    async def _get_new_reviews(self, user_id: int, cabinet_ids: List[int], last_check: datetime) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ (0-3 –∑–≤–µ–∑–¥—ã) —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–±–∏–Ω–µ—Ç–∞
            # –ï—Å–ª–∏ last_sync_at –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –æ—á–µ–Ω—å —Å—Ç–∞—Ä—ã–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            cabinets = self.db.query(WBCabinet).filter(WBCabinet.id.in_(cabinet_ids)).all()
            for cabinet in cabinets:
                if not cabinet.last_sync_at:
                    logger.info(f"Skipping review notifications for cabinet {cabinet.id} - first sync")
                    return []
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
                from datetime import timedelta
                time_diff = TimezoneUtils.now_msk() - cabinet.last_sync_at
                if time_diff > timedelta(hours=24):
                    logger.info(f"Skipping review notifications for cabinet {cabinet.id} - long break since last sync")
                    return []
            
            # –ü–æ–ª—É—á–∞–µ–º —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –æ—Ç–∑—ã–≤–∞—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
            from sqlalchemy import and_
            sent_notifications = self.db.query(NotificationHistory).filter(
                and_(
                    NotificationHistory.user_id == user_id,
                    NotificationHistory.notification_type == 'negative_review',
                    NotificationHistory.sent_at > last_check - timedelta(hours=24)
                )
            ).all()
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º review_id –∏–∑ content (JSON —Å—Ç—Ä–æ–∫–∞)
            sent_review_ids = set()
            for n in sent_notifications:
                try:
                    import json
                    content_data = json.loads(n.content)
                    if "review_id" in content_data:
                        sent_review_ids.add(content_data["review_id"])
                except (json.JSONDecodeError, KeyError):
                    continue
            
            reviews = self.db.query(WBReview).filter(
                and_(
                    WBReview.cabinet_id.in_(cabinet_ids),
                    WBReview.created_date > last_check,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–∑—ã–≤–∞, –∞ –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                    ~WBReview.review_id.in_(sent_review_ids)  # –ò—Å–∫–ª—é—á–∞–µ–º —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ
                )
            ).all()
            
            events = []
            for review in reviews:
                # –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏—è –¢–û–õ–¨–ö–û –¥–ª—è –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ (0-3 –∑–≤–µ–∑–¥—ã)
                if review.rating and review.rating <= 3:
                    events.append({
                        "type": "negative_review",
                        "user_id": user_id,
                        "data": {
                            "review_id": review.review_id,
                            "rating": review.rating,
                            "text": review.text,
                            "product_name": f"–¢–æ–≤–∞—Ä {review.nm_id}",  # –ú–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å, –ø–æ–ª—É—á–∏–≤ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
                            "user_name": review.user_name,
                            "created_at": review.created_date.isoformat() if review.created_date else None
                        },
                        "created_at": review.created_date or TimezoneUtils.now_msk(),
                        "priority": "HIGH"
                    })
                # –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–∑—ã–≤—ã (4-5 –∑–≤–µ–∑–¥) –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –Ω—É–∂–Ω—ã
            
            return events
            
        except Exception as e:
            logger.error(f"Error getting new reviews: {e}")
            return []
    
    async def _get_critical_stocks(self, user_id: int, cabinet_ids: List[int], last_check: datetime) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –º–µ–∂—Å–∫–ª–∞–¥—Å–∫–∏—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            from sqlalchemy import and_
            from datetime import timedelta
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–±–∏–Ω–µ—Ç–∞
            cabinets = self.db.query(WBCabinet).filter(WBCabinet.id.in_(cabinet_ids)).all()
            for cabinet in cabinets:
                if not cabinet.last_sync_at:
                    logger.info(f"Skipping critical stocks notifications for cabinet {cabinet.id} - first sync")
                    return []
            
            # –£–ü–†–û–©–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê: –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –≤ –∞—Ç–æ–º–∞—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
            
            critical_threshold = 2
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ (–¥–æ last_check)
            previous_stocks = self.db.query(WBStock).filter(
                and_(
                    WBStock.cabinet_id.in_(cabinet_ids),
                    WBStock.updated_at <= last_check
                )
            ).all()
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ (–ø–æ—Å–ª–µ last_check)
            current_stocks = self.db.query(WBStock).filter(
                and_(
                    WBStock.cabinet_id.in_(cabinet_ids),
                    WBStock.updated_at > last_check
                )
            ).all()
            
            if not current_stocks:
                return []
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ—Å—Ç–∞—Ç–∫–∏ –ø–æ —Ç–æ–≤–∞—Ä–∞–º –∏ —Ä–∞–∑–º–µ—Ä–∞–º
            def group_stocks_by_product(stocks):
                grouped = {}
                for stock in stocks:
                    key = (stock.nm_id, stock.size or "")
                    if key not in grouped:
                        grouped[key] = []
                    grouped[key].append(stock)
                return grouped
            
            prev_grouped = group_stocks_by_product(previous_stocks)
            curr_grouped = group_stocks_by_product(current_stocks)
            
            # –ù–∞—Ö–æ–¥–∏–º —Ç–æ–≤–∞—Ä—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º —É–º–µ–Ω—å—à–µ–Ω–∏–µ–º –æ—Å—Ç–∞—Ç–∫–æ–≤
            critical_events = []
            for (nm_id, size), current_stock_list in curr_grouped.items():
                # –°—É–º–º–∏—Ä—É–µ–º –æ—Å—Ç–∞—Ç–∫–∏ –ø–æ –≤—Å–µ–º —Å–∫–ª–∞–¥–∞–º –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                current_total = sum(stock.quantity or 0 for stock in current_stock_list)
                
                # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                prev_stock_list = prev_grouped.get((nm_id, size), [])
                previous_total = sum(stock.quantity or 0 for stock in prev_stock_list)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ —É–º–µ–Ω—å—à–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ (–¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –≤ –∞—Ç–æ–º–∞—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ)
                if (previous_total > critical_threshold and 
                    current_total <= critical_threshold and 
                    current_total < previous_total):
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
                    product = self.db.query(WBProduct).filter(
                        WBProduct.nm_id == nm_id
                    ).first()
                    
                    critical_events.append({
                    "type": "critical_stocks",
                    "user_id": user_id,
                        "created_at": TimezoneUtils.now_msk(),
                    "data": {
                        "nm_id": nm_id,
                            "name": product.name if product else f"–¢–æ–≤–∞—Ä {nm_id}",
                            "brand": product.brand if product else "",
                            "size": size,
                            "previous_quantity": previous_total,
                            "current_quantity": current_total,
                            "decreased_by": previous_total - current_total,
                            "detected_at": TimezoneUtils.now_msk()
                        }
                    })
            
            return critical_events
            
        except Exception as e:
            logger.error(f"Error getting critical stocks: {e}")
            return []
    
    async def _get_status_changes(self, user_id: int, cabinet_ids: List[int], last_check: datetime) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–∫–∞–∑–æ–≤ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            from sqlalchemy import and_
            from datetime import timedelta
            
            # –£–ü–†–û–©–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê: –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –≤ –∞—Ç–æ–º–∞—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ —Å—Ç–∞—Ç—É—Å–∞ (–¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –≤ –∞—Ç–æ–º–∞—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ)
            orders = self.db.query(WBOrder).filter(
                WBOrder.cabinet_id.in_(cabinet_ids),
                WBOrder.updated_at > last_check,
                WBOrder.status.in_(['buyout', 'canceled', 'return'])
            ).all()
            
            events = []
            for order in orders:
                if order.status == 'buyout':
                    event_type = "order_buyout"
                    priority = "MEDIUM"
                elif order.status == 'canceled':
                    event_type = "order_cancellation"
                    priority = "HIGH"
                elif order.status == 'return':
                    event_type = "order_return"
                    priority = "HIGH"
                else:
                    continue
                
                # –ü–æ–ª—É—á–∞–µ–º image_url –∏–∑ —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
                image_url = None
                try:
                    product = self.db.query(WBProduct).filter(
                        and_(
                            WBProduct.cabinet_id == order.cabinet_id,
                            WBProduct.nm_id == order.nm_id
                        )
                    ).first()
                    if product:
                        image_url = product.image_url
                except Exception as e:
                    logger.error(f"Error getting image_url for order {order.order_id}: {e}")
                
                events.append({
                    "type": event_type,
                    "user_id": user_id,
                    "data": {
                        "order_id": order.order_id,
                        "id": order.order_id,  # –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å format_order_detail
                        "date": order.order_date.isoformat() if order.order_date else None,
                        "amount": order.total_price,
                        "product_name": order.name,
                        "brand": order.brand,
                        "nm_id": order.nm_id,
                        "article": order.article or "",
                        "supplier_article": order.article or "",
                        "size": order.size or "",
                        "barcode": order.barcode or "",
                        "warehouse_from": order.warehouse_from or "",
                        "warehouse_to": order.warehouse_to or "",
                        "spp_percent": order.spp_percent or 0.0,
                        "customer_price": order.customer_price or 0.0,
                        # –õ–æ–≥–∏—Å—Ç–∏–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
                        "image_url": image_url,  # –î–æ–±–∞–≤–ª—è–µ–º image_url
                        "status": order.status,
                        "updated_at": order.updated_at.isoformat() if order.updated_at else None,
                        "created_at": order.created_at.isoformat() if order.created_at else None,
                        "rating": 0,  # –ü–æ–ª—É—á–∞—Ç—å –∏–∑ —Ç–æ–≤–∞—Ä–∞
                        "reviews_count": 0,  # –ü–æ–ª—É—á–∞—Ç—å –∏–∑ —Ç–æ–≤–∞—Ä–∞
                        "sales_periods": {},  # –ü–æ–ª—É—á–∞—Ç—å –∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                        "stocks": {},  # –ü–æ–ª—É—á–∞—Ç—å –∏–∑ –æ—Å—Ç–∞—Ç–∫–æ–≤
                        "stock_days": {}  # –ü–æ–ª—É—á–∞—Ç—å –∏–∑ –æ—Å—Ç–∞—Ç–∫–æ–≤
                    },
                    "created_at": order.updated_at or TimezoneUtils.now_msk(),
                    "priority": priority
                })
            
            return events
            
        except Exception as e:
            logger.error(f"Error getting status changes: {e}")
            return []

    def _save_notification_to_history(
        self, 
        user_id: int, 
        notification: Dict[str, Any], 
        result: Dict[str, Any]
    ):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            import json
            import uuid
            from datetime import datetime
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            notification_type = notification.get("type")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
            if notification_type in ["new_order", "order_buyout", "order_cancellation", "order_return"]:
                unique_key = notification.get("order_id", notification.get("data", {}).get("order_id", "unknown"))
            elif notification_type == "negative_review":
                unique_key = notification.get("review_id", notification.get("data", {}).get("review_id", "unknown"))
            elif notification_type == "critical_stocks":
                unique_key = notification.get("nm_id", notification.get("data", {}).get("nm_id", "unknown"))
            else:
                unique_key = uuid.uuid4().hex[:8]
            
            # –î–æ–±–∞–≤–ª—è–µ–º timestamp –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ ID
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            notification_id = f"notif_{notification_type}_{unique_key}_{timestamp}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            existing = self.db.query(NotificationHistory).filter(
                NotificationHistory.id == notification_id
            ).first()
            
            if existing:
                logger.warning(f"‚ö†Ô∏è Notification {notification_id} already exists, skipping")
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
            content_data = {
                "order_id": notification.get("order_id", notification.get("data", {}).get("order_id")),
                "review_id": notification.get("review_id", notification.get("data", {}).get("review_id")),
                "nm_id": notification.get("nm_id", notification.get("data", {}).get("nm_id")),
                "type": notification_type,
                "timestamp": TimezoneUtils.now_msk().isoformat()
            }
            
            notification_data = {
                "id": notification_id,
                "user_id": user_id,
                "notification_type": notification_type,
                "priority": notification.get("priority", "MEDIUM"),
                "title": f"Notification: {notification_type}",
                "content": json.dumps(content_data),  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ JSON
                "sent_at": TimezoneUtils.to_utc(TimezoneUtils.now_msk()),
                "status": "delivered" if result.get("success") else "failed"
            }
            
            self.history_crud.create_notification(self.db, notification_data)
            logger.info(f"üíæ Saved notification to history: {notification_id}")
            
        except Exception as e:
            logger.error(f"Error saving notification to history: {e}")
            # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
            try:
                self.db.rollback()
            except Exception as rollback_error:
                logger.error(f"Error during rollback: {rollback_error}")
    
    def _settings_to_dict(self, user_settings) -> Dict[str, Any]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ —Å–ª–æ–≤–∞—Ä—å"""
        return {
            "notifications_enabled": user_settings.notifications_enabled,
            "new_orders_enabled": user_settings.new_orders_enabled,
            "order_buyouts_enabled": user_settings.order_buyouts_enabled,
            "order_cancellations_enabled": user_settings.order_cancellations_enabled,
            "order_returns_enabled": user_settings.order_returns_enabled,
            "negative_reviews_enabled": user_settings.negative_reviews_enabled,
            "critical_stocks_enabled": user_settings.critical_stocks_enabled,
            "grouping_enabled": user_settings.grouping_enabled,
            "max_group_size": user_settings.max_group_size,
            "group_timeout": user_settings.group_timeout
        }
    
    async def send_test_notification(
        self, 
        user_id: int, 
        notification_type: str, 
        test_data: Dict[str, Any],
        bot_webhook_url: str
    ) -> Dict[str, Any]:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            notification_type: –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            test_data: –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            bot_webhook_url: URL webhook –±–æ—Ç–∞
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        """
        try:
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            test_notification = self._create_test_notification(
                notification_type, 
                test_data
            )
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è Telegram
            formatted_message = self._format_notification_for_telegram(test_notification)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ webhook
            result = await self._send_webhook_notification(
                user_id=user_id,
                notification=test_notification,
                telegram_text=formatted_message,
                bot_webhook_url=bot_webhook_url
            )
            
            return {
                "success": result.get("success", False),
                "message": "Test notification sent successfully" if result.get("success") else "Failed to send test notification",
                "notification_sent": result.get("success", False),
                "error": result.get("error")
            }
            
        except Exception as e:
            logger.error(f"Error sending test notification: {e}")
            return {
                "success": False,
                "message": f"Error sending test notification: {str(e)}",
                "notification_sent": False,
                "error": str(e)
            }
    
    def _create_test_notification(self, notification_type: str, test_data: Dict[str, Any]) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        if notification_type == "new_order":
            return {
                "type": "new_order",
                "order_id": test_data.get("order_id", "TEST_12345"),
                "amount": test_data.get("amount", 1500),
                "product_name": test_data.get("product_name", "–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä"),
                "brand": test_data.get("brand", "–¢–µ—Å—Ç–æ–≤—ã–π –±—Ä–µ–Ω–¥"),
                "content": "–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ"
            }
        elif notification_type == "order_buyout":
            return {
                "type": "order_buyout",
                "order_id": test_data.get("order_id", "TEST_12345"),
                "amount": test_data.get("amount", 1500),
                "product_name": test_data.get("product_name", "–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä"),
                "brand": test_data.get("brand", "–¢–µ—Å—Ç–æ–≤—ã–π –±—Ä–µ–Ω–¥"),
                "content": "–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã–∫—É–ø–µ –∑–∞–∫–∞–∑–∞"
            }
        elif notification_type == "order_cancellation":
            return {
                "type": "order_cancellation",
                "order_id": test_data.get("order_id", "TEST_12345"),
                "amount": test_data.get("amount", 1500),
                "product_name": test_data.get("product_name", "–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä"),
                "brand": test_data.get("brand", "–¢–µ—Å—Ç–æ–≤—ã–π –±—Ä–µ–Ω–¥"),
                "content": "–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞"
            }
        elif notification_type == "order_return":
            return {
                "type": "order_return",
                "order_id": test_data.get("order_id", "TEST_12345"),
                "amount": test_data.get("amount", 1500),
                "product_name": test_data.get("product_name", "–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä"),
                "brand": test_data.get("brand", "–¢–µ—Å—Ç–æ–≤—ã–π –±—Ä–µ–Ω–¥"),
                "content": "–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–æ–∑–≤—Ä–∞—Ç–µ –∑–∞–∫–∞–∑–∞"
            }
        elif notification_type == "negative_review":
            return {
                "type": "negative_review",
                "review_id": test_data.get("review_id", "TEST_REVIEW_123"),
                "rating": test_data.get("rating", 2),
                "product_name": test_data.get("product_name", "–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä"),
                "comment": test_data.get("comment", "–¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"),
                "content": "–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–º –æ—Ç–∑—ã–≤–µ"
            }
        elif notification_type == "critical_stocks":
            products = test_data.get("products", [
                {"nm_id": "TEST_12345", "name": "–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä 1", "stock": 2},
                {"nm_id": "TEST_67890", "name": "–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä 2", "stock": 1}
            ])
            return {
                "type": "critical_stocks",
                "products": products,
                "content": "–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –æ—Å—Ç–∞—Ç–∫–∞—Ö"
            }
        elif notification_type == "order_buyout":
            return {
                "type": "order_buyout",
                "order_id": test_data.get("order_id", "TEST_ORDER"),
                "product_name": test_data.get("product_name", "–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä"),
                "amount": test_data.get("amount", 1000),
                "content": "–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã–∫—É–ø–µ –∑–∞–∫–∞–∑–∞"
            }
        elif notification_type == "order_return":
            return {
                "type": "order_return",
                "order_id": test_data.get("order_id", "TEST_ORDER"),
                "product_name": test_data.get("product_name", "–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä"),
                "amount": test_data.get("amount", 1000),
                "content": "–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–æ–∑–≤—Ä–∞—Ç–µ –∑–∞–∫–∞–∑–∞"
            }
        else:
            return {
                "type": notification_type,
                "content": f"–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ {notification_type}"
            }
    
    async def process_sales_events(
        self,
        user_id: int,
        cabinet_id: int,
        current_sales: List[Dict[str, Any]],
        previous_sales: List[Dict[str, Any]],
        bot_webhook_url: str
    ) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –ø—Ä–æ–¥–∞–∂ –∏ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            settings = self.settings_crud.get_user_settings(self.db, user_id)
            if not settings or not settings.notifications_enabled:
                return 0
            
            # –û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø—Ä–æ–¥–∞–∂–∞—Ö
            sales_events = self.event_detector.detect_sales_changes(
                user_id, current_sales, previous_sales
            )
            
            if not sales_events:
                return 0
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            filtered_events = self._filter_sales_events_by_settings(sales_events, settings)
            
            if not filtered_events:
                return 0
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            notifications_sent = 0
            for event in filtered_events:
                try:
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    notification = self.notification_generator.generate_sales_notification(event)
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è Telegram
                    telegram_text = self._format_sales_notification_for_telegram(notification)
                    
                    # Webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
                    notifications_sent += 1
                        
                    # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ
                    self.sales_monitor.track_sales_change(user_id, event)
                
                except Exception as e:
                    logger.error(f"Error processing sales event {event}: {e}")
            
            return notifications_sent
            
        except Exception as e:
            logger.error(f"Error processing sales events for user {user_id}: {e}")
            return 0
    
    def _filter_sales_events_by_settings(self, events: List[Dict[str, Any]], settings) -> List[Dict[str, Any]]:
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π –ø—Ä–æ–¥–∞–∂ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        filtered_events = []
        
        for event in events:
            event_type = event.get("type")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
            if event_type == "new_buyout" and settings.order_buyouts_enabled:
                filtered_events.append(event)
            elif event_type == "new_return" and settings.order_returns_enabled:
                filtered_events.append(event)
            elif event_type == "sale_status_change" and settings.order_buyouts_enabled:
                filtered_events.append(event)
            elif event_type == "sale_cancellation_change" and settings.order_buyouts_enabled:
                filtered_events.append(event)
        
        return filtered_events
    
    def _format_sales_notification_for_telegram(self, notification: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–¥–∞–∂–µ –¥–ª—è Telegram"""
        notification_type = notification.get("type")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ BotMessageFormatter –Ω–µ –∏–º–µ–µ—Ç –º–µ—Ç–æ–¥–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∂
        if notification_type == "new_buyout":
            return f"üí∞ {notification.get('title', '–ù–æ–≤—ã–π –≤—ã–∫—É–ø')}\n\n{notification.get('content', '')}"
        elif notification_type == "new_return":
            return f"üîÑ {notification.get('title', '–ù–æ–≤—ã–π –≤–æ–∑–≤—Ä–∞—Ç')}\n\n{notification.get('content', '')}"
        elif notification_type == "sale_status_change":
            return f"üìä {notification.get('title', '–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞')}\n\n{notification.get('content', '')}"
        elif notification_type == "sale_cancellation_change":
            return f"‚ùå {notification.get('title', '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã')}\n\n{notification.get('content', '')}"
        else:
            return f"üìä {notification.get('title', '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–¥–∞–∂–µ')}\n\n{notification.get('content', '')}"
    
    async def _send_webhook_notification(
        self,
        user_id: int,
        notification: Dict[str, Any],
        telegram_text: str,
        bot_webhook_url: str = None
    ) -> Dict[str, Any]:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ webhook
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            notification: –î–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            telegram_text: –¢–µ–∫—Å—Ç –¥–ª—è Telegram
            bot_webhook_url: URL webhook –±–æ—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏–∑ –ë–î –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è webhook URL –∏ —Å–µ–∫—Ä–µ—Ç–∞
            from app.features.user.models import User
            user = self.db.query(User).filter(User.id == user_id).first()
            
            if not user:
                logger.error(f"User {user_id} not found for webhook notification")
                return {"success": False, "error": "User not found"}
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º webhook URL –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π URL
            webhook_url = user.bot_webhook_url or bot_webhook_url
            webhook_secret = user.webhook_secret
            
            if not webhook_url:
                logger.warning(f"No webhook URL for user {user_id}")
                return {"success": False, "error": "No webhook URL configured"}
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è webhook
            # –ï—Å–ª–∏ notification —Å–æ–¥–µ—Ä–∂–∏—Ç data —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–∫–∞–∑–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
            webhook_data = {
                "type": notification.get("type"),
                "data": notification.get("data", notification),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º data –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ notification
                "user_id": user_id,
                "telegram_id": user.telegram_id,  # –î–æ–±–∞–≤–ª—è–µ–º telegram_id –¥–ª—è –±–æ—Ç–∞
                "telegram_text": telegram_text
            }
            
            # –î–µ—Ç–∞–ª—å–Ω—ã–π –ª–æ–≥ webhook –¥–∞–Ω–Ω—ã—Ö
            logger.info(f"üì¢ Webhook notification data for user {user_id}: {webhook_data}")
            logger.info(f"üì¢ Notification data keys: {list(notification.keys())}")
            if "data" in notification:
                logger.info(f"üì¢ Notification data.data keys: {list(notification['data'].keys())}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º webhook
            success = await self.webhook_sender.send_notification(
                webhook_url=webhook_url,
                notification_data=webhook_data,
                webhook_secret=webhook_secret
            )
            
            if success:
                logger.info(f"Webhook notification sent successfully to user {user_id}")
                return {"success": True}
            else:
                logger.error(f"Failed to send webhook notification to user {user_id}")
                # Fallback: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
                await self._save_to_retry_queue(user_id, notification, telegram_text)
                return {"success": False, "error": "Saved to retry queue"}
                
        except Exception as e:
            logger.error(f"Error sending webhook notification to user {user_id}: {e}")
            # Fallback: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
            try:
                await self._save_to_retry_queue(user_id, notification, telegram_text)
                return {"success": False, "error": "Saved to retry queue"}
            except Exception as fallback_error:
                logger.error(f"Fallback failed for user {user_id}: {fallback_error}")
                return {"success": False, "error": "Complete failure"}
    
    async def _save_to_retry_queue(self, user_id: int, notification: Dict[str, Any], telegram_text: str):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏"""
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Redis –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
            retry_data = {
                "user_id": user_id,
                "notification": notification,
                "telegram_text": telegram_text,
                "retry_count": 0,
                "max_retries": 3,
                "created_at": TimezoneUtils.now_msk().isoformat()
            }
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º Redis –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫
            retry_key = f"notification_retry:{user_id}:{notification.get('type', 'unknown')}"
            await self.redis_client.setex(retry_key, 3600, json.dumps(retry_data))  # TTL 1 —á–∞—Å
            
            logger.info(f"üíæ Saved notification to retry queue for user {user_id}")
            
        except Exception as e:
            logger.error(f"Failed to save to retry queue: {e}")
            raise
    
    async def _send_notification_atomically(self, user_id: int, notification: Dict[str, Any]) -> Dict[str, Any]:
        """–ê—Ç–æ–º–∞—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            # 1. –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤ Redis
            if self._is_duplicate_in_redis(user_id, notification):
                logger.info(f"üö´ Duplicate detected in Redis for user {user_id}, type {notification.get('type')}")
                return {"success": False, "error": "Duplicate notification (Redis)"}
            
            # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –ë–î
            if await self._is_duplicate_in_db(user_id, notification):
                logger.info(f"üö´ Duplicate detected in DB for user {user_id}, type {notification.get('type')}")
                return {"success": False, "error": "Duplicate notification (DB)"}
            
            # 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            result = await self._send_webhook_notification(
                user_id=user_id,
                notification=notification,
                telegram_text=notification.get("telegram_text", "")
            )
            
            # 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –∏ –æ—Ç–º–µ—á–∞–µ–º –≤ Redis
            if result.get("success", False):
                self._save_notification_to_history(user_id, notification, result)
                await self._mark_as_sent_in_redis(user_id, notification)
                logger.info(f"‚úÖ Notification sent atomically for user {user_id}, type {notification.get('type')}")
            
            return result
                
        except Exception as e:
            logger.error(f"Error in atomic notification send: {e}")
            return {"success": False, "error": str(e)}
    
    def _is_duplicate_in_redis(self, user_id: int, notification: Dict[str, Any]) -> bool:
        """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ Redis"""
        try:
            notification_type = notification.get("type")
            unique_key = self._extract_unique_key(notification)
            
            redis_key = f"sent_notifications:{user_id}:{notification_type}"
            return self.redis_client.sismember(redis_key, unique_key)
            
        except Exception as e:
            logger.error(f"Error checking duplicate in Redis: {e}")
            return False  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –Ω–µ –¥—É–±–ª–∏–∫–∞—Ç
    
    async def _is_duplicate_in_db(self, user_id: int, notification: Dict[str, Any]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –ë–î"""
        try:
            notification_type = notification.get("type")
            unique_key = self._extract_unique_key(notification)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
            from datetime import timedelta
            cutoff_time = TimezoneUtils.now_msk() - timedelta(hours=24)
            
            from sqlalchemy import and_
            existing = self.db.query(NotificationHistory).filter(
                and_(
                    NotificationHistory.user_id == user_id,
                    NotificationHistory.notification_type == notification_type,
                    NotificationHistory.sent_at > cutoff_time
                )
            ).first()
            
            if not existing:
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            try:
                content_data = json.loads(existing.content)
                existing_key = self._extract_unique_key_from_content(content_data, notification_type)
                return existing_key == unique_key
            except (json.JSONDecodeError, KeyError):
                return False
                
        except Exception as e:
            logger.error(f"Error checking duplicate in DB: {e}")
            return False
    
    def _extract_unique_key(self, notification: Dict[str, Any]) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–ª—é—á–∞ –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        notification_type = notification.get("type")
        data = notification.get("data", {})
        
        if notification_type in ["new_order", "order_buyout", "order_cancellation", "order_return"]:
            return str(data.get("order_id", notification.get("order_id", "unknown")))
        elif notification_type == "negative_review":
            return str(data.get("review_id", notification.get("review_id", "unknown")))
        elif notification_type == "critical_stocks":
            return str(data.get("nm_id", notification.get("nm_id", "unknown")))
        else:
            return f"{notification_type}_{notification.get('user_id', 'unknown')}"
    
    def _extract_unique_key_from_content(self, content_data: Dict[str, Any], notification_type: str) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–ª—é—á–∞ –∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ë–î"""
        if notification_type in ["new_order", "order_buyout", "order_cancellation", "order_return"]:
            return str(content_data.get("order_id", "unknown"))
        elif notification_type == "negative_review":
            return str(content_data.get("review_id", "unknown"))
        elif notification_type == "critical_stocks":
            return str(content_data.get("nm_id", "unknown"))
        else:
            return f"{notification_type}_unknown"
    
    async def _mark_as_sent_in_redis(self, user_id: int, notification: Dict[str, Any]):
        """–û—Ç–º–µ—Ç–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –≤ Redis"""
        try:
            notification_type = notification.get("type")
            unique_key = self._extract_unique_key(notification)
            
            redis_key = f"sent_notifications:{user_id}:{notification_type}"
            self.redis_client.sadd(redis_key, unique_key)
            self.redis_client.expire(redis_key, 86400)  # TTL 24 —á–∞—Å–∞
            
        except Exception as e:
            logger.error(f"Error marking as sent in Redis: {e}")
    
    async def _batch_mark_as_sent_in_redis(self, user_id: int, notifications: List[Dict[str, Any]]):
        """–ë–∞—Ç—á–µ–≤–æ–µ –æ—Ç–º–µ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤ Redis"""
        try:
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            by_type = {}
            for notification in notifications:
                notification_type = notification.get("type")
                unique_key = self._extract_unique_key(notification)
                
                if notification_type not in by_type:
                    by_type[notification_type] = []
                by_type[notification_type].append(unique_key)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–∞—Ç—á–µ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
            for notification_type, keys in by_type.items():
                redis_key = f"sent_notifications:{user_id}:{notification_type}"
                self.redis_client.sadd(redis_key, *keys)
                self.redis_client.expire(redis_key, 86400)  # TTL 24 —á–∞—Å–∞
                
            logger.info(f"üì¶ Batch marked {len(notifications)} notifications in Redis for user {user_id}")
            
        except Exception as e:
            logger.error(f"Error batch marking as sent in Redis: {e}")
    
    async def _batch_check_duplicates_in_redis(self, user_id: int, notifications: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """–ë–∞—Ç—á–µ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –≤ Redis"""
        try:
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º
            by_type = {}
            for notification in notifications:
                notification_type = notification.get("type")
                unique_key = self._extract_unique_key(notification)
                
                if notification_type not in by_type:
                    by_type[notification_type] = []
                by_type[notification_type].append((unique_key, notification))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –±–∞—Ç—á–∞–º–∏
            non_duplicates = []
            total_duplicates = 0
            
            for notification_type, items in by_type.items():
                redis_key = f"sent_notifications:{user_id}:{notification_type}"
                
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                keys_to_check = [item[0] for item in items]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤ Redis
                existing_keys = self.redis_client.smismember(redis_key, *keys_to_check)
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–µ–¥—É–±–ª–∏–∫–∞—Ç—ã
                for i, (unique_key, notification) in enumerate(items):
                    if not existing_keys[i]:  # –ï—Å–ª–∏ –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Redis
                        non_duplicates.append(notification)
                    else:
                        total_duplicates += 1
                        logger.info(f"üö´ Duplicate detected in Redis batch for user {user_id}, type {notification_type}, key {unique_key}")
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫—É –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
                        await self._track_duplicate_attempt(user_id, notification_type)
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            logger.info(f"üìä Duplicate check stats for user {user_id}: {len(non_duplicates)} unique, {total_duplicates} duplicates")
            
            return non_duplicates
            
        except Exception as e:
            logger.error(f"Error batch checking duplicates in Redis: {e}")
            return notifications  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ
    
    async def _track_duplicate_attempt(self, user_id: int, notification_type: str):
        """–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–ø—ã—Ç–æ–∫ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        try:
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
            await self.redis_client.incr(f"duplicate_attempts:{user_id}:{notification_type}")
            await self.redis_client.expire(f"duplicate_attempts:{user_id}:{notification_type}", 86400)  # TTL 24 —á–∞—Å–∞
            
            # –û–±—â–∏–π —Å—á–µ—Ç—á–∏–∫ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
            await self.redis_client.incr("duplicate_attempts:total")
            await self.redis_client.expire("duplicate_attempts:total", 86400)
            
        except Exception as e:
            logger.error(f"Error tracking duplicate attempt: {e}")
    
    async def get_duplicate_stats(self, user_id: int = None) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            stats = {}
            
            if user_id:
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_keys = await self.redis_client.keys(f"duplicate_attempts:{user_id}:*")
                for key in user_keys:
                    notification_type = key.split(":")[-1]
                    count = await self.redis_client.get(key)
                    stats[f"user_{user_id}_{notification_type}"] = int(count or 0)
            else:
                # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                total_duplicates = await self.redis_client.get("duplicate_attempts:total")
                stats["total_duplicates"] = int(total_duplicates or 0)
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º
                all_keys = await self.redis_client.keys("duplicate_attempts:*")
                for key in all_keys:
                    if "total" not in key:
                        count = await self.redis_client.get(key)
                        stats[key.replace("duplicate_attempts:", "")] = int(count or 0)
            
            return stats
            
        except Exception as e:
            logger.error(f"Error getting duplicate stats: {e}")
            return {}
    
    async def send_sync_completion_notification(
        self,
        user_id: int,
        cabinet_id: int,
        is_first_sync: bool = False
    ) -> Dict[str, Any]:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ webhook
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cabinet_id: ID –∫–∞–±–∏–Ω–µ—Ç–∞
            is_first_sync: –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            from app.features.user.models import User
            user = self.db.query(User).filter(User.id == user_id).first()
            
            if not user:
                logger.error(f"User {user_id} not found for sync completion notification")
                return {"success": False, "error": "User not found"}
            
            if not user.bot_webhook_url:
                logger.warning(f"No webhook URL configured for user {user_id}")
                return {"success": False, "error": "No webhook URL configured"}
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            notification_data = {
                "type": "sync_completed",
                "cabinet_id": cabinet_id,
                "message": "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –î–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.",
                "timestamp": TimezoneUtils.now_msk().isoformat(),
                "is_first_sync": is_first_sync
            }
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è Telegram
            if is_first_sync:
                telegram_text = "üéâ –ü–µ—Ä–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
            else:
                # –î–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–π –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–±—ã—Ç–∏—è—Ö
                return {"success": True, "message": "Sync completed, no general notification sent"}
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            webhook_result = await self._send_webhook_notification(
                user_id=user_id,
                notification=notification_data,
                telegram_text=telegram_text,
                bot_webhook_url=user.bot_webhook_url
            )
            
            if webhook_result.get("success"):
                logger.info(f"‚úÖ Sync completion webhook sent successfully to user {user_id}")
                return {"success": True, "webhook_result": webhook_result}
            else:
                logger.error(f"‚ùå Failed to send sync completion webhook to user {user_id}: {webhook_result}")
                return {"success": False, "error": webhook_result.get("error", "Webhook delivery failed")}
                
        except Exception as e:
            logger.error(f"Error sending sync completion notification to user {user_id}: {e}")
            return {"success": False, "error": str(e)}
