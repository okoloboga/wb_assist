"""
Notification Service - –µ–¥–∏–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π S3
"""

import asyncio
import logging
from datetime import datetime, timezone
from typing import Dict, List, Any, Optional
from sqlalchemy.orm import Session

from .event_detector import EventDetector
from .status_monitor import StatusChangeMonitor
from .sales_monitor import SalesMonitor
from .notification_generator import NotificationGenerator
from .crud import (
    NotificationSettingsCRUD,
    NotificationHistoryCRUD,
    OrderStatusHistoryCRUD
)
# Webhook –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ polling
from app.features.bot_api.formatter import BotMessageFormatter

logger = logging.getLogger(__name__)


class NotificationService:
    """–ï–¥–∏–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏"""
    
    def __init__(self, db: Session, redis_client=None):
        self.db = db
        self.redis_client = redis_client
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.event_detector = EventDetector()
        self.status_monitor = StatusChangeMonitor()
        self.sales_monitor = SalesMonitor(redis_client)
        self.notification_generator = NotificationGenerator()
        # Webhook sender —É–¥–∞–ª–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ polling
        self.message_formatter = BotMessageFormatter()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º CRUD
        self.settings_crud = NotificationSettingsCRUD()
        self.history_crud = NotificationHistoryCRUD()
        self.order_crud = OrderStatusHistoryCRUD()
    
    async def process_sync_events(
        self, 
        user_id: int, 
        cabinet_id: int,
        current_orders: List[Dict[str, Any]],
        previous_orders: List[Dict[str, Any]],
        current_reviews: List[Dict[str, Any]] = None,
        previous_reviews: List[Dict[str, Any]] = None,
        current_stocks: List[Dict[str, Any]] = None,
        previous_stocks: List[Dict[str, Any]] = None,
        # bot_webhook_url —É–¥–∞–ª–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ polling
    ) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_settings = self.settings_crud.get_user_settings(self.db, user_id)
            if not user_settings:
                user_settings = self.settings_crud.create_default_settings(self.db, user_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            if not user_settings.notifications_enabled:
                logger.info(f"Notifications disabled for user {user_id}")
                return {"status": "disabled", "notifications_sent": 0}
            
            notifications_sent = 0
            events_processed = []
            
            # 1. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–∫–∞–∑—ã (–Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã + –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞)
            order_events = await self._process_order_events(
                user_id, current_orders, previous_orders, user_settings
            )
            events_processed.extend(order_events)
            
            # 2. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–∑—ã–≤—ã (–Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –æ—Ç–∑—ã–≤—ã)
            if current_reviews and previous_reviews:
                review_events = await self._process_review_events(
                    user_id, current_reviews, previous_reviews, user_settings
                )
                events_processed.extend(review_events)
            
            # 3. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏ (–∫—Ä–∏—Ç–∏—á–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏)
            if current_stocks and previous_stocks:
                stock_events = await self._process_stock_events(
                    user_id, current_stocks, previous_stocks, user_settings
                )
                events_processed.extend(stock_events)
            
            # 4. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            if events_processed and bot_webhook_url:
                notifications_sent = await self._send_notifications(
                    user_id, events_processed, user_settings, bot_webhook_url
                )
            
            return {
                "status": "success",
                "events_processed": len(events_processed),
                "notifications_sent": notifications_sent,
                "events": events_processed
            }
            
        except Exception as e:
            logger.error(f"Error processing sync events for user {user_id}: {e}")
            return {"status": "error", "error": str(e)}
    
    async def _process_order_events(
        self, 
        user_id: int, 
        current_orders: List[Dict[str, Any]], 
        previous_orders: List[Dict[str, Any]], 
        user_settings
    ) -> List[Dict[str, Any]]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –∑–∞–∫–∞–∑–æ–≤"""
        events = []
        
        # –û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã
        if user_settings.new_orders_enabled:
            new_order_events = self.event_detector.detect_new_orders(
                user_id, current_orders, previous_orders
            )
            events.extend(new_order_events)
        
        # –û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–æ–≤
        if (user_settings.order_buyouts_enabled or 
            user_settings.order_cancellations_enabled or 
            user_settings.order_returns_enabled):
            
            status_change_events = self.event_detector.detect_status_changes(
                user_id, current_orders, previous_orders
            )
            events.extend(status_change_events)
        
        return events
    
    async def _process_review_events(
        self, 
        user_id: int, 
        current_reviews: List[Dict[str, Any]], 
        previous_reviews: List[Dict[str, Any]], 
        user_settings
    ) -> List[Dict[str, Any]]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –æ—Ç–∑—ã–≤–æ–≤"""
        events = []
        
        # detect_negative_reviews —É–¥–∞–ª–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ polling —Å–∏—Å—Ç–µ–º–∞
        
        return events
    
    async def _process_stock_events(
        self, 
        user_id: int, 
        current_stocks: List[Dict[str, Any]], 
        previous_stocks: List[Dict[str, Any]], 
        user_settings
    ) -> List[Dict[str, Any]]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –æ—Å—Ç–∞—Ç–∫–æ–≤"""
        events = []
        
        if user_settings.critical_stocks_enabled:
            critical_stocks_events = self.event_detector.detect_critical_stocks(
                user_id, current_stocks, previous_stocks
            )
            events.extend(critical_stocks_events)
        
        return events
    
    # _send_notifications —É–¥–∞–ª–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ polling —Å–∏—Å—Ç–µ–º–∞
    
    def _format_notification_for_telegram(self, notification: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è Telegram"""
        notification_type = notification.get("type")
        
        if notification_type == "new_order":
            return self.message_formatter.format_new_order_notification(notification)
        elif notification_type == "order_buyout":
            return self._format_order_buyout_for_telegram(notification)
        elif notification_type == "order_cancellation":
            return self._format_order_cancellation_for_telegram(notification)
        elif notification_type == "order_return":
            return self._format_order_return_for_telegram(notification)
        elif notification_type == "negative_review":
            return self._format_negative_review_for_telegram(notification)
        elif notification_type == "critical_stocks":
            return self.message_formatter.format_critical_stocks_notification(notification)
        
        return notification.get("content", "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
    
    def _format_order_buyout_for_telegram(self, notification: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—ã–∫—É–ø–µ –¥–ª—è Telegram"""
        order_id = notification.get("order_id", "N/A")
        amount = notification.get("amount", 0)
        product_name = notification.get("product_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä")
        brand = notification.get("brand", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±—Ä–µ–Ω–¥")
        
        return f"""‚úÖ –ó–ê–ö–ê–ó –í–´–ö–£–ü–õ–ï–ù

üõí –ó–∞–∫–∞–∑ #{order_id}
üí∞ –°—É–º–º–∞: {amount:,} ‚ÇΩ
üì¶ –¢–æ–≤–∞—Ä: {product_name}
üè∑Ô∏è –ë—Ä–µ–Ω–¥: {brand}

–í—Ä–µ–º—è: {datetime.now(timezone.utc).strftime('%H:%M:%S')}"""
    
    def _format_order_cancellation_for_telegram(self, notification: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–º–µ–Ω–µ –¥–ª—è Telegram"""
        order_id = notification.get("order_id", "N/A")
        amount = notification.get("amount", 0)
        product_name = notification.get("product_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä")
        brand = notification.get("brand", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±—Ä–µ–Ω–¥")
        
        return f"""‚ùå –ó–ê–ö–ê–ó –û–¢–ú–ï–ù–ï–ù

üõí –ó–∞–∫–∞–∑ #{order_id}
üí∞ –°—É–º–º–∞: {amount:,} ‚ÇΩ
üì¶ –¢–æ–≤–∞—Ä: {product_name}
üè∑Ô∏è –ë—Ä–µ–Ω–¥: {brand}

–í—Ä–µ–º—è: {datetime.now(timezone.utc).strftime('%H:%M:%S')}"""
    
    def _format_order_return_for_telegram(self, notification: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–æ–∑–≤—Ä–∞—Ç–µ –¥–ª—è Telegram"""
        order_id = notification.get("order_id", "N/A")
        amount = notification.get("amount", 0)
        product_name = notification.get("product_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä")
        brand = notification.get("brand", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±—Ä–µ–Ω–¥")
        
        return f"""üîÑ –ó–ê–ö–ê–ó –í–û–ó–í–†–ê–©–ï–ù

üõí –ó–∞–∫–∞–∑ #{order_id}
üí∞ –°—É–º–º–∞: {amount:,} ‚ÇΩ
üì¶ –¢–æ–≤–∞—Ä: {product_name}
üè∑Ô∏è –ë—Ä–µ–Ω–¥: {brand}

–í—Ä–µ–º—è: {datetime.now(timezone.utc).strftime('%H:%M:%S')}"""
    
    def _format_negative_review_for_telegram(self, notification: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–º –æ—Ç–∑—ã–≤–µ –¥–ª—è Telegram"""
        review_id = notification.get("review_id", "N/A")
        rating = notification.get("rating", 0)
        text = notification.get("text", "")
        product_name = notification.get("product_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä")
        order_id = notification.get("order_id")
        
        order_info = f"–ó–∞–∫–∞–∑: #{order_id}" if order_id else "–ó–∞–∫–∞–∑: –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
        
        return f"""üòû –ù–ï–ì–ê–¢–ò–í–ù–´–ô –û–¢–ó–´–í

‚≠ê –û—Ü–µ–Ω–∫–∞: {rating}/5
üìù –¢–µ–∫—Å—Ç: {text}
üì¶ –¢–æ–≤–∞—Ä: {product_name}
üõí {order_info}

–í—Ä–µ–º—è: {datetime.now(timezone.utc).strftime('%H:%M:%S')}"""
    
    # _send_webhook_notification —É–¥–∞–ª–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ polling —Å–∏—Å—Ç–µ–º–∞
    
    async def get_new_events(
        self, 
        user_id: int, 
        last_check: datetime
    ) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –º–æ–º–µ–Ω—Ç–∞ last_check"""
        try:
            events = []
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–∞–±–∏–Ω–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            from app.features.wb_api.crud_cabinet_users import CabinetUserCRUD
            cabinet_user_crud = CabinetUserCRUD()
            cabinet_ids = cabinet_user_crud.get_user_cabinets(self.db, user_id)
            
            if not cabinet_ids:
                return events
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã
            new_orders = await self._get_new_orders(user_id, cabinet_ids, last_check)
            events.extend(new_orders)
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –æ—Ç–∑—ã–≤—ã (0-3 –∑–≤–µ–∑–¥—ã)
            new_reviews = await self._get_new_reviews(user_id, cabinet_ids, last_check)
            events.extend(new_reviews)
            
            # –ü–æ–ª—É—á–∞–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å—Ç–∞—Ç–∫–∏
            critical_stocks = await self._get_critical_stocks(user_id, cabinet_ids, last_check)
            events.extend(critical_stocks)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–∫–∞–∑–æ–≤
            status_changes = await self._get_status_changes(user_id, cabinet_ids, last_check)
            events.extend(status_changes)
            
            return events
            
        except Exception as e:
            logger.error(f"Error getting new events for user {user_id}: {e}")
            return []
    
    async def _get_new_orders(self, user_id: int, cabinet_ids: List[int], last_check: datetime) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤"""
        try:
            from sqlalchemy import desc
            from sqlalchemy import func
            from app.features.wb_api.models import WBOrder, WBCabinet, WBSyncLog, WBReview

            # –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–µ—Ä–≤–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            cabinets = self.db.query(WBCabinet).filter(WBCabinet.id.in_(cabinet_ids)).all()
            if not cabinets:
                return []
            for cabinet in cabinets:
                if not cabinet.last_sync_at:
                    logger.info(f"Skipping order notifications for cabinet {cabinet.id} - first sync")
                    return []

            # –ü—Ä–µ–¥—ã–¥—É—â–∞—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
            prev_sync_at_by_cab: Dict[int, datetime] = {}
            for cab in cabinets:
                # –ò—â–µ–º –ª—é–±—É—é –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ completed)
                prev_sync = (
                    self.db.query(WBSyncLog)
                    .filter(WBSyncLog.cabinet_id == cab.id)
                    .order_by(desc(WBSyncLog.started_at))
                    .offset(1)
                    .first()
                )
                if not prev_sync:
                    # –ï—Å–ª–∏ –Ω–µ—Ç –ª–æ–≥–æ–≤ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º last_sync_at –∫–∞–±–∏–Ω–µ—Ç–∞
                    if cab.last_sync_at:
                        prev_sync_at_by_cab[cab.id] = cab.last_sync_at
                        logger.info(f"Using cabinet last_sync_at for cabinet {cab.id}: {cab.last_sync_at}")
                    else:
                        logger.info(f"Skipping order notifications for cabinet {cab.id} - no sync history")
                        return []
                else:
                    prev_sync_at_by_cab[cab.id] = prev_sync.completed_at or prev_sync.started_at
                    logger.info(f"Using previous sync for cabinet {cab.id}: {prev_sync_at_by_cab[cab.id]}")

            # –ö–∞–Ω–¥–∏–¥–∞—Ç—ã –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –æ–∫–Ω—É polling
            orders = self.db.query(WBOrder).filter(
                WBOrder.cabinet_id.in_(cabinet_ids),
                WBOrder.created_at > last_check
            ).all()

            # –§–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            orders = [
                o for o in orders
                if o.created_at and prev_sync_at_by_cab.get(o.cabinet_id) and o.created_at > prev_sync_at_by_cab[o.cabinet_id]
            ]
            
            events = []
            from app.features.wb_api.models import WBProduct
            for order in orders:
                # –û–±–æ–≥–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä–∞
                product = self.db.query(WBProduct).filter(WBProduct.nm_id == order.nm_id).first()
                rating = (product.rating or 0.0) if product else 0.0
                reviews_cnt = (product.reviews_count or 0) if product else 0
                image_url = product.image_url if product and getattr(product, "image_url", None) else None
                # –ë—ã—Å—Ç—Ä—ã–π —Ç–æ—á–Ω—ã–π —Ä–∞—Å—á—ë—Ç –∏–∑ WBReview (–ø–µ—Ä–µ–±–∏–≤–∞–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥, –µ—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–∑—ã–≤—ã)
                try:
                    avg_cnt = self.db.query(func.avg(WBReview.rating), func.count(WBReview.id)).filter(
                        WBReview.cabinet_id == order.cabinet_id,
                        WBReview.nm_id == order.nm_id,
                        WBReview.rating.isnot(None)
                    ).one()
                    avg_rating = avg_cnt[0] or 0.0
                    cnt_reviews = avg_cnt[1] or 0
                    if cnt_reviews > 0:
                        rating = round(float(avg_rating), 1)
                        reviews_cnt = int(cnt_reviews)
                except Exception:
                    pass
                order_data = {
                    "id": order.id,
                    "order_id": order.order_id,
                    "date": order.order_date.isoformat() if order.order_date else None,
                    "amount": order.total_price or 0,
                    "product_name": order.name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
                    "brand": order.brand or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
                    "nm_id": order.nm_id,
                    "supplier_article": order.article or "",
                    "size": order.size or "",
                    "barcode": order.barcode or "",
                    "warehouse_from": order.warehouse_from or "",
                    "warehouse_to": order.warehouse_to or "",
                    "spp_percent": order.spp_percent or 0.0,
                    "customer_price": order.customer_price or 0.0,
                    "logistics_amount": order.logistics_amount or 0.0,
                    "rating": rating,
                    "reviews_count": reviews_cnt,
                    "sales_periods": {},
                    "status": order.status,
                    "image_url": image_url,
                }
                telegram_text = self.message_formatter.format_order_detail({"order": order_data})

                events.append({
                    "type": "new_order",
                    "user_id": user_id,
                    "data": order_data,
                    "telegram_text": telegram_text,
                    "created_at": order.created_at or datetime.now(timezone.utc),
                    "priority": "MEDIUM"
                })
            
            return events
            
        except Exception as e:
            logger.error(f"Error getting new orders: {e}")
            return []
    
    async def _get_new_reviews(self, user_id: int, cabinet_ids: List[int], last_check: datetime) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ (0-3 –∑–≤–µ–∑–¥—ã)"""
        try:
            from app.features.wb_api.models import WBReview, WBCabinet
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–±–∏–Ω–µ—Ç–∞
            # –ï—Å–ª–∏ last_sync_at –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –æ—á–µ–Ω—å —Å—Ç–∞—Ä—ã–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            cabinets = self.db.query(WBCabinet).filter(WBCabinet.id.in_(cabinet_ids)).all()
            for cabinet in cabinets:
                if not cabinet.last_sync_at:
                    logger.info(f"Skipping review notifications for cabinet {cabinet.id} - first sync")
                    return []
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
                from datetime import timedelta
                time_diff = datetime.now(timezone.utc) - cabinet.last_sync_at
                if time_diff > timedelta(hours=24):
                    logger.info(f"Skipping review notifications for cabinet {cabinet.id} - long break since last sync")
                    return []
            
            reviews = self.db.query(WBReview).filter(
                WBReview.cabinet_id.in_(cabinet_ids),
                WBReview.created_date > last_check  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–∑—ã–≤–∞, –∞ –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            ).all()
            
            events = []
            for review in reviews:
                # –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏—è –¢–û–õ–¨–ö–û –¥–ª—è –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ (0-3 –∑–≤–µ–∑–¥—ã)
                if review.rating and review.rating <= 3:
                    events.append({
                        "type": "negative_review",
                        "user_id": user_id,
                        "data": {
                            "review_id": review.review_id,
                            "rating": review.rating,
                            "text": review.text,
                            "product_name": f"–¢–æ–≤–∞—Ä {review.nm_id}",  # –ú–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å, –ø–æ–ª—É—á–∏–≤ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
                            "user_name": review.user_name,
                            "created_at": review.created_date.isoformat() if review.created_date else None
                        },
                        "created_at": review.created_date or datetime.now(timezone.utc),
                        "priority": "HIGH"
                    })
                # –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–∑—ã–≤—ã (4-5 –∑–≤–µ–∑–¥) –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –Ω—É–∂–Ω—ã
            
            return events
            
        except Exception as e:
            logger.error(f"Error getting new reviews: {e}")
            return []
    
    async def _get_critical_stocks(self, user_id: int, cabinet_ids: List[int], last_check: datetime) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤ –ø–æ —Ñ–∞–∫—Ç—É –ø–µ—Ä–µ—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ –ø–æ—Ä–æ–≥ (<=2 —Å >2 —Ä–∞–Ω–µ–µ)."""
        try:
            from app.features.wb_api.models import WBStock, WBCabinet, WBProduct
            from sqlalchemy import and_
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–±–∏–Ω–µ—Ç–∞
            cabinets = self.db.query(WBCabinet).filter(WBCabinet.id.in_(cabinet_ids)).all()
            for cabinet in cabinets:
                if not cabinet.last_sync_at:
                    logger.info(f"Skipping critical stocks notifications for cabinet {cabinet.id} - first sync")
                    return []
                # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –¥–æ–ª–≥–∏–π –ø–µ—Ä–µ—Ä—ã–≤ - —ç—Ç–æ –º–æ–∂–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≤–∞–∂–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            
            critical_threshold = 2
            
            # –¢–µ–∫—É—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ last_check (–∫–∞–Ω–¥–∏–¥–∞—Ç—ã)
            current_rows = (
                self.db.query(WBStock)
                .filter(
                    WBStock.cabinet_id.in_(cabinet_ids),
                    WBStock.updated_at > last_check
                )
                .all()
            )
            if not current_rows:
                return []
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–∞–∑–º–µ—Ä–∞
            def _norm_size(s: str) -> str:
                return (s or "").strip().upper()

            # –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º —Å—É–º–º–∞—Ä–Ω—ã–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ –≤—Å–µ–º —Å–∫–ª–∞–¥–∞–º –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–Ω–∏–º–∫–∞
            current_sum_map: Dict[tuple, int] = {}
            key_pairs = set()
            for r in current_rows:
                key = (r.nm_id, _norm_size(r.size))
                key_pairs.add(key)
                current_sum_map[key] = current_sum_map.get(key, 0) + (r.quantity or 0)

            # –°–Ω–∏–º–æ–∫ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è —ç—Ç–∏—Ö nm_id –¥–æ/–Ω–∞ –º–æ–º–µ–Ω—Ç last_check –∏ –∞–≥—Ä–µ–≥–∞—Ü–∏—è
            prev_rows = (
                self.db.query(WBStock)
                .filter(
                    WBStock.cabinet_id.in_(cabinet_ids),
                    WBStock.updated_at <= last_check,
                    WBStock.nm_id.in_({k[0] for k in key_pairs})
                )
                .all()
            )
            prev_sum_map: Dict[tuple, int] = {}
            for r in prev_rows:
                key = (r.nm_id, _norm_size(r.size))
                prev_sum_map[key] = prev_sum_map.get(key, 0) + (r.quantity or 0)

            # –î–µ—Ç–µ–∫—Ç –ø–µ—Ä–µ—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ –ø–æ—Ä–æ–≥ –¢–û–õ–¨–ö–û –ø—Ä–∏ —Ä–µ–∞–ª—å–Ω–æ–º —Å–Ω–∏–∂–µ–Ω–∏–∏ —Å >2 –¥–æ <=2
            per_nm: Dict[int, Dict[str, Any]] = {}
            for (nm, sz), cur_total in current_sum_map.items():
                if cur_total <= 0:
                    continue  # –Ω—É–ª–∏ —Å–µ–π—á–∞—Å –Ω–µ —Å–∏–≥–Ω–∞–ª–∏–º
                prev_total = prev_sum_map.get((nm, sz))
                # –¢—Ä–µ–±—É–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ—à–ª–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –∏ —Ä–µ–∞–ª—å–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ
                if prev_total is None:
                    continue
                if prev_total > critical_threshold and cur_total <= critical_threshold and cur_total < prev_total:
                    if nm not in per_nm:
                        per_nm[nm] = {"nm_id": nm, "stocks": {}, "critical_sizes": [], "zero_sizes": []}
                    per_nm[nm]["stocks"][sz] = cur_total
                    per_nm[nm]["critical_sizes"].append(sz)
            
            if not per_nm:
                return []
            
            # –ü–æ–¥—Ç—è–≥–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∏–∑ WBProduct
            products = {p.nm_id: p for p in self.db.query(WBProduct).filter(WBProduct.nm_id.in_(list(per_nm.keys()))).all()}
            events = []
            for nm_id, info in per_nm.items():
                prod = products.get(nm_id)
                name = None
                if prod and getattr(prod, "name", None):
                    name = prod.name
                if not name:
                    name = f"–¢–æ–≤–∞—Ä {nm_id}"
                events.append({
                    "type": "critical_stocks",
                    "user_id": user_id,
                    "data": {
                        "nm_id": nm_id,
                        "name": name,
                        "stocks": info["stocks"],
                        "critical_sizes": info["critical_sizes"],
                        "zero_sizes": info["zero_sizes"],
                    },
                    "created_at": datetime.now(timezone.utc),
                    "priority": "HIGH"
                })
            
            return events
            
        except Exception as e:
            logger.error(f"Error getting critical stocks: {e}")
            return []
    
    async def _get_status_changes(self, user_id: int, cabinet_ids: List[int], last_check: datetime) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–∫–∞–∑–æ–≤"""
        try:
            from app.features.wb_api.models import WBOrder
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ —Å—Ç–∞—Ç—É—Å–∞
            orders = self.db.query(WBOrder).filter(
                WBOrder.cabinet_id.in_(cabinet_ids),
                WBOrder.updated_at > last_check,
                WBOrder.status.in_(['buyout', 'canceled', 'return'])
            ).all()
            
            events = []
            for order in orders:
                if order.status == 'buyout':
                    event_type = "order_buyout"
                    priority = "MEDIUM"
                elif order.status == 'canceled':
                    event_type = "order_cancellation"
                    priority = "HIGH"
                elif order.status == 'return':
                    event_type = "order_return"
                    priority = "HIGH"
                else:
                    continue
                
                events.append({
                    "type": event_type,
                    "user_id": user_id,
                    "data": {
                        "order_id": order.order_id,
                        "amount": order.total_price,
                        "product_name": order.name,
                        "brand": order.brand,
                        "status": order.status,
                        "updated_at": order.updated_at.isoformat() if order.updated_at else None
                    },
                    "created_at": order.updated_at or datetime.now(timezone.utc),
                    "priority": priority
                })
            
            return events
            
        except Exception as e:
            logger.error(f"Error getting status changes: {e}")
            return []

    def _save_notification_to_history(
        self, 
        user_id: int, 
        notification: Dict[str, Any], 
        result: Dict[str, Any]
    ):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é"""
        try:
            notification_data = {
                "id": f"notif_{notification['type']}_{notification.get('order_id', notification.get('review_id', notification.get('nm_id', 'unknown')))}",
                "user_id": user_id,
                "notification_type": notification["type"],
                "priority": notification.get("priority", "MEDIUM"),
                "title": notification.get("title", ""),
                "content": notification.get("content", ""),
                "sent_at": datetime.now(timezone.utc),
                "status": "delivered" if result.get("success") else "failed"
            }
            
            self.history_crud.create_notification(self.db, notification_data)
            
        except Exception as e:
            logger.error(f"Error saving notification to history: {e}")
    
    def _settings_to_dict(self, user_settings) -> Dict[str, Any]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ —Å–ª–æ–≤–∞—Ä—å"""
        return {
            "notifications_enabled": user_settings.notifications_enabled,
            "new_orders_enabled": user_settings.new_orders_enabled,
            "order_buyouts_enabled": user_settings.order_buyouts_enabled,
            "order_cancellations_enabled": user_settings.order_cancellations_enabled,
            "order_returns_enabled": user_settings.order_returns_enabled,
            "negative_reviews_enabled": user_settings.negative_reviews_enabled,
            "critical_stocks_enabled": user_settings.critical_stocks_enabled,
            "grouping_enabled": user_settings.grouping_enabled,
            "max_group_size": user_settings.max_group_size,
            "group_timeout": user_settings.group_timeout
        }
    
    async def send_test_notification(
        self, 
        user_id: int, 
        notification_type: str, 
        test_data: Dict[str, Any],
        bot_webhook_url: str
    ) -> Dict[str, Any]:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            notification_type: –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            test_data: –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            bot_webhook_url: URL webhook –±–æ—Ç–∞
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        """
        try:
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            test_notification = self._create_test_notification(
                notification_type, 
                test_data
            )
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è Telegram
            formatted_message = self._format_notification_for_telegram(test_notification)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ webhook
            result = await self._send_webhook_notification(
                user_id=user_id,
                notification=test_notification,
                telegram_text=formatted_message,
                bot_webhook_url=bot_webhook_url
            )
            
            return {
                "success": result.get("success", False),
                "message": "Test notification sent successfully" if result.get("success") else "Failed to send test notification",
                "notification_sent": result.get("success", False),
                "error": result.get("error")
            }
            
        except Exception as e:
            logger.error(f"Error sending test notification: {e}")
            return {
                "success": False,
                "message": f"Error sending test notification: {str(e)}",
                "notification_sent": False,
                "error": str(e)
            }
    
    def _create_test_notification(self, notification_type: str, test_data: Dict[str, Any]) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        if notification_type == "new_order":
            return {
                "type": "new_order",
                "order_id": test_data.get("order_id", "TEST_12345"),
                "amount": test_data.get("amount", 1500),
                "product_name": test_data.get("product_name", "–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä"),
                "brand": test_data.get("brand", "–¢–µ—Å—Ç–æ–≤—ã–π –±—Ä–µ–Ω–¥"),
                "content": "–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ"
            }
        elif notification_type == "order_buyout":
            return {
                "type": "order_buyout",
                "order_id": test_data.get("order_id", "TEST_12345"),
                "amount": test_data.get("amount", 1500),
                "product_name": test_data.get("product_name", "–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä"),
                "brand": test_data.get("brand", "–¢–µ—Å—Ç–æ–≤—ã–π –±—Ä–µ–Ω–¥"),
                "content": "–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã–∫—É–ø–µ –∑–∞–∫–∞–∑–∞"
            }
        elif notification_type == "order_cancellation":
            return {
                "type": "order_cancellation",
                "order_id": test_data.get("order_id", "TEST_12345"),
                "amount": test_data.get("amount", 1500),
                "product_name": test_data.get("product_name", "–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä"),
                "brand": test_data.get("brand", "–¢–µ—Å—Ç–æ–≤—ã–π –±—Ä–µ–Ω–¥"),
                "content": "–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞"
            }
        elif notification_type == "order_return":
            return {
                "type": "order_return",
                "order_id": test_data.get("order_id", "TEST_12345"),
                "amount": test_data.get("amount", 1500),
                "product_name": test_data.get("product_name", "–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä"),
                "brand": test_data.get("brand", "–¢–µ—Å—Ç–æ–≤—ã–π –±—Ä–µ–Ω–¥"),
                "content": "–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–æ–∑–≤—Ä–∞—Ç–µ –∑–∞–∫–∞–∑–∞"
            }
        elif notification_type == "negative_review":
            return {
                "type": "negative_review",
                "review_id": test_data.get("review_id", "TEST_REVIEW_123"),
                "rating": test_data.get("rating", 2),
                "product_name": test_data.get("product_name", "–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä"),
                "comment": test_data.get("comment", "–¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"),
                "content": "–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–º –æ—Ç–∑—ã–≤–µ"
            }
        elif notification_type == "critical_stocks":
            products = test_data.get("products", [
                {"nm_id": "TEST_12345", "name": "–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä 1", "stock": 2},
                {"nm_id": "TEST_67890", "name": "–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä 2", "stock": 1}
            ])
            return {
                "type": "critical_stocks",
                "products": products,
                "content": "–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –æ—Å—Ç–∞—Ç–∫–∞—Ö"
            }
        elif notification_type == "order_buyout":
            return {
                "type": "order_buyout",
                "order_id": test_data.get("order_id", "TEST_ORDER"),
                "product_name": test_data.get("product_name", "–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä"),
                "amount": test_data.get("amount", 1000),
                "content": "–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã–∫—É–ø–µ –∑–∞–∫–∞–∑–∞"
            }
        elif notification_type == "order_return":
            return {
                "type": "order_return",
                "order_id": test_data.get("order_id", "TEST_ORDER"),
                "product_name": test_data.get("product_name", "–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä"),
                "amount": test_data.get("amount", 1000),
                "content": "–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–æ–∑–≤—Ä–∞—Ç–µ –∑–∞–∫–∞–∑–∞"
            }
        else:
            return {
                "type": notification_type,
                "content": f"–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ {notification_type}"
            }
    
    async def process_sales_events(
        self,
        user_id: int,
        cabinet_id: int,
        current_sales: List[Dict[str, Any]],
        previous_sales: List[Dict[str, Any]],
        bot_webhook_url: str
    ) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –ø—Ä–æ–¥–∞–∂ –∏ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            settings = self.settings_crud.get_user_settings(self.db, user_id)
            if not settings or not settings.notifications_enabled:
                return 0
            
            # –û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø—Ä–æ–¥–∞–∂–∞—Ö
            sales_events = self.event_detector.detect_sales_changes(
                user_id, current_sales, previous_sales
            )
            
            if not sales_events:
                return 0
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            filtered_events = self._filter_sales_events_by_settings(sales_events, settings)
            
            if not filtered_events:
                return 0
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            notifications_sent = 0
            for event in filtered_events:
                try:
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    notification = self.notification_generator.generate_sales_notification(event)
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è Telegram
                    telegram_text = self._format_sales_notification_for_telegram(notification)
                    
                    # Webhook —É–¥–∞–ª–µ–Ω - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —á–µ—Ä–µ–∑ polling
                    notifications_sent += 1
                        
                    # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ
                    self.sales_monitor.track_sales_change(user_id, event)
                
                except Exception as e:
                    logger.error(f"Error processing sales event {event}: {e}")
            
            return notifications_sent
            
        except Exception as e:
            logger.error(f"Error processing sales events for user {user_id}: {e}")
            return 0
    
    def _filter_sales_events_by_settings(self, events: List[Dict[str, Any]], settings) -> List[Dict[str, Any]]:
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π –ø—Ä–æ–¥–∞–∂ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        filtered_events = []
        
        for event in events:
            event_type = event.get("type")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
            if event_type == "new_buyout" and settings.order_buyouts_enabled:
                filtered_events.append(event)
            elif event_type == "new_return" and settings.order_returns_enabled:
                filtered_events.append(event)
            elif event_type == "sale_status_change" and settings.order_buyouts_enabled:
                filtered_events.append(event)
            elif event_type == "sale_cancellation_change" and settings.order_buyouts_enabled:
                filtered_events.append(event)
        
        return filtered_events
    
    def _format_sales_notification_for_telegram(self, notification: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–¥–∞–∂–µ –¥–ª—è Telegram"""
        notification_type = notification.get("type")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ BotMessageFormatter –Ω–µ –∏–º–µ–µ—Ç –º–µ—Ç–æ–¥–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∂
        if notification_type == "new_buyout":
            return f"üí∞ {notification.get('title', '–ù–æ–≤—ã–π –≤—ã–∫—É–ø')}\n\n{notification.get('content', '')}"
        elif notification_type == "new_return":
            return f"üîÑ {notification.get('title', '–ù–æ–≤—ã–π –≤–æ–∑–≤—Ä–∞—Ç')}\n\n{notification.get('content', '')}"
        elif notification_type == "sale_status_change":
            return f"üìä {notification.get('title', '–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞')}\n\n{notification.get('content', '')}"
        elif notification_type == "sale_cancellation_change":
            return f"‚ùå {notification.get('title', '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã')}\n\n{notification.get('content', '')}"
        else:
            return f"üìä {notification.get('title', '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–¥–∞–∂–µ')}\n\n{notification.get('content', '')}"
