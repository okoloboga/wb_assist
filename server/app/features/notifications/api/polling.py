"""
Polling API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
"""
from fastapi import APIRouter, Depends, HTTPException, status, Query
from sqlalchemy.orm import Session
from typing import List, Dict, Any, Optional
from datetime import datetime, timezone

from app.core.database import get_db
from app.features.user.crud import UserCRUD
from app.features.notifications.notification_service import NotificationService
from app.features.notifications.schemas import PollingResponse, NotificationEvent

router = APIRouter()


@router.get("/poll", response_model=PollingResponse)
async def get_new_notifications(
    telegram_id: int = Query(..., description="Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
    last_check: Optional[datetime] = Query(None, description="–í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏"),
    db: Session = Depends(get_db)
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_crud = UserCRUD(db)
        user = user_crud.get_user_by_telegram_id(telegram_id)
        if not user:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="User not found"
            )
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º TimezoneUtils
        from app.utils.timezone import TimezoneUtils
        
        # –ï—Å–ª–∏ last_check –Ω–µ —É–∫–∞–∑–∞–Ω, –±–µ—Ä–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è (—Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è)
        if not last_check:
            last_check = TimezoneUtils.now_msk()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º notification service
        notification_service = NotificationService(db)
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è
        events = await notification_service.get_new_events(
            user_id=user.id,
            last_check=last_check
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        import logging
        logger = logging.getLogger(__name__)
        logger.info(f"üì° Polling response for user {telegram_id}: {len(events)} events")
        if events:
            for event in events:
                logger.info(f"  üìã Event: {event.get('type', 'unknown')} - {event.get('data', {}).get('message', 'no message')}")
        
        return PollingResponse(
            success=True,
            events=events,
            last_check=TimezoneUtils.now_msk(),
            events_count=len(events)
        )
        
    except HTTPException:
        raise
    except Exception as e:
        import logging
        logger = logging.getLogger(__name__)
        logger.error(f"Error in polling endpoint for user {telegram_id}: {e}", exc_info=True)
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Internal server error: {str(e)}"
        )


@router.get("/poll/batch", response_model=Dict[str, Any])
async def get_new_notifications_batch(
    telegram_ids: str = Query(..., description="Comma-separated telegram IDs"),
    last_check: Optional[datetime] = Query(None, description="–í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏"),
    db: Session = Depends(get_db)
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏)
    """
    try:
        # –ü–∞—Ä—Å–∏–º telegram_ids
        try:
            user_telegram_ids = [int(tid.strip()) for tid in telegram_ids.split(',')]
        except ValueError:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="Invalid telegram_ids format"
            )
        
        # –ï—Å–ª–∏ last_check –Ω–µ —É–∫–∞–∑–∞–Ω, –±–µ—Ä–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è (—Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è)
        if not last_check:
            last_check = datetime.now(timezone.utc)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        user_crud = UserCRUD(db)
        users = []
        for telegram_id in user_telegram_ids:
            user = user_crud.get_user_by_telegram_id(telegram_id)
            if user:
                users.append(user)
        
        if not users:
            return {
                "success": True,
                "events": {},
                "last_check": datetime.now(timezone.utc),
                "total_events": 0
            }
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º notification service
        notification_service = NotificationService(db)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        all_events = {}
        total_events = 0
        
        for user in users:
            events = await notification_service.get_new_events(
                user_id=user.id,
                last_check=last_check
            )
            all_events[str(user.telegram_id)] = events
            total_events += len(events)
        
        return {
            "success": True,
            "events": all_events,
            "last_check": datetime.now(timezone.utc),
            "total_events": total_events
        }
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Internal server error: {str(e)}"
        )
