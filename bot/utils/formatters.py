from typing import Dict, Any, Optional, List
from datetime import datetime
import logging
import re
from functools import wraps
import inspect
from aiogram.exceptions import TelegramBadRequest
from aiogram.types import CallbackQuery, Message

logger = logging.getLogger(__name__)


def format_error_message(error: Optional[str], status_code: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not error:
        error = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å –∫–æ–¥–æ–≤
    if status_code == 503:
        return "üîß –°–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    elif status_code == 404:
        return "‚ùå –†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞."
    elif status_code == 400:
        return f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å: {error}"
    elif status_code == 401:
        return "üîê –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á."
    elif status_code == 403:
        return "üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏."
    elif status_code == 408:
        return "‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    elif status_code == 429:
        return "üö¶ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ."
    elif status_code >= 500:
        return "üîß –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    else:
        return f"‚ùå –û—à–∏–±–∫–∞: {error}"


def format_currency(amount: float) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞–ª—é—Ç—É"""
    return f"{amount:,.0f}‚ÇΩ".replace(",", " ")


def format_percentage(value: float) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç"""
    return f"{value:+.1f}%"


def format_datetime(dt_string: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è"""
    try:
        dt = datetime.fromisoformat(dt_string.replace('Z', '+00:00'))
        return dt.strftime("%d.%m.%Y %H:%M")
    except:
        return dt_string


def format_relative_time(dt_string: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è"""
    try:
        dt = datetime.fromisoformat(dt_string.replace('Z', '+00:00'))
        now = datetime.now(dt.tzinfo) if dt.tzinfo else datetime.now()
        diff = now - dt
        
        if diff.days > 0:
            return f"{diff.days} –¥–Ω. –Ω–∞–∑–∞–¥"
        elif diff.seconds > 3600:
            hours = diff.seconds // 3600
            return f"{hours} —á. –Ω–∞–∑–∞–¥"
        elif diff.seconds > 60:
            minutes = diff.seconds // 60
            return f"{minutes} –º–∏–Ω. –Ω–∞–∑–∞–¥"
        else:
            return "—Ç–æ–ª—å–∫–æ —á—Ç–æ"
    except:
        return dt_string


def format_stocks_summary(stocks: Dict[str, int]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–¥–∫—É –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º"""
    if not stocks:
        return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    
    formatted = []
    for size, quantity in stocks.items():
        if quantity == 0:
            formatted.append(f"{size}(0)")
        elif quantity < 5:
            formatted.append(f"{size}({quantity})‚ö†Ô∏è")
        else:
            formatted.append(f"{size}({quantity})")
    
    return " ".join(formatted)


def format_order_summary(order: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –∑–∞–∫–∞–∑–∞"""
    return (
        f"üßæ #{order.get('id', 'N/A')} | "
        f"{format_relative_time(order.get('date', ''))} | "
        f"{format_currency(order.get('amount', 0))}"
    )


def format_product_summary(product: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É —Ç–æ–≤–∞—Ä–∞"""
    return (
        f"üì¶ {product.get('name', 'N/A')} | "
        f"{product.get('brand', 'N/A')} | "
        f"{format_currency(product.get('price', 0))}"
    )


def truncate_text(text: str, max_length: int = 100) -> str:
    """–û–±—Ä–µ–∑–∞—Ç—å —Ç–µ–∫—Å—Ç –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã"""
    if len(text) <= max_length:
        return text
    return text[:max_length-3] + "..."


def format_rating(rating: float) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –∑–≤–µ–∑–¥–æ—á–∫–∞–º–∏"""
    full_stars = int(rating)
    half_star = 1 if rating - full_stars >= 0.5 else 0
    empty_stars = 5 - full_stars - half_star
    
    stars = "‚≠ê" * full_stars
    if half_star:
        stars += "‚ú®"
    stars += "‚òÜ" * empty_stars
    
    return f"{stars} {rating:.1f}/5"


async def safe_edit_message(
    callback: CallbackQuery, 
    text: str, 
    reply_markup=None,
    user_id: int = None,
    parse_mode: Optional[str] = None
) -> bool:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π TelegramBadRequest
    
    Returns:
        bool: True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ, False –µ—Å–ª–∏ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –ª–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ (–±–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ —É mock)
        current_text = getattr(callback.message, "text", None)
        current_markup = getattr(callback.message, "reply_markup", None)
        if (current_text == text and 
            current_markup == reply_markup):
            logger.info(f"üîç DEBUG: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id or callback.from_user.id}")
            await callback.answer()
            return False
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.edit_text(
            text,
            reply_markup=reply_markup,
            parse_mode=parse_mode
        )
        return True
        
    except TelegramBadRequest as e:
        error_msg = str(e).lower()
        
        if "message is not modified" in error_msg:
            logger.info(f"üîç DEBUG: –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id or callback.from_user.id}")
            await callback.answer()
            return False
        elif "message to edit not found" in error_msg:
            logger.warning(f"‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id or callback.from_user.id}")
            await callback.answer()
            return False
        else:
            logger.error(f"‚ùå Telegram API error for user {user_id or callback.from_user.id}: {e}")
            await callback.answer()
            return False
    except Exception as e:
        logger.error(f"‚ùå Unexpected error for user {user_id or callback.from_user.id}: {e}")
        await callback.answer()
        return False


async def safe_send_message(
    message: Message,
    text: str,
    reply_markup=None,
    user_id: int = None,
    parse_mode: Optional[str] = None
) -> bool:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    
    Returns:
        bool: True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, False –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
    """
    try:
        await message.answer(
            text=text,
            reply_markup=reply_markup,
            parse_mode=parse_mode
        )
        return True
        
    except TelegramBadRequest as e:
        logger.error(f"‚ùå Telegram API error for user {user_id or message.from_user.id}: {e}")
        return False
    except Exception as e:
        logger.error(f"‚ùå Unexpected error for user {user_id or message.from_user.id}: {e}")
        return False


def handle_telegram_errors(func):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ Telegram –æ—à–∏–±–æ–∫ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö.
    –§–∏–ª—å—Ç—Ä—É–µ—Ç –ª–∏—à–Ω–∏–µ kwargs, –∫–æ—Ç–æ—Ä—ã–µ Aiogram –ø–µ—Ä–µ–¥–∞—ë—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'dispatcher').
    """
    @wraps(func)
    async def wrapper(*args, **kwargs):
        try:
            # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ kwargs, –∫–æ—Ç–æ—Ä—ã–µ –æ–∂–∏–¥–∞–µ—Ç —Ü–µ–ª–µ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è
            try:
                sig = inspect.signature(func)
                allowed = set(sig.parameters.keys())
                filtered_kwargs = {k: v for k, v in kwargs.items() if k in allowed}
            except Exception:
                filtered_kwargs = kwargs
            return await func(*args, **filtered_kwargs)
        except TelegramBadRequest as e:
            # –ù–∞—Ö–æ–¥–∏–º callback –∏–ª–∏ message –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö
            callback = None
            message = None
            user_id = None
            
            for arg in args:
                if hasattr(arg, 'from_user') and hasattr(arg, 'answer'):
                    callback = arg
                    user_id = arg.from_user.id
                    break
                elif hasattr(arg, 'from_user') and hasattr(arg, 'reply'):
                    message = arg
                    user_id = arg.from_user.id
                    break
            
            error_msg = str(e).lower()
            
            if "message is not modified" in error_msg:
                logger.info(f"üîç DEBUG: –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                if callback:
                    await callback.answer()
                return
            elif "message to edit not found" in error_msg:
                logger.warning(f"‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                if callback:
                    await callback.answer()
                return
            else:
                logger.error(f"‚ùå Telegram API error for user {user_id}: {e}")
                if callback:
                    await callback.answer()
                return
        except Exception as e:
            logger.error(f"‚ùå Unexpected error in {func.__name__}: {e}")
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ callback –¥–ª—è –æ—Ç–≤–µ—Ç–∞
            for arg in args:
                if hasattr(arg, 'answer'):
                    try:
                        await arg.answer()
                    except:
                        pass
                    break
    
    return wrapper


def escape_markdown_v2(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã MarkdownV2 –¢–µ–ª–µ–≥—Ä–∞–º–∞."""
    if not text:
        return ""
    specials = r"_[]()~`>#+-=|{}.!*"
    return re.sub(f"([{re.escape(specials)}])", r"\\\1", text)


def split_telegram_message(text: str, limit: int = 4000) -> List[str]:
    """–†–∞–∑–±–∏–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏, –Ω–µ –ø—Ä–µ–≤—ã—à–∞—é—â–∏–µ limit —Å–∏–º–≤–æ–ª–æ–≤."""
    if not text:
        return [""]
    if len(text) <= limit:
        return [text]

    parts: List[str] = []
    buf: List[str] = []
    buf_len = 0

    for line in text.splitlines(keepends=True):
        if buf_len + len(line) > limit:
            parts.append("".join(buf))
            buf = [line]
            buf_len = len(line)
        else:
            buf.append(line)
            buf_len += len(line)

    if buf:
        parts.append("".join(buf))
    return parts