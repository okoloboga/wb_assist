import os
import asyncio
import logging
from typing import Tuple, Optional, Dict, Any, List
from dataclasses import dataclass

import aiohttp

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# URL —Å–µ—Ä–≤–µ—Ä–∞ –∏ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
SERVER_HOST = os.getenv("SERVER_HOST", "http://127.0.0.1:8000")
API_SECRET_KEY = os.getenv("API_SECRET_KEY")


@dataclass
class BotAPIResponse:
    """–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Bot API"""
    success: bool
    data: Optional[Dict[str, Any]] = None
    telegram_text: Optional[str] = None
    error: Optional[str] = None
    status_code: int = 200
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π API
    orders: Optional[List[Dict[str, Any]]] = None
    pagination: Optional[Dict[str, Any]] = None
    order: Optional[Dict[str, Any]] = None
    stocks: Optional[Dict[str, Any]] = None


class BotAPIClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Bot API —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞–º–∏"""
    
    def __init__(self):
        self.base_url = f"{SERVER_HOST}/api/v1/bot"
        self.headers = {
            "X-API-SECRET-KEY": API_SECRET_KEY,
            "Content-Type": "application/json"
        }
        self.max_retries = 3
        self.retry_delay = 1  # —Å–µ–∫—É–Ω–¥—ã
        self.timeout = 30  # —Å–µ–∫—É–Ω–¥—ã
        
        # –û—Ç–ª–∞–¥–æ—á–Ω—ã–µ –ª–æ–≥–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        logger.info(f"üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è BotAPIClient:")
        logger.info(f"   üåê SERVER_HOST: {SERVER_HOST}")
        logger.info(f"   üîó Base URL: {self.base_url}")
        logger.info(f"   üîë API_SECRET_KEY: {'***' + API_SECRET_KEY[-4:] if API_SECRET_KEY else '–ù–ï –ù–ê–ô–î–ï–ù'}")
        logger.info(f"   üìã Headers: {self.headers}")
        logger.info(f"   üîÑ Max retries: {self.max_retries}")
        logger.info(f"   ‚è∞ Timeout: {self.timeout}s")
        
        if not API_SECRET_KEY:
            logger.error("‚ùå API_SECRET_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
            raise ValueError("API_SECRET_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

    async def _make_request_with_retry(
        self, 
        method: str, 
        endpoint: str, 
        params: Optional[Dict] = None,
        data: Optional[Dict] = None,
        timeout: Optional[int] = None
    ) -> BotAPIResponse:
        """HTTP –∑–∞–ø—Ä–æ—Å —Å retry –ª–æ–≥–∏–∫–æ–π"""
        timeout = timeout or self.timeout
        
        for attempt in range(self.max_retries):
            try:
                async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=timeout)) as session:
                    url = f"{self.base_url}{endpoint}"
                    async with session.request(
                        method=method.upper(),
                        url=url,
                        headers=self.headers,
                        params=params,
                        json=data
                    ) as response:
                        return await self._handle_response(response)
                            
            except asyncio.TimeoutError:
                logger.warning(f"‚è∞ Timeout –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}/{self.max_retries} –¥–ª—è {endpoint}")
                if attempt < self.max_retries - 1:
                    await asyncio.sleep(self.retry_delay * (2 ** attempt))  # Exponential backoff
                    continue
                else:
                    return BotAPIResponse(
                        success=False,
                        error="Request timeout",
                        status_code=408
                    )
                    
            except aiohttp.ClientError as e:
                logger.warning(f"üåê Network error –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}/{self.max_retries} –¥–ª—è {endpoint}: {e}")
                if attempt < self.max_retries - 1:
                    await asyncio.sleep(self.retry_delay * (2 ** attempt))
                    continue
                else:
                    return BotAPIResponse(
                        success=False,
                        error=f"Network error: {str(e)}",
                        status_code=500
                    )
            except Exception as e:
                logger.error(f"üí• –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {e}")
                return BotAPIResponse(
                    success=False,
                    error="Internal client error",
                    status_code=500
                )
        
        return BotAPIResponse(
            success=False,
            error=f"Failed after {self.max_retries} attempts",
            status_code=500
        )

    async def _handle_response(self, response: aiohttp.ClientResponse) -> BotAPIResponse:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ HTTP –æ—Ç–≤–µ—Ç–∞ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        try:
            data = await response.json()
            logger.info(f"üîç DEBUG: _handle_response –ø–æ–ª—É—á–∏–ª data = {data}")
            
            if response.status == 200:
                # –î–ª—è dashboard —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ –¥–∞–Ω–Ω—ã–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –∫–æ—Ä–Ω–µ –æ—Ç–≤–µ—Ç–∞
                if "dashboard" in data:
                    return BotAPIResponse(
                        success=True,
                        data=data,  # –ü–µ—Ä–µ–¥–∞–µ–º –≤–µ—Å—å –æ—Ç–≤–µ—Ç –∫–∞–∫ data
                        telegram_text=data.get("telegram_text"),
                        status_code=response.status
                    )
                else:
                    return BotAPIResponse(
                        success=True,
                        data=data.get("data"),
                        telegram_text=data.get("telegram_text"),
                        status_code=response.status,
                        # –ï–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ - –ø–æ–ª—è –≤ –∫–æ—Ä–Ω–µ –æ—Ç–≤–µ—Ç–∞
                        orders=data.get("orders"),
                        pagination=data.get("pagination"),
                        order=data.get("order"),
                        stocks=data.get("stocks")
                    )
            elif response.status == 404:
                logger.warning(f"üîç Resource not found: {response.url}")
                return BotAPIResponse(
                    success=False,
                    error="–†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    status_code=response.status
                )
            elif response.status == 429:
                logger.warning(f"‚è∞ Rate limit exceeded: {response.url}")
                return BotAPIResponse(
                    success=False,
                    error="–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ",
                    status_code=response.status
                )
            elif response.status >= 500:
                logger.error(f"üî• Server error {response.status}: {response.url}")
                return BotAPIResponse(
                    success=False,
                    error="–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ",
                    status_code=response.status
                )
            else:
                error_msg = data.get("error") or data.get("detail") or f"HTTP {response.status}"
                return BotAPIResponse(
                    success=False,
                    error=error_msg,
                    status_code=response.status
                )
                
        except Exception as e:
            logger.error(f"üí• Error parsing response: {e}")
            return BotAPIResponse(
                success=False,
                error="–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞",
                status_code=response.status
            )

    async def _make_request_with_timeout(
        self, 
        method: str, 
        endpoint: str, 
        params: Optional[Dict] = None,
        json_data: Optional[Dict] = None,
        timeout: int = 300
    ) -> BotAPIResponse:
        """–ë–∞–∑–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º"""
        url = f"{self.base_url}{endpoint}"
        
        # –û—Ç–ª–∞–¥–æ—á–Ω—ã–µ –ª–æ–≥–∏
        logger.info(f"üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–µ—Ä—É (—Ç–∞–π–º–∞—É—Ç: {timeout}s):")
        logger.info(f"   üìç URL: {url}")
        logger.info(f"   üîß Method: {method}")
        logger.info(f"   üìã Params: {params}")
        logger.info(f"   üì¶ JSON: {json_data}")
        logger.info(f"   üîë Headers: {self.headers}")
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.request(
                    method=method,
                    url=url,
                    headers=self.headers,
                    params=params,
                    json=json_data,
                    timeout=aiohttp.ClientTimeout(total=timeout)
                ) as resp:
                    logger.info(f"üì° –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:")
                    logger.info(f"   üìä Status: {resp.status}")
                    
                    try:
                        response_data = await resp.json()
                        logger.info(f"   üì¶ Response data: {response_data}")
                    except aiohttp.ContentTypeError:
                        response_data = {"error": "Invalid response format"}
                        logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: Invalid response format")
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    logger.info(f"üîç DEBUG: response_data structure: {response_data}")
                    logger.info(f"üîç DEBUG: orders from response: {response_data.get('orders') if isinstance(response_data, dict) else None}")
                    logger.info(f"üîç DEBUG: pagination from response: {response_data.get('pagination') if isinstance(response_data, dict) else None}")
                    
                    result = BotAPIResponse(
                        success=resp.status < 400,
                        data=response_data,
                        telegram_text=response_data.get("telegram_text") if isinstance(response_data, dict) else None,
                        error=response_data.get("error") if isinstance(response_data, dict) else None,
                        status_code=resp.status,
                        # –ó–∞–ø–æ–ª–Ω—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                        orders=response_data.get("orders") if isinstance(response_data, dict) else None,
                        pagination=response_data.get("pagination") if isinstance(response_data, dict) else None
                    )
                    
                    logger.info(f"üîç DEBUG: BotAPIResponse created - orders: {result.orders}, pagination: {result.pagination}")
                    
                    logger.info(f"‚úÖ –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ: {result.success}")
                    return result
                    
        except asyncio.TimeoutError:
            logger.error(f"‚è∞ –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞:")
            logger.error(f"   üîó –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ {url}")
            return BotAPIResponse(
                success=False,
                error="Request timeout",
                status_code=408
            )
        except aiohttp.ClientConnectorError as e:
            logger.error(f"üîå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º:")
            logger.error(f"   üîó URL: {url}")
            logger.error(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
            return BotAPIResponse(
                success=False,
                error="Connection error",
                status_code=503
            )
        except Exception as e:
            logger.error(f"üí• –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API:")
            logger.error(f"   üîó URL: {url}")
            logger.error(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
            return BotAPIResponse(
                success=False,
                error="Internal error",
                status_code=500
            )

    async def _make_request(
        self, 
        method: str, 
        endpoint: str, 
        params: Optional[Dict] = None,
        json_data: Optional[Dict] = None
    ) -> BotAPIResponse:
        """–ë–∞–∑–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤"""
        url = f"{self.base_url}{endpoint}"
        
        # –û—Ç–ª–∞–¥–æ—á–Ω—ã–µ –ª–æ–≥–∏
        logger.info(f"üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–µ—Ä—É:")
        logger.info(f"   üìç URL: {url}")
        logger.info(f"   üîß Method: {method}")
        logger.info(f"   üìã Params: {params}")
        logger.info(f"   üì¶ JSON: {json_data}")
        logger.info(f"üîç DEBUG: Starting request to {url}")
        logger.info(f"   üîë Headers: {self.headers}")
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.request(
                    method=method,
                    url=url,
                    headers=self.headers,
                    params=params,
                    json=json_data,
                    timeout=aiohttp.ClientTimeout(total=300)  # 5 –º–∏–Ω—É—Ç –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
                ) as resp:
                    logger.info(f"üì° –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:")
                    logger.info(f"   üìä Status: {resp.status}")
                    
                    try:
                        response_data = await resp.json()
                        logger.info(f"   üì¶ Response data: {response_data}")
                    except aiohttp.ContentTypeError:
                        response_data = {"error": "Invalid response format"}
                        logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: Invalid response format")
                    
                    result = BotAPIResponse(
                        success=resp.status < 400,
                        data=response_data,
                        telegram_text=response_data.get("telegram_text"),
                        error=response_data.get("error"),
                        status_code=resp.status
                    )
                    
                    logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞: success={result.success}, status_code={result.status_code}")
                    return result

        except aiohttp.ClientConnectorError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º: {e}")
            logger.error(f"   üîó –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ {url}")
            return BotAPIResponse(
                success=False,
                error="Service Unavailable",
                status_code=503
            )
        except asyncio.TimeoutError as e:
            logger.error(f"‚è∞ –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞: {e}")
            logger.error(f"   üîó –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ {url}")
            return BotAPIResponse(
                success=False,
                error="Request timeout",
                status_code=408
            )
        except Exception as e:
            logger.error(f"üí• –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {e}")
            logger.error(f"   üîó –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ {url}")
            return BotAPIResponse(
                success=False,
                error="Internal client error",
                status_code=500
            )

    # Dashboard –∏ –æ–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    async def get_dashboard(self, user_id: int) -> BotAPIResponse:
        """–ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é —Å–≤–æ–¥–∫—É –ø–æ –∫–∞–±–∏–Ω–µ—Ç—É WB"""
        logger.info(f"üîç DEBUG: get_dashboard –≤—ã–∑–≤–∞–Ω —Å user_id={user_id}")
        params = {"telegram_id": user_id}
        logger.info(f"üîç DEBUG: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —Å params={params}")
        return await self._make_request_with_retry("GET", "/dashboard", params=params)

    # –ó–∞–∫–∞–∑—ã
    async def get_recent_orders(
        self, 
        user_id: int, 
        limit: int = 10, 
        offset: int = 0,
        status: Optional[str] = None
    ) -> BotAPIResponse:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ —Å—Ç–∞—Ç—É—Å—É"""
        logger.info(f"üì¶ –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, limit={limit}, offset={offset}, status={status}")
        params = {"telegram_id": user_id, "limit": limit, "offset": offset}
        if status:
            params["status"] = status
        return await self._make_request_with_retry("GET", "/orders/recent", params=params)

    async def get_order_details(self, order_id: int, user_id: int) -> BotAPIResponse:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ"""
        params = {"telegram_id": user_id}
        return await self._make_request_with_retry("GET", f"/orders/{order_id}", params=params)

    # –û—Å—Ç–∞—Ç–∫–∏ –∏ —Ç–æ–≤–∞—Ä—ã
    async def get_critical_stocks(
        self, 
        user_id: int, 
        limit: int = 20, 
        offset: int = 0
    ) -> BotAPIResponse:
        """–ü–æ–ª—É—á–∏—Ç—å –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏"""
        params = {"telegram_id": user_id, "limit": limit, "offset": offset}
        return await self._make_request_with_retry("GET", "/stocks/critical", params=params)

    # –û—Ç–∑—ã–≤—ã –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
    async def get_reviews_summary(
        self, 
        user_id: int, 
        limit: int = 10, 
        offset: int = 0
    ) -> BotAPIResponse:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–µ –∏ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –æ—Ç–∑—ã–≤—ã"""
        params = {"telegram_id": user_id, "limit": limit, "offset": offset}
        return await self._make_request("GET", "/reviews/summary", params=params)

    async def get_analytics_sales(
        self, 
        user_id: int, 
        period: str = "7d"
    ) -> BotAPIResponse:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–¥–∞–∂ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫—É"""
        params = {"telegram_id": user_id, "period": period}
        return await self._make_request("GET", "/analytics/sales", params=params)

    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
    async def start_sync(self, user_id: int) -> BotAPIResponse:
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä—É—á–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö"""
        params = {"telegram_id": user_id}
        return await self._make_request("POST", "/sync/start", params=params)
    
    async def start_initial_sync(self, user_id: int) -> BotAPIResponse:
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–µ—Ä–≤–∏—á–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º"""
        params = {"telegram_id": user_id}
        return await self._make_request_with_retry("POST", "/sync/start", params=params, timeout=600)  # 10 –º–∏–Ω—É—Ç

    async def get_sync_status(self, user_id: int) -> BotAPIResponse:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        params = {"telegram_id": user_id}
        return await self._make_request("GET", "/sync/status", params=params)

    # WB –∫–∞–±–∏–Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    async def connect_wb_cabinet(
        self, 
        user_id: int, 
        api_key: str
    ) -> BotAPIResponse:
        """–ü–æ–¥–∫–ª—é—á–∏—Ç—å WB –∫–∞–±–∏–Ω–µ—Ç —á–µ—Ä–µ–∑ API –∫–ª—é—á"""
        params = {"telegram_id": user_id}
        json_data = {"api_key": api_key}
        return await self._make_request("POST", "/cabinets/connect", params=params, json_data=json_data)


    # ===== –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø (S3) =====

    async def get_notification_settings(self, user_id: int) -> BotAPIResponse:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        logger.info(f"üîî –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        params = {"telegram_id": user_id}
        return await self._make_request("GET", "/notifications/settings", params=params)

    async def update_notification_settings(self, user_id: int, updates: Dict[str, Any]) -> BotAPIResponse:
        """–û–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—á–∞—Å—Ç–∏—á–Ω–æ)"""
        logger.info(f"üõ† –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {updates}")
        params = {"telegram_id": user_id}
        return await self._make_request("POST", "/notifications/settings", params=params, json_data=updates)

    async def update_user_webhook(self, user_id: int, webhook_url: str) -> BotAPIResponse:
        """–û–±–Ω–æ–≤–∏—Ç—å webhook URL –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        logger.info(f"üîó –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ webhook URL –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {webhook_url}")
        params = {"telegram_id": user_id}
        json_data = {"bot_webhook_url": webhook_url}
        return await self._make_request("POST", "/users/webhook", params=params, json_data=json_data)

    # ===== –ù–û–í–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ò –ó–ê–ö–ê–ó–û–í =====

    async def get_orders_statistics(self, user_id: int) -> BotAPIResponse:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∑–∞–∫–∞–∑–∞–º"""
        logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        params = {"telegram_id": user_id}
        return await self._make_request("GET", "/orders/statistics", params=params)

    # ===== –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –ü–†–û–î–ê–ñ–ê–ú–ò =====

    async def get_recent_sales(
        self, 
        user_id: int, 
        limit: int = 10, 
        offset: int = 0,
        sale_type: Optional[str] = None
    ) -> BotAPIResponse:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏ –∏ –≤–æ–∑–≤—Ä–∞—Ç—ã"""
        logger.info(f"üí∞ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, limit={limit}, offset={offset}, type={sale_type}")
        params = {"user_id": user_id, "limit": limit, "offset": offset}
        if sale_type:
            params["sale_type"] = sale_type
        return await self._make_request("GET", "/sales/recent", params=params)

    async def get_buyouts(
        self, 
        user_id: int, 
        limit: int = 10,
        date_from: Optional[str] = None
    ) -> BotAPIResponse:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ –≤—ã–∫—É–ø—ã"""
        logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–∫—É–ø–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, limit={limit}, date_from={date_from}")
        params = {"user_id": user_id, "limit": limit}
        if date_from:
            params["date_from"] = date_from
        return await self._make_request("GET", "/sales/buyouts", params=params)

    async def get_returns(
        self, 
        user_id: int, 
        limit: int = 10,
        date_from: Optional[str] = None
    ) -> BotAPIResponse:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ –≤–æ–∑–≤—Ä–∞—Ç—ã"""
        logger.info(f"‚Ü©Ô∏è –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, limit={limit}, date_from={date_from}")
        params = {"user_id": user_id, "limit": limit}
        if date_from:
            params["date_from"] = date_from
        return await self._make_request("GET", "/sales/returns", params=params)

    async def get_sales_statistics(
        self, 
        user_id: int,
        date_from: Optional[str] = None,
        date_to: Optional[str] = None
    ) -> BotAPIResponse:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–¥–∞–∂"""
        logger.info(f"üìà –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–¥–∞–∂ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, from={date_from}, to={date_to}")
        params = {"user_id": user_id}
        if date_from:
            params["date_from"] = date_from
        if date_to:
            params["date_to"] = date_to
        return await self._make_request("GET", "/sales/statistics", params=params)

    # ===== –ù–û–í–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –ö–ê–ë–ò–ù–ï–¢–ê–ú–ò =====

    async def create_or_connect_cabinet(
        self, 
        user_id: int, 
        api_key: str,
        name: str
    ) -> BotAPIResponse:
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–∞–±–∏–Ω–µ—Ç –∏–ª–∏ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É"""
        logger.info(f"üè¢ –°–æ–∑–¥–∞–Ω–∏–µ/–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–±–∏–Ω–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, name={name}")
        params = {"user_id": user_id, "api_key": api_key, "name": name}
        return await self._make_request("POST", "/wb/cabinets/", params=params)

    async def get_user_cabinets(self, user_id: int) -> BotAPIResponse:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–∞–±–∏–Ω–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        logger.info(f"üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–±–∏–Ω–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        params = {"user_id": user_id}
        return await self._make_request("GET", "/wb/cabinets/", params=params)

    async def validate_all_cabinets(self) -> BotAPIResponse:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ—Ö –∫–∞–±–∏–Ω–µ—Ç–æ–≤"""
        logger.info("üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ—Ö –∫–∞–±–∏–Ω–µ—Ç–æ–≤")
        return await self._make_request("POST", "/api/v1/wb/cabinets/validation/validate-all")

    # ===== DEPRECATED –ú–ï–¢–û–î–´ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏) =====

    async def connect_wb_cabinet(
        self, 
        user_id: int, 
        api_key: str
    ) -> BotAPIResponse:
        """–ü–æ–¥–∫–ª—é—á–∏—Ç—å WB –∫–∞–±–∏–Ω–µ—Ç —á–µ—Ä–µ–∑ API –∫–ª—é—á (DEPRECATED)"""
        logger.warning("‚ö†Ô∏è DEPRECATED: connect_wb_cabinet —É—Å—Ç–∞—Ä–µ–ª, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ create_or_connect_cabinet")
        params = {"telegram_id": user_id}
        json_data = {"api_key": api_key}
        return await self._make_request("POST", "/cabinets/connect", params=params, json_data=json_data)

    async def get_cabinet_status(self, user_id: int) -> BotAPIResponse:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–∞–±–∏–Ω–µ—Ç–æ–≤ (DEPRECATED)"""
        logger.warning("‚ö†Ô∏è DEPRECATED: get_cabinet_status —É—Å—Ç–∞—Ä–µ–ª, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ get_user_cabinets")
        params = {"telegram_id": user_id}
        return await self._make_request("GET", "/cabinets/status", params=params)

    # ===== –ú–ï–¢–û–î–´ –≠–ö–°–ü–û–†–¢–ê –í GOOGLE SHEETS (S4) =====

    async def set_cabinet_spreadsheet(self, cabinet_id: int, spreadsheet_url: str) -> BotAPIResponse:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç spreadsheet_id –¥–ª—è –∫–∞–±–∏–Ω–µ—Ç–∞"""
        logger.info(f"üìä –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ spreadsheet –¥–ª—è –∫–∞–±–∏–Ω–µ—Ç–∞ {cabinet_id}")
        
        url = f"{SERVER_HOST}/api/export/cabinet/{cabinet_id}/spreadsheet"
        params = {"spreadsheet_url": spreadsheet_url}
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    url,
                    params=params,
                    headers=self.headers,
                    timeout=aiohttp.ClientTimeout(total=self.timeout)
                ) as resp:
                    response_data = await resp.json()
                    
                    if resp.status == 200:
                        logger.info(f"‚úÖ Spreadsheet —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {response_data.get('spreadsheet_id', 'N/A')}")
                        return BotAPIResponse(
                            success=True,
                            data=response_data,
                            status_code=resp.status
                        )
                    else:
                        error_msg = response_data.get("detail", "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è spreadsheet")
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è spreadsheet: {error_msg}")
                        return BotAPIResponse(
                            success=False,
                            error=error_msg,
                            status_code=resp.status
                        )
                        
        except Exception as e:
            logger.error(f"üí• –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è spreadsheet: {e}")
            return BotAPIResponse(
                success=False,
                error=f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}",
                status_code=500
            )

    async def update_cabinet_spreadsheet(self, cabinet_id: int) -> BotAPIResponse:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç Google Sheets —Ç–∞–±–ª–∏—Ü—É –∫–∞–±–∏–Ω–µ—Ç–∞"""
        logger.info(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∫–∞–±–∏–Ω–µ—Ç–∞ {cabinet_id}")
        
        url = f"{SERVER_HOST}/api/export/cabinet/{cabinet_id}/update"
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    url,
                    headers=self.headers,
                    timeout=aiohttp.ClientTimeout(total=self.timeout)
                ) as resp:
                    response_data = await resp.json()
                    
                    if resp.status == 200:
                        logger.info(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –∫–∞–±–∏–Ω–µ—Ç–∞ {cabinet_id}")
                        return BotAPIResponse(
                            success=True,
                            data=response_data,
                            status_code=resp.status
                        )
                    else:
                        error_msg = response_data.get("detail", "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã")
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: {error_msg}")
                        return BotAPIResponse(
                            success=False,
                            error=error_msg,
                            status_code=resp.status
                        )
                        
        except Exception as e:
            logger.error(f"üí• –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: {e}")
            return BotAPIResponse(
                success=False,
                error=f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {str(e)}",
                status_code=500
            )

    async def create_export_token(self, user_id: int, cabinet_id: int) -> BotAPIResponse:
        """–°–æ–∑–¥–∞–µ—Ç —Ç–æ–∫–µ–Ω —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–ª—è –∫–∞–±–∏–Ω–µ—Ç–∞"""
        logger.info(f"üîë –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–ª—è –∫–∞–±–∏–Ω–µ—Ç–∞ {cabinet_id}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL –∏ –º–µ—Ç–æ–¥
        url = f"{SERVER_HOST}/api/export/token"
        json_data = {
            "user_id": user_id,
            "cabinet_id": cabinet_id
        }
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    url,
                    json=json_data,
                    headers=self.headers,
                    timeout=aiohttp.ClientTimeout(total=self.timeout)
                ) as resp:
                    response_data = await resp.json()
                    
                    if resp.status == 200:
                        logger.info(f"‚úÖ –¢–æ–∫–µ–Ω —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å–æ–∑–¥–∞–Ω: {response_data.get('token', 'N/A')}")
                        return BotAPIResponse(
                            success=True,
                            data=response_data,
                            status_code=resp.status
                        )
                    else:
                        error_msg = response_data.get("detail", "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞")
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {error_msg}")
                        return BotAPIResponse(
                            success=False,
                            error=error_msg,
                            status_code=resp.status
                        )
                        
        except Exception as e:
            logger.error(f"üí• –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
            return BotAPIResponse(
                success=False,
                error=f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {str(e)}",
                status_code=500
            )

    async def create_google_sheets_template(self, cabinet_name: str) -> BotAPIResponse:
        """–°–æ–∑–¥–∞–µ—Ç —à–∞–±–ª–æ–Ω Google Sheets"""
        logger.info(f"üìä –°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ Google Sheets –¥–ª—è {cabinet_name}")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL –∏ –º–µ—Ç–æ–¥
        url = f"{SERVER_HOST}/api/export/template/create"
        params = {
            "template_name": f"WB Assist - {cabinet_name}"
        }
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    url,
                    params=params,
                    headers=self.headers,
                    timeout=aiohttp.ClientTimeout(total=self.timeout)
                ) as resp:
                    response_data = await resp.json()
                    
                    if resp.status == 200:
                        logger.info(f"‚úÖ –®–∞–±–ª–æ–Ω —Å–æ–∑–¥–∞–Ω: {response_data.get('template_id', 'N/A')}")
                        return BotAPIResponse(
                            success=True,
                            data=response_data,
                            status_code=resp.status
                        )
                    else:
                        error_msg = response_data.get("detail", "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞")
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞: {error_msg}")
                        return BotAPIResponse(
                            success=False,
                            error=error_msg,
                            status_code=resp.status
                        )
                        
        except Exception as e:
            logger.error(f"üí• –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ Google Sheets: {e}")
            return BotAPIResponse(
                success=False,
                error=f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞: {str(e)}",
                status_code=500
            )


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞
bot_api_client = BotAPIClient()


# –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å - —Å—Ç–∞—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def register_user_on_server(payload: Dict[str, Any]) -> Tuple[int, Optional[Dict[str, Any]]]:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä.

    :param payload: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (telegram_id, username, –∏ —Ç.–¥.).
    :return: –ö–æ—Ä—Ç–µ–∂ (—Å—Ç–∞—Ç—É—Å_–∫–æ–¥, json_–æ—Ç–≤–µ—Ç_–∏–ª–∏_None).
    """
    register_url = f"{SERVER_HOST}/users/"
    headers = {
        "X-API-SECRET-KEY": API_SECRET_KEY
    }

    if not API_SECRET_KEY:
        logger.error("API_SECRET_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
        return 500, {"error": "Client configuration error"}

    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(register_url, json=payload, headers=headers) as resp:
                try:
                    response_json = await resp.json()
                except aiohttp.ContentTypeError:
                    response_json = None
                return resp.status, response_json

    except aiohttp.ClientConnectorError as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º: {e}")
        return 503, {"error": "Service Unavailable"} # 503 Service Unavailable
    except Exception as e:
        logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {e}")
        return 500, {"error": "Internal client error"}

    async def get_cabinet_id(self, user_id: int) -> BotAPIResponse:
        """–ü–æ–ª—É—á–∞–µ—Ç ID –∫–∞–±–∏–Ω–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            url = f"{SERVER_HOST}/api/v1/wb/cabinets/status"
            params = {"telegram_id": user_id}
            
            logger.info(f"üîç –ü–æ–ª—É—á–µ–Ω–∏–µ ID –∫–∞–±–∏–Ω–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            status_code, response_data = await self._make_request_with_retry("GET", url, params=params)
            
            if status_code == 200:
                return BotAPIResponse(
                    success=True,
                    data=response_data,
                    cabinet_id=response_data.get("cabinet_id")
                )
            else:
                return BotAPIResponse(
                    success=False,
                    error=response_data.get("detail", "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID –∫–∞–±–∏–Ω–µ—Ç–∞"),
                    status_code=status_code
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID –∫–∞–±–∏–Ω–µ—Ç–∞: {e}")
            return BotAPIResponse(
                success=False,
                error=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID –∫–∞–±–∏–Ω–µ—Ç–∞: {str(e)}",
                status_code=500
            )
