import os
import asyncio
import logging
from typing import Tuple, Optional, Dict, Any, List
from dataclasses import dataclass

import aiohttp

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# URL —Å–µ—Ä–≤–µ—Ä–∞ –∏ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
SERVER_HOST = os.getenv("SERVER_HOST", "http://127.0.0.1:8000")
API_SECRET_KEY = os.getenv("API_SECRET_KEY")


@dataclass
class BotAPIResponse:
    """–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Bot API"""
    success: bool
    data: Optional[Dict[str, Any]] = None
    telegram_text: Optional[str] = None
    error: Optional[str] = None
    status_code: int = 200


class BotAPIClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Bot API —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞–º–∏"""
    
    def __init__(self):
        self.base_url = f"{SERVER_HOST}/api/v1/bot"
        self.headers = {
            "X-API-SECRET-KEY": API_SECRET_KEY,
            "Content-Type": "application/json"
        }
        
        # –û—Ç–ª–∞–¥–æ—á–Ω—ã–µ –ª–æ–≥–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        logger.info(f"üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è BotAPIClient:")
        logger.info(f"   üåê SERVER_HOST: {SERVER_HOST}")
        logger.info(f"   üîó Base URL: {self.base_url}")
        logger.info(f"   üîë API_SECRET_KEY: {'***' + API_SECRET_KEY[-4:] if API_SECRET_KEY else '–ù–ï –ù–ê–ô–î–ï–ù'}")
        logger.info(f"   üìã Headers: {self.headers}")
        
        if not API_SECRET_KEY:
            logger.error("‚ùå API_SECRET_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
            raise ValueError("API_SECRET_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

    async def _make_request(
        self, 
        method: str, 
        endpoint: str, 
        params: Optional[Dict] = None,
        json_data: Optional[Dict] = None
    ) -> BotAPIResponse:
        """–ë–∞–∑–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤"""
        url = f"{self.base_url}{endpoint}"
        
        # –û—Ç–ª–∞–¥–æ—á–Ω—ã–µ –ª–æ–≥–∏
        logger.info(f"üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–µ—Ä—É:")
        logger.info(f"   üìç URL: {url}")
        logger.info(f"   üîß Method: {method}")
        logger.info(f"   üìã Params: {params}")
        logger.info(f"   üì¶ JSON: {json_data}")
        logger.info(f"   üîë Headers: {self.headers}")
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.request(
                    method=method,
                    url=url,
                    headers=self.headers,
                    params=params,
                    json=json_data,
                    timeout=aiohttp.ClientTimeout(total=30)
                ) as resp:
                    logger.info(f"üì° –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:")
                    logger.info(f"   üìä Status: {resp.status}")
                    logger.info(f"   üìã Headers: {dict(resp.headers)}")
                    
                    try:
                        response_data = await resp.json()
                        logger.info(f"   üì¶ Response data: {response_data}")
                    except aiohttp.ContentTypeError:
                        response_data = {"error": "Invalid response format"}
                        logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: Invalid response format")
                    
                    result = BotAPIResponse(
                        success=resp.status < 400,
                        data=response_data,
                        telegram_text=response_data.get("telegram_text"),
                        error=response_data.get("error"),
                        status_code=resp.status
                    )
                    
                    logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞: success={result.success}, status_code={result.status_code}")
                    return result

        except aiohttp.ClientConnectorError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º: {e}")
            logger.error(f"   üîó –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ {url}")
            return BotAPIResponse(
                success=False,
                error="Service Unavailable",
                status_code=503
            )
        except asyncio.TimeoutError as e:
            logger.error(f"‚è∞ –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞: {e}")
            logger.error(f"   üîó –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ {url}")
            return BotAPIResponse(
                success=False,
                error="Request timeout",
                status_code=408
            )
        except Exception as e:
            logger.error(f"üí• –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {e}")
            logger.error(f"   üîó –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ {url}")
            return BotAPIResponse(
                success=False,
                error="Internal client error",
                status_code=500
            )

    # Dashboard –∏ –æ–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    async def get_dashboard(self, user_id: int) -> BotAPIResponse:
        """–ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é —Å–≤–æ–¥–∫—É –ø–æ –∫–∞–±–∏–Ω–µ—Ç—É WB"""
        params = {"telegram_id": user_id}
        return await self._make_request("GET", "/dashboard", params=params)

    # –ó–∞–∫–∞–∑—ã
    async def get_recent_orders(
        self, 
        user_id: int, 
        limit: int = 10, 
        offset: int = 0
    ) -> BotAPIResponse:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        params = {"telegram_id": user_id, "limit": limit, "offset": offset}
        return await self._make_request("GET", "/orders/recent", params=params)

    async def get_order_details(self, order_id: int, user_id: int) -> BotAPIResponse:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ"""
        params = {"telegram_id": user_id}
        return await self._make_request("GET", f"/orders/{order_id}", params=params)

    # –û—Å—Ç–∞—Ç–∫–∏ –∏ —Ç–æ–≤–∞—Ä—ã
    async def get_critical_stocks(
        self, 
        user_id: int, 
        limit: int = 20, 
        offset: int = 0
    ) -> BotAPIResponse:
        """–ü–æ–ª—É—á–∏—Ç—å –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏"""
        params = {"telegram_id": user_id, "limit": limit, "offset": offset}
        return await self._make_request("GET", "/stocks/critical", params=params)

    # –û—Ç–∑—ã–≤—ã –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
    async def get_reviews_summary(
        self, 
        user_id: int, 
        limit: int = 10, 
        offset: int = 0
    ) -> BotAPIResponse:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–µ –∏ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –æ—Ç–∑—ã–≤—ã"""
        params = {"telegram_id": user_id, "limit": limit, "offset": offset}
        return await self._make_request("GET", "/reviews/summary", params=params)

    async def get_analytics_sales(
        self, 
        user_id: int, 
        period: str = "7d"
    ) -> BotAPIResponse:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–¥–∞–∂ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫—É"""
        params = {"telegram_id": user_id, "period": period}
        return await self._make_request("GET", "/analytics/sales", params=params)

    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
    async def start_sync(self, user_id: int) -> BotAPIResponse:
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä—É—á–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö"""
        params = {"telegram_id": user_id}
        return await self._make_request("POST", "/sync/start", params=params)

    async def get_sync_status(self, user_id: int) -> BotAPIResponse:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        params = {"telegram_id": user_id}
        return await self._make_request("GET", "/sync/status", params=params)

    # WB –∫–∞–±–∏–Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    async def connect_wb_cabinet(
        self, 
        user_id: int, 
        api_key: str
    ) -> BotAPIResponse:
        """–ü–æ–¥–∫–ª—é—á–∏—Ç—å WB –∫–∞–±–∏–Ω–µ—Ç —á–µ—Ä–µ–∑ API –∫–ª—é—á"""
        params = {"telegram_id": user_id}
        json_data = {"api_key": api_key}
        return await self._make_request("POST", "/cabinets/connect", params=params, json_data=json_data)

    async def get_cabinet_status(self, user_id: int) -> BotAPIResponse:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–∞–±–∏–Ω–µ—Ç–æ–≤"""
        params = {"telegram_id": user_id}
        return await self._make_request("GET", "/cabinets/status", params=params)


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞
bot_api_client = BotAPIClient()


# –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å - —Å—Ç–∞—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def register_user_on_server(payload: Dict[str, Any]) -> Tuple[int, Optional[Dict[str, Any]]]:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä.

    :param payload: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (telegram_id, username, –∏ —Ç.–¥.).
    :return: –ö–æ—Ä—Ç–µ–∂ (—Å—Ç–∞—Ç—É—Å_–∫–æ–¥, json_–æ—Ç–≤–µ—Ç_–∏–ª–∏_None).
    """
    register_url = f"{SERVER_HOST}/users/"
    headers = {
        "X-API-SECRET-KEY": API_SECRET_KEY
    }

    if not API_SECRET_KEY:
        logger.error("API_SECRET_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
        return 500, {"error": "Client configuration error"}

    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(register_url, json=payload, headers=headers) as resp:
                try:
                    response_json = await resp.json()
                except aiohttp.ContentTypeError:
                    response_json = None
                return resp.status, response_json

    except aiohttp.ClientConnectorError as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º: {e}")
        return 503, {"error": "Service Unavailable"} # 503 Service Unavailable
    except Exception as e:
        logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {e}")
        return 500, {"error": "Internal client error"}
