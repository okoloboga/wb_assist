import asyncio
import logging
import os
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher
from aiogram.filters import Command

from .handlers.registration import router as registration_router
from .handlers.commands import router as commands_router
from .keyboards.keyboards import main_keyboard

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã
dp.include_router(registration_router)
dp.include_router(commands_router)

# –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Å—Ç–∞—ë—Ç—Å—è –∑–¥–µ—Å—å, —Ç.–∫. registration_router
# –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç /start —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ü–ï–†–í–û–ô —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
# –ù—É–∂–µ–Ω —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
@dp.message(Command(commands=["start"]))
async def cmd_start(message):
    first_name = message.from_user.first_name
    await message.answer(
        f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {first_name}! üëã\n\n–Ø –ø–æ–º–æ–≥—É —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∫–∞–±–∏–Ω–µ—Ç–æ–º WB.\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_keyboard()
    )

async def main():
    logger.info("Bot started...")
    try:
        await dp.start_polling(bot)
    finally:
        await bot.session.close()


if __name__ == "__main__":
    asyncio.run(main())
