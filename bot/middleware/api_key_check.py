"""
Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è WB API –∫–ª—é—á–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
"""
import logging
import sys
from pathlib import Path
from typing import Callable, Dict, Any, Awaitable

from aiogram import BaseMiddleware
from aiogram.types import Message, CallbackQuery

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –±–æ—Ç–∞
sys.path.insert(0, str(Path(__file__).parent.parent))

from api.client import bot_api_client
from keyboards.keyboards import main_keyboard
from core.states import WBCabinetStates

logger = logging.getLogger(__name__)


class APIKeyCheckMiddleware(BaseMiddleware):
    """Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è WB API –∫–ª—é—á–∞"""
    
    def __init__(self):
        super().__init__()
        self._checked_users = set()  # –ö—ç—à –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    
    async def __call__(
        self,
        handler: Callable[[Message, Dict[str, Any]], Awaitable[Any]],
        event: Message | CallbackQuery,
        data: Dict[str, Any]
    ) -> Any:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏—è"""
        
        # –ü–æ–ª—É—á–∞–µ–º user_id
        if isinstance(event, Message):
            user_id = event.from_user.id
        elif isinstance(event, CallbackQuery):
            user_id = event.from_user.id
        else:
            return await handler(event, data)
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É /start - –æ–Ω–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
        if isinstance(event, Message) and event.text and event.text.startswith('/start'):
            return await handler(event, data)
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã GPT-—á–∞—Ç–∞ (/gpt, /exit)
        if isinstance(event, Message) and event.text and event.text.startswith(('/gpt', '/exit')):
            logger.info(f"üîç API_KEY_CHECK: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É - –∫–æ–º–∞–Ω–¥–∞ GPT {event.text} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return await handler(event, data)
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º callback –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–∞–±–∏–Ω–µ—Ç–∞
        if isinstance(event, CallbackQuery) and event.data in ['settings_api_key', 'connect_wb']:
            logger.info(f"üîç API_KEY_CHECK: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∂–∏–º–∞–µ—Ç –∫–Ω–æ–ø–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–∞–±–∏–Ω–µ—Ç–∞")
            return await handler(event, data)
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–Ω–æ–ø–∫–∏ AI-–ø–æ–º–æ—â–Ω–∏–∫–∞ (AI-—á–∞—Ç –Ω–µ —Ç—Ä–µ–±—É–µ—Ç WB –∫–∞–±–∏–Ω–µ—Ç–∞)
        if isinstance(event, CallbackQuery) and event.data in ['ai_assistant', 'ai_chat', 'ai_examples', 'ai_export_gs']:
            logger.info(f"üîç API_KEY_CHECK: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É - AI callback '{event.data}' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return await handler(event, data)
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω –≤ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏
        if user_id in self._checked_users:
            return await handler(event, data)
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–≤–æ–¥ API –∫–ª—é—á–∞ (–Ω–µ –∫–æ–º–∞–Ω–¥—ã, –Ω–µ callback)
        if isinstance(event, Message) and event.text and not event.text.startswith('/'):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ª–∏ –≤–≤–æ–¥–∞ API –∫–ª—é—á–∞
            from aiogram.fsm.context import FSMContext
            state = data.get('state')
            if state:
                current_state = await state.get_state()
                if current_state and ('api_key' in str(current_state) or 'waiting_for_api_key' in str(current_state) or 'gpt_chat' in str(current_state)):
                    logger.info(f"üîç API_KEY_CHECK: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏: {current_state}")
                    return await handler(event, data)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
        has_api_key = await self._check_api_key(user_id)
        
        if not has_api_key:
            # –ë–ª–æ–∫–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∏ —Ç—Ä–µ–±—É–µ–º –≤–≤–æ–¥ API –∫–ª—é—á–∞
            await self._block_user_access(event, user_id)
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫—ç—à –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö
        self._checked_users.add(user_id)
        
        return await handler(event, data)
    
    async def _check_api_key(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            logger.info(f"üîç API_KEY_CHECK: –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            response = await bot_api_client.get_cabinet_status(user_id)
            
            logger.info(f"üîç API_KEY_CHECK: –û—Ç–≤–µ—Ç –æ—Ç API: success={response.success}, status_code={response.status_code}")
            if response.data:
                logger.info(f"üîç API_KEY_CHECK: –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞: {response.data}")
            
            if not response.success:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ API –∫–ª—é—á–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {response.error}")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –∫–∞–±–∏–Ω–µ—Ç—ã
            cabinets = response.data.get('cabinets', []) if response.data else []
            logger.info(f"üîç API_KEY_CHECK: –ù–∞–π–¥–µ–Ω–æ –∫–∞–±–∏–Ω–µ—Ç–æ–≤: {len(cabinets)}")
            result = len(cabinets) > 0
            logger.info(f"üîç API_KEY_CHECK: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏: {result}")
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ API –∫–ª—é—á–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return False
    
    async def _suggest_cabinet_connection(self, event: Message | CallbackQuery, user_id: int):
        """–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∫–∞–±–∏–Ω–µ—Ç –≤–º–µ—Å—Ç–æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
        from aiogram.exceptions import TelegramBadRequest
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        
        message_text = (
            "üîë **–¢–†–ï–ë–£–ï–¢–°–Ø –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï WB –ö–ê–ë–ò–ù–ï–¢–ê**\n\n"
            "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –≤–∞—à WB –∫–∞–±–∏–Ω–µ—Ç.\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:\n\n"
            "üí° **–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å API –∫–ª—é—á:**\n"
            "1. –ó–∞–π–¥–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç WB\n"
            "2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª '–ù–∞—Å—Ç—Ä–æ–π–∫–∏' ‚Üí '–î–æ—Å—Ç—É–ø –∫ API'\n"
            "3. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞\n"
            "4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –±–æ—Ç—É\n\n"
            "‚ö†Ô∏è **–í–∞–∂–Ω–æ:** API –∫–ª—é—á –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º –∏ –∏–º–µ—Ç—å –ø—Ä–∞–≤–∞ –Ω–∞ —á—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö."
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="üîë –ü–æ–¥–∫–ª—é—á–∏—Ç—å –∫–∞–±–∏–Ω–µ—Ç",
                callback_data="settings_api_key"
            )],
            [InlineKeyboardButton(
                text="‚ÑπÔ∏è –ü–æ–º–æ—â—å",
                callback_data="help"
            )]
        ])
        
        if isinstance(event, Message):
            await event.answer(
                message_text,
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
        elif isinstance(event, CallbackQuery):
            try:
                await event.message.edit_text(
                    message_text,
                    reply_markup=keyboard,
                    parse_mode="Markdown"
                )
                await event.answer()
            except TelegramBadRequest:
                # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await event.message.answer(
                    message_text,
                    reply_markup=keyboard,
                    parse_mode="Markdown"
                )
                await event.answer()

    async def _block_user_access(self, event: Message | CallbackQuery, user_id: int):
        """–ë–ª–æ–∫–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç—Ä–µ–±—É–µ—Ç –≤–≤–æ–¥ API –∫–ª—é—á–∞"""
        from aiogram.exceptions import TelegramBadRequest
        
        message_text = (
            "üîë **–¢–†–ï–ë–£–ï–¢–°–Ø –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï WB –ö–ê–ë–ò–ù–ï–¢–ê**\n\n"
            "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –≤–∞—à WB –∫–∞–±–∏–Ω–µ—Ç.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à API –∫–ª—é—á –æ—Ç Wildberries:\n\n"
            "üí° **–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å API –∫–ª—é—á:**\n"
            "1. –ó–∞–π–¥–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç WB\n"
            "2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª '–ù–∞—Å—Ç—Ä–æ–π–∫–∏' ‚Üí '–î–æ—Å—Ç—É–ø –∫ API'\n"
            "3. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞\n"
            "4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –±–æ—Ç—É\n\n"
            "‚ö†Ô∏è **–í–∞–∂–Ω–æ:** API –∫–ª—é—á –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º –∏ –∏–º–µ—Ç—å –ø—Ä–∞–≤–∞ –Ω–∞ —á—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö."
        )
        
        if isinstance(event, Message):
            await event.answer(
                message_text,
                reply_markup=main_keyboard(),
                parse_mode="Markdown"
            )
        elif isinstance(event, CallbackQuery):
            try:
                await event.message.edit_text(
                    message_text,
                    reply_markup=main_keyboard(),
                    parse_mode="Markdown"
                )
            except TelegramBadRequest:
                # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                await event.message.answer(
                    message_text,
                    reply_markup=main_keyboard(),
                    parse_mode="Markdown"
                )
            await event.answer()
    
    def clear_user_cache(self, user_id: int):
        """–û—á–∏—â–∞–µ—Ç –∫—ç—à –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è API)"""
        self._checked_users.discard(user_id)