"""
Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è WB API –∫–ª—é—á–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
"""
import logging
from typing import Callable, Dict, Any, Awaitable

from aiogram import BaseMiddleware
from aiogram.types import Message, CallbackQuery

from api.client import bot_api_client
from keyboards.keyboards import main_keyboard
from core.states import WBCabinetStates

logger = logging.getLogger(__name__)


class APIKeyCheckMiddleware(BaseMiddleware):
    """Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è WB API –∫–ª—é—á–∞"""
    
    def __init__(self):
        super().__init__()
        self._checked_users = set()  # –ö—ç—à –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    
    async def __call__(
        self,
        handler: Callable[[Message, Dict[str, Any]], Awaitable[Any]],
        event: Message | CallbackQuery,
        data: Dict[str, Any]
    ) -> Any:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏—è"""
        
        # –ü–æ–ª—É—á–∞–µ–º user_id
        if isinstance(event, Message):
            user_id = event.from_user.id
        elif isinstance(event, CallbackQuery):
            user_id = event.from_user.id
        else:
            return await handler(event, data)
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É /start - –æ–Ω–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
        if isinstance(event, Message) and event.text and event.text.startswith('/start'):
            return await handler(event, data)
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω –≤ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏
        if user_id in self._checked_users:
            return await handler(event, data)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
        has_api_key = await self._check_api_key(user_id)
        
        if not has_api_key:
            # –ë–ª–æ–∫–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∏ —Ç—Ä–µ–±—É–µ–º –≤–≤–æ–¥ API –∫–ª—é—á–∞
            await self._block_user_access(event, user_id)
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫—ç—à –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö
        self._checked_users.add(user_id)
        
        return await handler(event, data)
    
    async def _check_api_key(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            response = await bot_api_client.get_cabinet_status(user_id)
            
            if not response.success:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ API –∫–ª—é—á–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {response.error}")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –∫–∞–±–∏–Ω–µ—Ç—ã
            cabinets = response.data.get('cabinets', []) if response.data else []
            return len(cabinets) > 0
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ API –∫–ª—é—á–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return False
    
    async def _block_user_access(self, event: Message | CallbackQuery, user_id: int):
        """–ë–ª–æ–∫–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç—Ä–µ–±—É–µ—Ç –≤–≤–æ–¥ API –∫–ª—é—á–∞"""
        message_text = (
            "üîë **–¢–†–ï–ë–£–ï–¢–°–Ø –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï WB –ö–ê–ë–ò–ù–ï–¢–ê**\n\n"
            "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –≤–∞—à WB –∫–∞–±–∏–Ω–µ—Ç.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à API –∫–ª—é—á –æ—Ç Wildberries:\n\n"
            "üí° **–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å API –∫–ª—é—á:**\n"
            "1. –ó–∞–π–¥–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç WB\n"
            "2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª '–ù–∞—Å—Ç—Ä–æ–π–∫–∏' ‚Üí '–î–æ—Å—Ç—É–ø –∫ API'\n"
            "3. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞\n"
            "4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –±–æ—Ç—É\n\n"
            "‚ö†Ô∏è **–í–∞–∂–Ω–æ:** API –∫–ª—é—á –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º –∏ –∏–º–µ—Ç—å –ø—Ä–∞–≤–∞ –Ω–∞ —á—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö."
        )
        
        if isinstance(event, Message):
            await event.answer(
                message_text,
                reply_markup=main_keyboard(),
                parse_mode="Markdown"
            )
        elif isinstance(event, CallbackQuery):
            await event.message.edit_text(
                message_text,
                reply_markup=main_keyboard(),
                parse_mode="Markdown"
            )
            await event.answer()
    
    def clear_user_cache(self, user_id: int):
        """–û—á–∏—â–∞–µ—Ç –∫—ç—à –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è API)"""
        self._checked_users.discard(user_id)