import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ –º–æ–¥—É–ª—è–º –±–æ—Ç–∞ –∏ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞
sys.path.insert(0, str(Path(__file__).parent.parent))
sys.path.insert(0, str(Path(__file__).parents[2]))

import logging
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from core.states import GPTStates
from keyboards.keyboards import ai_assistant_keyboard
from utils.formatters import safe_edit_message, safe_send_message, split_telegram_message, escape_markdown_v2

from gpt_integration.gpt_client import GPTClient, LLMConfig
from gpt_integration.template_loader import get_system_prompt
from gpt_integration.aggregator import aggregate
from gpt_integration.pipeline import run_analysis
from api.client import bot_api_client

logger = logging.getLogger(__name__)
router = Router()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç GPT, –∫–æ–Ω—Ñ–∏–≥ –±–µ—Ä–µ—Ç—Å—è –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
try:
    _gpt_client = GPTClient()
except Exception as e:
    logger.error("GPTClient init error: %r", e)
    _gpt_client = None


@router.callback_query(F.data == "ai_chat")
async def start_ai_chat(callback: CallbackQuery, state: FSMContext):
    """–í—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º GPT-—á–∞—Ç–∞ –∏–∑ –º–µ–Ω—é AI-–ø–æ–º–æ—â–Ω–∏–∫–∞."""
    await state.set_state(GPTStates.gpt_chat)
    await state.update_data(gpt_history=[])

    # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    text = (
        "üß† GPT-—á–∞—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∑–∞–¥–∞—á—É.\n"
        "–ß—Ç–æ–±—ã –≤—ã–π—Ç–∏ ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /exit"
    )

    await safe_send_message(callback.message, escape_markdown_v2(text), user_id=callback.from_user.id)
    await callback.answer()

@router.callback_query(F.data == "ai_examples")
async def ai_examples(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è GPT –∏ LLM‚Äë–∞–Ω–∞–ª–∏–∑–∞."""
    examples = (
        "‚ùì –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:\n\n"
        "‚Ä¢ –°—Ñ–æ—Ä–º–∏—Ä—É–π —Å–≤–æ–¥–∫—É –ø—Ä–æ–¥–∞–∂ –∏ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ 7 –¥–Ω–µ–π.\n"
        "‚Ä¢ –ù–∞–π–¥–∏ –∞–Ω–æ–º–∞–ª–∏–∏ –≤ –¥–∏–Ω–∞–º–∏–∫–µ –≤—ã–∫—É–ø–æ–≤ –∏ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏.\n"
        "‚Ä¢ –î–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –¢–û–ü‚Äë5 —Ç–æ–≤–∞—Ä–∞–º: —Ü–µ–Ω–∞, –∫–æ–Ω—Ç–µ–Ω—Ç, —Ä–µ–∫–ª–∞–º–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏.\n"
        "‚Ä¢ –ü—Ä–µ–¥–ª–æ–∂–∏ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ –º–µ–¥–ª–µ–Ω–Ω–æ –ø—Ä–æ–¥–∞—é—â–∏–º—Å—è –ø–æ–∑–∏—Ü–∏—è–º.\n"
        "‚Ä¢ –ü–æ–¥–≥–æ—Ç–æ–≤—å —Ç–∞–±–ª–∏—Ü—É –¥–ª—è Google Sheets —Å –∫–ª—é—á–µ–≤—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏.\n\n"
        "–î–ª—è –∑–∞–ø—É—Å–∫–∞ LLM‚Äë–∞–Ω–∞–ª–∏–∑–∞ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ ‚Äòü§ñ LLM‚Äë–∞–Ω–∞–ª–∏–∑‚Äô."
    )
    await safe_edit_message(
        callback=callback,
        text=escape_markdown_v2(examples),
        reply_markup=ai_assistant_keyboard(),
        user_id=callback.from_user.id
    )
    await callback.answer()

@router.callback_query(F.data == "ai_export_gs")
async def ai_export_gs(callback: CallbackQuery):
    """–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—ã–≥—Ä—É–∑–∫–∏ –≤ Google Sheets –∏–∑ LLM‚Äë–∞–Ω–∞–ª–∏–∑–∞."""
    period = "7d"
    await safe_edit_message(
        callback=callback,
        text="‚è≥ –ì–æ—Ç–æ–≤–ª—é –≤—ã–≥—Ä—É–∑–∫—É –≤ Google Sheets‚Ä¶",
        reply_markup=ai_assistant_keyboard(),
        user_id=callback.from_user.id
    )

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–µ–∫—Ü–∏—é sheets
    response = await bot_api_client.get_analytics_sales(
        user_id=callback.from_user.id,
        period=period
    )

    if not (response.success and response.data):
        await safe_edit_message(
            callback=callback,
            text=escape_markdown_v2("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏."),
            reply_markup=ai_assistant_keyboard(),
            user_id=callback.from_user.id
        )
        await callback.answer()
        return

    data_sources = {
        "meta": {"user_id": callback.from_user.id, "period": period},
        "sales": {
            "periods": response.data.get("sales_periods") or {},
            "metrics": {
                "avg_check": (response.data.get("dynamics") or {}).get("average_check"),
                "conversion_percent": (response.data.get("dynamics") or {}).get("conversion_percent"),
            },
        },
        "top_products": response.data.get("top_products") or [],
        "extra": {"dynamics": response.data.get("dynamics") or {}},
    }

    try:
        assembled_data = aggregate(data_sources)
        result = run_analysis(assembled_data, validate=True)
    except Exception as e:
        await safe_edit_message(
            callback=callback,
            text=escape_markdown_v2(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –≤—ã–≥—Ä—É–∑–∫–∏: {e}"),
            reply_markup=ai_assistant_keyboard(),
            user_id=callback.from_user.id
        )
        await callback.answer()
        return

    sheets = (result or {}).get("sheets") or {"headers": [], "rows": []}
    headers = sheets.get("headers") or []
    rows = sheets.get("rows") or []

    preview_lines = []
    if headers:
        preview_lines.append(" | ".join(map(str, headers)))
    for r in rows[:10]:  # –æ–≥—Ä–∞–Ω–∏—á–∏–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–µ—Ä–≤—ã–º–∏ 10 —Å—Ç—Ä–æ–∫–∞–º–∏
        if isinstance(r, (list, tuple)):
            preview_lines.append(" | ".join(map(lambda x: str(x) if x is not None else "", r)))
        else:
            preview_lines.append(str(r))

    preview_text = (
        "üì§ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è Google Sheets\n\n" +
        ("\n".join(preview_lines) if preview_lines else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏.") +
        "\n\n–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Google API –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ."
    )

    await safe_send_message(
        message=callback.message,
        text=escape_markdown_v2(preview_text),
        user_id=callback.from_user.id
    )
    await callback.answer()

@router.message(Command("gpt"))
async def cmd_gpt(message: Message, state: FSMContext):
    """–í—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º GPT-—á–∞—Ç–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ /gpt."""
    await state.set_state(GPTStates.gpt_chat)
    await state.update_data(gpt_history=[])

    text = (
        "üß† GPT-—á–∞—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∑–∞–¥–∞—á—É.\n"
        "–ß—Ç–æ–±—ã –≤—ã–π—Ç–∏ ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /exit"
    )
    await safe_send_message(message, escape_markdown_v2(text), user_id=message.from_user.id)


@router.message(Command("exit"))
async def cmd_exit(message: Message, state: FSMContext):
    """–í—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ GPT-—á–∞—Ç–∞."""
    await state.clear()
    await safe_send_message(
        message,
        escape_markdown_v2("üîô –í—ã –≤—ã—à–ª–∏ –∏–∑ GPT-—Ä–µ–∂–∏–º–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é AI-–ø–æ–º–æ—â–Ω–∏–∫–∞."),
        reply_markup=ai_assistant_keyboard(),
        user_id=message.from_user.id,
    )


@router.message(GPTStates.gpt_chat, F.text)
async def handle_user_prompt(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –≤ —Ä–µ–∂–∏–º–µ GPT-—á–∞—Ç–∞."""
    if _gpt_client is None:
        await safe_send_message(
            message,
            "‚ö†Ô∏è GPT –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è OPENAI_*.",
            user_id=message.from_user.id,
        )
        return

    data = await state.get_data()
    history = data.get("gpt_history", [])

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    history.append({"role": "user", "content": message.text})

    # –û–±—Ä–µ–∑–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10 —Å–æ–æ–±—â–µ–Ω–∏–π (–±–µ–∑ system)
    if len(history) > 10:
        history = history[-10:]

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∏–∑ —à–∞–±–ª–æ–Ω–∞
    system_prompt = (_gpt_client.config.system_prompt if _gpt_client else None) or get_system_prompt()
    messages = history.copy()
    if system_prompt:
        messages = [{"role": "system", "content": system_prompt}] + messages

    try:
        answer_text = _gpt_client.complete_messages(messages)
    except Exception as e:
        logger.error("GPT request error for user %s: %r", message.from_user.id, e)
        await safe_send_message(
            message,
            "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ GPT. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.",
            user_id=message.from_user.id,
        )
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
    history.append({"role": "assistant", "content": answer_text})
    await state.update_data(gpt_history=history)

    # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –¥–ª–∏–Ω–Ω—ã–π ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç—è–º–∏, –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–≤ MarkdownV2
    parts = split_telegram_message(escape_markdown_v2(answer_text))
    for part in parts:
        await safe_send_message(message, part, user_id=message.from_user.id)


__all__ = ["router"]