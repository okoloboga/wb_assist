import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ –º–æ–¥—É–ª—è–º –±–æ—Ç–∞ –∏ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞
sys.path.insert(0, str(Path(__file__).parent.parent))
sys.path.insert(0, str(Path(__file__).parents[2]))

import logging
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from core.states import GPTStates
from keyboards.keyboards import ai_assistant_keyboard
from utils.formatters import safe_edit_message, safe_send_message, split_telegram_message

from gpt_integration.gpt_client import GPTClient, LLMConfig

logger = logging.getLogger(__name__)
router = Router()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç GPT, –∫–æ–Ω—Ñ–∏–≥ –±–µ—Ä–µ—Ç—Å—è –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
try:
    _gpt_client = GPTClient()
except Exception as e:
    logger.error("GPTClient init error: %r", e)
    _gpt_client = None


@router.callback_query(F.data == "ai_chat")
async def start_ai_chat(callback: CallbackQuery, state: FSMContext):
    """–í—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º GPT-—á–∞—Ç–∞ –∏–∑ –º–µ–Ω—é AI-–ø–æ–º–æ—â–Ω–∏–∫–∞."""
    await state.set_state(GPTStates.gpt_chat)
    await state.update_data(gpt_history=[])

    # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    text = (
        "üß† GPT-—á–∞—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∑–∞–¥–∞—á—É.\n"
        "–ß—Ç–æ–±—ã –≤—ã–π—Ç–∏ ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /exit"
    )

    await safe_send_message(callback.message, text, user_id=callback.from_user.id)
    await callback.answer()


@router.message(Command("gpt"))
async def cmd_gpt(message: Message, state: FSMContext):
    """–í—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º GPT-—á–∞—Ç–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ /gpt."""
    await state.set_state(GPTStates.gpt_chat)
    await state.update_data(gpt_history=[])

    text = (
        "üß† GPT-—á–∞—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∑–∞–¥–∞—á—É.\n"
        "–ß—Ç–æ–±—ã –≤—ã–π—Ç–∏ ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /exit"
    )
    await safe_send_message(message, text, user_id=message.from_user.id)


@router.message(Command("exit"))
async def cmd_exit(message: Message, state: FSMContext):
    """–í—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ GPT-—á–∞—Ç–∞."""
    await state.clear()
    await safe_send_message(
        message,
        "üîô –í—ã –≤—ã—à–ª–∏ –∏–∑ GPT-—Ä–µ–∂–∏–º–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é AI-–ø–æ–º–æ—â–Ω–∏–∫–∞.",
        reply_markup=ai_assistant_keyboard(),
        user_id=message.from_user.id,
    )


@router.message(GPTStates.gpt_chat, F.text)
async def handle_user_prompt(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –≤ —Ä–µ–∂–∏–º–µ GPT-—á–∞—Ç–∞."""
    if _gpt_client is None:
        await safe_send_message(
            message,
            "‚ö†Ô∏è GPT –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è OPENAI_*.",
            user_id=message.from_user.id,
        )
        return

    data = await state.get_data()
    history = data.get("gpt_history", [])

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    history.append({"role": "user", "content": message.text})

    # –û–±—Ä–µ–∑–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10 —Å–æ–æ–±—â–µ–Ω–∏–π (–±–µ–∑ system)
    if len(history) > 10:
        history = history[-10:]

    try:
        answer_text = _gpt_client.complete_messages(history)
    except Exception as e:
        logger.error("GPT request error for user %s: %r", message.from_user.id, e)
        await safe_send_message(
            message,
            "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ GPT. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.",
            user_id=message.from_user.id,
        )
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
    history.append({"role": "assistant", "content": answer_text})
    await state.update_data(gpt_history=history)

    # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –¥–ª–∏–Ω–Ω—ã–π ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç—è–º–∏
    parts = split_telegram_message(answer_text)
    for part in parts:
        await safe_send_message(message, part, user_id=message.from_user.id)


__all__ = ["router"]