"""
Polling —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
"""
import asyncio
import logging
import aiohttp
from datetime import datetime, timezone, timedelta
from typing import Dict, Any, List, Optional

from core.config import config
from handlers.notifications import (
    handle_new_order_notification,
    handle_critical_stocks_notification,
    handle_new_review_notification,
    handle_cabinet_removal_notification
)

logger = logging.getLogger(__name__)

class NotificationPoller:
    """Polling —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    def __init__(self, bot):
        self.bot = bot
        self.server_url = config.server_host
        self.api_key = config.api_secret_key
        self.polling_interval = config.polling_interval  # –ò–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.last_check_times = {}  # {telegram_id: datetime}
        self.is_running = False
        
    async def start_polling(self):
        """–ó–∞–ø—É—Å–∫ polling —Å–∏—Å—Ç–µ–º—ã"""
        self.is_running = True
        logger.info("üîÑ Starting notification polling system...")
        
        while self.is_running:
            try:
                await self._poll_notifications()
                await asyncio.sleep(self.polling_interval)
            except Exception as e:
                logger.error(f"Error in polling loop: {e}")
                await asyncio.sleep(30)  # –ü–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    async def stop_polling(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ polling —Å–∏—Å—Ç–µ–º—ã"""
        self.is_running = False
        logger.info("üõë Stopping notification polling system...")
    
    async def _poll_notifications(self):
        """–û–ø—Ä–æ—Å —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –Ω–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            active_users = await self._get_active_users()
            
            if not active_users:
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            async with aiohttp.ClientSession() as session:
                for telegram_id in active_users:
                    try:
                        await self._check_user_notifications(session, telegram_id)
                    except Exception as e:
                        logger.error(f"Error checking notifications for user {telegram_id}: {e}")
                        
        except Exception as e:
            logger.error(f"Error in _poll_notifications: {e}")
    
    async def _get_active_users(self) -> List[int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –∫—ç—à–∞
        return [5101525651]  # –í–∞—à telegram_id
    
    async def _check_user_notifications(self, session: aiohttp.ClientSession, telegram_id: int):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            last_check = self.last_check_times.get(telegram_id)
            if not last_check:
                # –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ 1 –º–∏–Ω—É—Ç—É –Ω–∞–∑–∞–¥
                # —á—Ç–æ–±—ã –Ω–µ –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ, –Ω–æ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
                last_check = datetime.now(timezone.utc) - timedelta(minutes=1)
                self.last_check_times[telegram_id] = last_check
                logger.info(f"üîÑ First polling for user {telegram_id} - using 1 minute ago as last_check")
                # –ù–ï –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –∑–∞–ø—Ä–æ—Å–æ–º
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
            url = f"{self.server_url}/api/v1/notifications/poll"
            params = {
                "telegram_id": telegram_id,
                "last_check": last_check.isoformat()
            }
            headers = {
                "X-API-SECRET-KEY": self.api_key
            }
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
            async with session.get(url, params=params, headers=headers) as response:
                if response.status == 200:
                    data = await response.json()
                    
                    if data.get("success") and data.get("events"):
                        await self._process_events(telegram_id, data["events"])
                        logger.info(f"üì• Processed {len(data['events'])} events for user {telegram_id}")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ —Å–µ—Ä–≤–µ—Ä–Ω–æ–º—É –º–∞—Ä–∫–µ—Ä—É
                    server_last_check = data.get("last_check")
                    if server_last_check:
                        try:
                            self.last_check_times[telegram_id] = datetime.fromisoformat(server_last_check.replace('Z', '+00:00'))
                        except Exception:
                            self.last_check_times[telegram_id] = datetime.now(timezone.utc)
                    else:
                        self.last_check_times[telegram_id] = datetime.now(timezone.utc)
                    
                elif response.status == 404:
                    logger.warning(f"User {telegram_id} not found on server")
                else:
                    logger.error(f"Server returned status {response.status} for user {telegram_id}")
                    
        except aiohttp.ClientError as e:
            logger.error(f"Network error checking notifications for user {telegram_id}: {e}")
        except Exception as e:
            logger.error(f"Error checking notifications for user {telegram_id}: {e}")
    
    async def _process_events(self, telegram_id: int, events: List[Dict[str, Any]]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π"""
        for event in events:
            try:
                event_type = event.get("type")
                event_data = event.get("data", {})
                
                logger.info(f"üîÑ Processing event {event_type} for user {telegram_id}")
                
                # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
                from aiogram.types import Message, Chat, User
                
                fake_chat = Chat(
                    id=telegram_id,
                    type='private'
                )
                
                fake_user = User(
                    id=telegram_id,
                    is_bot=False,
                    first_name='User'
                )
                
                fake_message = Message(
                    message_id=0,
                    date=datetime.now(),
                    chat=fake_chat,
                    from_user=fake_user,
                    content_type='text',
                    text='',
                    web_app_data=None
                )
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
                if event_type == "new_order":
                    # –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –ø—Ä–∏—Å–ª–∞–ª –≥–æ—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ. –ü—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ image_url –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Ñ–æ—Ç–æ
                    telegram_text = event.get("telegram_text")
                    data_payload = event.get("data", {}) or {}
                    image_url = data_payload.get("image_url")
                    if telegram_text and image_url:
                        try:
                            await self.bot.send_photo(chat_id=telegram_id, photo=image_url, caption=telegram_text)
                        except Exception:
                            await self.bot.send_message(chat_id=telegram_id, text=telegram_text)
                    elif telegram_text:
                        await self.bot.send_message(chat_id=telegram_id, text=telegram_text)
                    else:
                        await self._handle_new_order_notification(telegram_id, event_data)
                elif event_type == "critical_stocks":
                    await self._handle_critical_stocks_notification(telegram_id, event_data)
                elif event_type == "new_review":
                    await self._handle_new_review_notification(telegram_id, event_data)
                elif event_type == "negative_review":
                    await self._handle_negative_review_notification(telegram_id, event_data)
                elif event_type == "order_buyout":
                    await self._handle_order_buyout_notification(telegram_id, event_data)
                elif event_type == "order_cancellation":
                    await self._handle_order_cancellation_notification(telegram_id, event_data)
                elif event_type == "order_return":
                    await self._handle_order_return_notification(telegram_id, event_data)
                elif event_type == "cabinet_removal":
                    await self._handle_cabinet_removal_notification(telegram_id, event_data)
                else:
                    logger.warning(f"Unknown event type: {event_type}")
                    
            except Exception as e:
                logger.error(f"Error processing event {event.get('type')} for user {telegram_id}: {e}")
    
    async def _handle_new_order_notification(self, telegram_id: int, event_data: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ"""
        order_data = event_data
        text = self._format_detailed_order_notification(order_data, "–ó–ê–ö–ê–ó")
        await self.bot.send_message(chat_id=telegram_id, text=text)
        logger.info(f"‚úÖ New order notification sent to user {telegram_id}")
    
    async def _handle_critical_stocks_notification(self, telegram_id: int, event_data: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –æ—Å—Ç–∞—Ç–∫–∞—Ö"""
        stock_data = event_data
        
        text = "‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ù–´–ï –û–°–¢–ê–¢–ö–ò\n\n"
        product_name = stock_data.get('name') or stock_data.get('product_name') or stock_data.get('title') or f"–¢–æ–≤–∞—Ä {stock_data.get('nm_id', 'N/A')}"
        text += f"üì¶ {product_name}\n"
        text += f"üÜî {stock_data.get('nm_id', 'N/A')}\n"
        text += f"üìä –û—Å—Ç–∞—Ç–∫–∏: {stock_data.get('stocks', {})}\n"
        
        critical_sizes = stock_data.get("critical_sizes", [])
        if critical_sizes:
            text += f"‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–Ω–æ: {', '.join(critical_sizes)}\n"
        
        await self.bot.send_message(chat_id=telegram_id, text=text)
        logger.info(f"‚úÖ Critical stocks notification sent to user {telegram_id}")
    
    async def _handle_new_review_notification(self, telegram_id: int, event_data: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –æ—Ç–∑—ã–≤–µ"""
        review_data = event_data
        
        text = "‚≠ê –ù–û–í–´–ô –û–¢–ó–´–í!\n\n"
        text += f"üì¶ {review_data.get('product_name', 'N/A')}\n"
        text += f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {review_data.get('rating', 0)}/5\n"
        text += f"üí¨ \"{review_data.get('text', 'N/A')[:100]}{'...' if len(review_data.get('text', '')) > 100 else ''}\"\n"
        text += f"üë§ –ê–≤—Ç–æ—Ä: {review_data.get('user_name', 'N/A')}\n"
        text += f"üÜî ID –æ—Ç–∑—ã–≤–∞: {review_data.get('review_id', 'N/A')}\n\n"
        text += "üí° –ù–∞–∂–º–∏—Ç–µ /reviews –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –æ—Ç–∑—ã–≤–æ–≤"
        
        await self.bot.send_message(chat_id=telegram_id, text=text)
        logger.info(f"‚úÖ New review notification sent to user {telegram_id}")
    
    async def _handle_negative_review_notification(self, telegram_id: int, event_data: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–º –æ—Ç–∑—ã–≤–µ"""
        review_data = event_data
        
        text = "üòû –ù–ï–ì–ê–¢–ò–í–ù–´–ô –û–¢–ó–´–í\n\n"
        text += f"üì¶ –¢–æ–≤–∞—Ä: {review_data.get('product_name', 'N/A')}\n"
        text += f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {review_data.get('rating', 0)}/5\n"
        text += f"üí¨ –¢–µ–∫—Å—Ç: \"{review_data.get('text', 'N/A')[:100]}{'...' if len(review_data.get('text', '')) > 100 else ''}\"\n"
        text += f"üë§ –ê–≤—Ç–æ—Ä: {review_data.get('user_name', 'N/A')}\n"
        text += f"üÜî ID –æ—Ç–∑—ã–≤–∞: {review_data.get('review_id', 'N/A')}\n\n"
        text += "‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –æ—Ç–∑—ã–≤ –∏–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º"
        
        await self.bot.send_message(chat_id=telegram_id, text=text)
        logger.info(f"‚úÖ Negative review notification sent to user {telegram_id}")
    
    async def _handle_order_buyout_notification(self, telegram_id: int, event_data: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—ã–∫—É–ø–µ –∑–∞–∫–∞–∑–∞"""
        order_data = event_data
        text = self._format_detailed_order_notification(order_data, "–í–´–ö–£–ü")
        await self.bot.send_message(chat_id=telegram_id, text=text)
        logger.info(f"‚úÖ Order buyout notification sent to user {telegram_id}")
    
    async def _handle_order_cancellation_notification(self, telegram_id: int, event_data: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞"""
        order_data = event_data
        text = self._format_detailed_order_notification(order_data, "–û–¢–ú–ï–ù–ï–ù")
        await self.bot.send_message(chat_id=telegram_id, text=text)
        logger.info(f"‚úÖ Order cancellation notification sent to user {telegram_id}")
    
    async def _handle_order_return_notification(self, telegram_id: int, event_data: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–æ–∑–≤—Ä–∞—Ç–µ –∑–∞–∫–∞–∑–∞"""
        order_data = event_data
        text = self._format_detailed_order_notification(order_data, "–í–û–ó–í–†–ê–¢")
        await self.bot.send_message(chat_id=telegram_id, text=text)
        logger.info(f"‚úÖ Order return notification sent to user {telegram_id}")
    
    async def _handle_cabinet_removal_notification(self, telegram_id: int, event_data: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–±–∏–Ω–µ—Ç–∞"""
        cabinet_data = event_data
        
        text = "üö® –ö–ê–ë–ò–ù–ï–¢ –£–î–ê–õ–ï–ù\n\n"
        text += f"–ö–∞–±–∏–Ω–µ—Ç \"{cabinet_data.get('cabinet_name', 'N/A')}\" –±—ã–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω –∏–∑-–∑–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–≥–æ API –∫–ª—é—á–∞.\n\n"
        text += f"**–ü—Ä–∏—á–∏–Ω–∞:** {cabinet_data.get('removal_reason', 'N/A')}\n"
        text += f"**–í—Ä–µ–º—è —É–¥–∞–ª–µ–Ω–∏—è:** {cabinet_data.get('removal_timestamp', 'N/A')}\n\n"
        
        validation_error = cabinet_data.get('validation_error', {})
        if validation_error and validation_error.get('message'):
            text += f"**–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:** {validation_error['message']}\n\n"
        
        text += "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –Ω–æ–≤—ã–π –∫–∞–±–∏–Ω–µ—Ç —Å –¥–µ–π—Å—Ç–≤—É—é—â–∏–º API –∫–ª—é—á–æ–º."
        
        await self.bot.send_message(chat_id=telegram_id, text=text)
        logger.info(f"‚úÖ Cabinet removal notification sent to user {telegram_id}")

    def _format_detailed_order_notification(self, order_data: dict, action_type: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–µ"""
        from datetime import datetime
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        order_id = order_data.get('order_id', 'N/A')
        order_date = self._format_datetime(order_data.get('date', order_data.get('order_date', '')))
        brand = order_data.get('brand', 'N/A')
        product_name = order_data.get('product_name', order_data.get('name', 'N/A'))
        nm_id = order_data.get('nm_id', 'N/A')
        supplier_article = order_data.get('supplier_article', order_data.get('article', ''))
        size = order_data.get('size', '')
        barcode = order_data.get('barcode', '')
        warehouse_from = order_data.get('warehouse_from', 'N/A')
        warehouse_to = order_data.get('warehouse_to', 'N/A')
        
        # –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        order_amount = order_data.get('amount', order_data.get('total_price', 0))
        commission_percent = order_data.get('commission_percent', 0)
        commission_amount = order_data.get('commission_amount', 0)
        spp_percent = order_data.get('spp_percent', 0)
        customer_price = order_data.get('customer_price', 0)
        logistics_amount = order_data.get('logistics_amount', 0)
        
        # –õ–æ–≥–∏—Å—Ç–∏–∫–∞ (–º–æ–≥—É—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Å–æ–±—ã—Ç–∏—è—Ö)
        dimensions = order_data.get('dimensions', '')
        volume_liters = order_data.get('volume_liters', 0)
        warehouse_rate_per_liter = order_data.get('warehouse_rate_per_liter', 0)
        warehouse_rate_extra = order_data.get('warehouse_rate_extra', 0)
        
        # –†–µ–π—Ç–∏–Ω–≥–∏ –∏ –æ—Ç–∑—ã–≤—ã (–º–æ–≥—É—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Å–æ–±—ã—Ç–∏—è—Ö)
        rating = order_data.get('rating', 0)
        reviews_count = order_data.get('reviews_count', 0)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–º–æ–≥—É—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Å–æ–±—ã—Ç–∏—è—Ö)
        buyout_rates = order_data.get('buyout_rates', {})
        order_speed = order_data.get('order_speed', {})
        sales_periods = order_data.get('sales_periods', {})
        category_availability = order_data.get('category_availability', '')
        
        # –û—Å—Ç–∞—Ç–∫–∏ (–º–æ–≥—É—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Å–æ–±—ã—Ç–∏—è—Ö)
        stocks = order_data.get('stocks', {})
        stock_days = order_data.get('stock_days', {})
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"üßæ {action_type} [#{order_id}] {order_date}\n\n"
        message += f"üëë {brand} ({brand})\n"
        message += f"‚úè –ù–∞–∑–≤–∞–Ω–∏–µ: {product_name}\n"
        message += f"üÜî {nm_id} / {supplier_article} / ({size})\n"
        if barcode:
            message += f"üéπ {barcode}\n"
        message += f"üöõ {warehouse_from} ‚ü∂ {warehouse_to}\n"
        message += f"üí∞ –¶–µ–Ω–∞ –∑–∞–∫–∞–∑–∞: {order_amount:,.0f}‚ÇΩ\n"
        
        # –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ)
        if spp_percent > 0 or customer_price > 0:
            message += f"üõç –°–ü–ü: {spp_percent}% (–¶–µ–Ω–∞ –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è: {customer_price:,.0f}‚ÇΩ)\n"
        if logistics_amount > 0:
            message += f"üí∂ –õ–æ–≥–∏—Å—Ç–∏–∫–∞ WB: {logistics_amount:,.1f}‚ÇΩ\n"
        
        # –õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ)
        if dimensions or volume_liters > 0:
            message += f"        –ì–∞–±–∞—Ä–∏—Ç—ã: {dimensions}. ({volume_liters}–ª.)\n"
        if warehouse_rate_per_liter > 0 or warehouse_rate_extra > 0:
            message += f"        –¢–∞—Ä–∏—Ñ —Å–∫–ª–∞–¥–∞: {warehouse_rate_per_liter:,.1f}‚ÇΩ –∑–∞ 1–ª. | {warehouse_rate_extra:,.1f}‚ÇΩ –∑–∞ –ª. —Å–≤—ã—à–µ)\n"
        
        # –†–µ–π—Ç–∏–Ω–≥–∏ –∏ –æ—Ç–∑—ã–≤—ã (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ)
        if rating > 0 or reviews_count > 0:
            message += f"üåü –û—Ü–µ–Ω–∫–∞: {rating}\n"
            message += f"üí¨ –û—Ç–∑—ã–≤—ã: {reviews_count}\n"
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ)
        if sales_periods and any(sales_periods.values()):
            message += f"üìñ –ü—Ä–æ–¥–∞–∂ –∑–∞ 7 / 14 / 30 –¥–Ω–µ–π:\n"
            message += f"        {sales_periods.get('7_days', 0)} | {sales_periods.get('14_days', 0)} | {sales_periods.get('30_days', 0)} —à—Ç.\n"
        
        # –û—Å—Ç–∞—Ç–∫–∏ (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ)
        if stocks and any(stocks.values()):
            message += f"üì¶ –û—Å—Ç–∞—Ç–æ–∫:\n"
            for size in ["L", "M", "S", "XL"]:
                stock_count = stocks.get(size, 0)
                stock_days_count = stock_days.get(size, 0)
                if stock_count > 0 or stock_days_count > 0:
                    message += f"        {size} ({stock_count} —à—Ç.) ‚âà –Ω–∞ {stock_days_count} –¥–Ω.\n"
        
        return message

    def _format_datetime(self, datetime_str: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏"""
        try:
            if not datetime_str:
                return "N/A"
            
            # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å ISO —Ñ–æ—Ä–º–∞—Ç
            dt = datetime.fromisoformat(datetime_str.replace('Z', '+00:00'))
            return dt.strftime("%H:%M")
        except:
            return datetime_str


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä poller'–∞
poller: Optional[NotificationPoller] = None

async def start_notification_polling(bot):
    """–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã polling —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    global poller
    poller = NotificationPoller(bot)
    await poller.start_polling()

async def stop_notification_polling():
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã polling —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    global poller
    if poller:
        await poller.stop_polling()
