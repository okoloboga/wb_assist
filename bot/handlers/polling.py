"""
Polling —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
"""
import asyncio
import logging
import aiohttp
from datetime import datetime, timezone, timedelta
from typing import Dict, Any, List, Optional
from utils.timezone import TimezoneUtils

from core.config import config
from handlers.notifications import (
    handle_new_order_notification,
    handle_critical_stocks_notification,
    handle_new_review_notification,
    handle_cabinet_removal_notification,
    handle_error_notification
)

logger = logging.getLogger(__name__)

class NotificationPoller:
    """Polling —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    def __init__(self, bot):
        self.bot = bot
        self.server_url = config.server_host
        self.api_key = config.api_secret_key
        self.polling_interval = config.polling_interval  # –ò–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.last_check_times = {}  # {telegram_id: datetime}
        self.user_last_activity = {}  # {telegram_id: datetime} - –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        self.is_running = False
        self.max_inactive_hours = 24  # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ–ª–µ–µ 24 —á–∞—Å–æ–≤
        self._last_cleanup = None
        
    async def start_polling(self):
        """–ó–∞–ø—É—Å–∫ polling —Å–∏—Å—Ç–µ–º—ã"""
        self.is_running = True
        logger.info("üîÑ Starting notification polling system...")
        
        while self.is_running:
            try:
                await self._poll_notifications()
                await asyncio.sleep(self.polling_interval)
            except Exception as e:
                logger.error(f"Error in polling loop: {e}")
                await asyncio.sleep(30)  # –ü–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    async def stop_polling(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ polling —Å–∏—Å—Ç–µ–º—ã"""
        self.is_running = False
        logger.info("üõë Stopping notification polling system...")
    
    async def _cleanup_inactive_users(self):
        """–û—á–∏—Å—Ç–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        now = TimezoneUtils.now_msk()
        inactive_users = []
        
        for telegram_id, last_activity in self.user_last_activity.items():
            if (now - last_activity).total_seconds() > self.max_inactive_hours * 3600:
                inactive_users.append(telegram_id)
        
        for telegram_id in inactive_users:
            self.last_check_times.pop(telegram_id, None)
            self.user_last_activity.pop(telegram_id, None)
            logger.info(f"üßπ –£–¥–∞–ª–µ–Ω –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id}")
        
        if inactive_users:
            logger.info(f"üßπ –û—á–∏—â–µ–Ω–æ {len(inactive_users)} –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    
    async def _poll_notifications(self):
        """–û–ø—Ä–æ—Å —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –Ω–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            # –û—á–∏—â–∞–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
            if self._last_cleanup is None or (TimezoneUtils.now_msk() - self._last_cleanup).total_seconds() > 600:
                await self._cleanup_inactive_users()
                self._last_cleanup = TimezoneUtils.now_msk()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            active_users = await self._get_active_users()
            
            if not active_users:
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            async with aiohttp.ClientSession() as session:
                for telegram_id in active_users:
                    try:
                        await self._check_user_notifications(session, telegram_id)
                    except Exception as e:
                        logger.error(f"Error checking notifications for user {telegram_id}: {e}")
                        
        except Exception as e:
            logger.error(f"Error in _poll_notifications: {e}")
    
    async def _get_active_users(self) -> List[int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –∫—ç—à–∞
        return [5101525651]  # –í–∞—à telegram_id
    
    async def _check_user_notifications(self, session: aiohttp.ClientSession, telegram_id: int):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            logger.info(f"üîç Checking notifications for user {telegram_id}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.user_last_activity[telegram_id] = TimezoneUtils.now_msk()
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –ú–°–ö
            last_check = self.last_check_times.get(telegram_id)
            if not last_check:
                # –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ 1 –º–∏–Ω—É—Ç—É –Ω–∞–∑–∞–¥ –≤ –ú–°–ö
                last_check = TimezoneUtils.now_msk() - timedelta(minutes=1)
                self.last_check_times[telegram_id] = last_check
                logger.info(f"üîÑ First polling for user {telegram_id} - using 1 minute ago as last_check")
                # –ù–ï –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –∑–∞–ø—Ä–æ—Å–æ–º
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
            url = f"{self.server_url}/api/v1/notifications/poll"
            params = {
                "telegram_id": telegram_id,
                "last_check": last_check.isoformat()
            }
            headers = {
                "X-API-SECRET-KEY": self.api_key
            }
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
            async with session.get(url, params=params, headers=headers) as response:
                logger.info(f"üì° Server response: {response.status}")
                
                if response.status == 200:
                    data = await response.json()
                    logger.info(f"üìä Response data: success={data.get('success')}, events_count={len(data.get('events', []))}")
                    
                    if data.get("success") and data.get("events"):
                        await self._process_events(telegram_id, data["events"])
                        logger.info(f"üì• Processed {len(data['events'])} events for user {telegram_id}")
                    else:
                        logger.info(f"üì≠ No events to process for user {telegram_id}")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –ú–°–ö
                    server_last_check = data.get("last_check")
                    if server_last_check:
                        try:
                            # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è —Å —Å–µ—Ä–≤–µ—Ä–∞ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ú–°–ö
                            server_time = datetime.fromisoformat(server_last_check.replace('Z', '+00:00'))
                            self.last_check_times[telegram_id] = TimezoneUtils.to_msk(server_time)
                        except Exception:
                            self.last_check_times[telegram_id] = TimezoneUtils.now_msk()
                    else:
                        self.last_check_times[telegram_id] = TimezoneUtils.now_msk()
                    
                elif response.status == 404:
                    logger.warning(f"User {telegram_id} not found on server")
                else:
                    logger.error(f"Server returned status {response.status} for user {telegram_id}")
                    
        except aiohttp.ClientError as e:
            logger.error(f"Network error checking notifications for user {telegram_id}: {e}")
        except Exception as e:
            logger.error(f"Error checking notifications for user {telegram_id}: {e}")
    
    async def _process_events(self, telegram_id: int, events: List[Dict[str, Any]]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π"""
        for event in events:
            try:
                event_type = event.get("type")
                event_data = event.get("data", {})
                
                logger.info(f"üîÑ Processing event {event_type} for user {telegram_id}")
                
                # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
                from aiogram.types import Message, Chat, User
                
                fake_chat = Chat(
                    id=telegram_id,
                    type='private'
                )
                
                fake_user = User(
                    id=telegram_id,
                    is_bot=False,
                    first_name='User'
                )
                
                fake_message = Message(
                    message_id=0,
                    date=datetime.now(),
                    chat=fake_chat,
                    from_user=fake_user,
                    content_type='text',
                    text='',
                    web_app_data=None
                )
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
                if event_type == "new_order":
                    # –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –ø—Ä–∏—Å–ª–∞–ª –≥–æ—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ. –ü—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ image_url –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Ñ–æ—Ç–æ
                    telegram_text = event.get("telegram_text")
                    data_payload = event.get("data", {}) or {}
                    image_url = data_payload.get("image_url")
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    if image_url:
                        logger.info(f"üñºÔ∏è Sending photo for order {data_payload.get('order_id', 'unknown')}: {image_url}")
                    else:
                        logger.warning(f"‚ö†Ô∏è No image URL for order {data_payload.get('order_id', 'unknown')}")
                    
                    if telegram_text and image_url:
                        try:
                            await self.bot.send_photo(chat_id=telegram_id, photo=image_url, caption=telegram_text)
                            logger.info(f"‚úÖ Photo sent successfully for order {data_payload.get('order_id', 'unknown')}")
                        except Exception as e:
                            logger.error(f"‚ùå Failed to send photo: {e}, falling back to text")
                            await self.bot.send_message(chat_id=telegram_id, text=telegram_text)
                    elif telegram_text:
                        await self.bot.send_message(chat_id=telegram_id, text=telegram_text)
                    else:
                        await self._handle_new_order_notification(telegram_id, event_data)
                elif event_type == "critical_stocks":
                    await self._handle_critical_stocks_notification(telegram_id, event_data)
                elif event_type == "new_review":
                    await self._handle_new_review_notification(telegram_id, event_data)
                elif event_type == "negative_review":
                    await self._handle_negative_review_notification(telegram_id, event_data)
                elif event_type == "order_buyout":
                    await self._handle_order_buyout_notification(telegram_id, event_data)
                elif event_type == "order_cancellation":
                    await self._handle_order_cancellation_notification(telegram_id, event_data)
                elif event_type == "order_return":
                    await self._handle_order_return_notification(telegram_id, event_data)
                elif event_type == "cabinet_removal":
                    await self._handle_cabinet_removal_notification(telegram_id, event_data)
                elif event_type == "system_error":
                    await self._handle_error_notification(telegram_id, event_data)
                elif event_type == "sync_completed":
                    await self._handle_sync_completed_notification(telegram_id, event_data)
                else:
                    logger.warning(f"Unknown event type: {event_type}")
                    
            except Exception as e:
                logger.error(f"Error processing event {event.get('type')} for user {telegram_id}: {e}")
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await self._handle_error_notification(telegram_id, {
                    "type": "event_processing_error",
                    "message": f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è: {str(e)}"
                })
    
    async def _handle_universal_notification(self, telegram_id: int, event_data: dict, notification_type: str):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –¥–µ—Ç–∞–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤ (–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å)
        if notification_type in ["new_review", "negative_review"]:
            product_name = event_data.get('product_name', 'N/A')
            rating = event_data.get('rating', 0)
            text = event_data.get('text', 'N/A')
            user_name = event_data.get('user_name', 'N/A')
            review_id = event_data.get('review_id', 'N/A')
            
            # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            display_text = text[:100] + ('...' if len(text) > 100 else '')
            
            icon = "‚≠ê" if notification_type == "new_review" else "üòû"
            title = "–ù–û–í–´–ô –û–¢–ó–´–í" if notification_type == "new_review" else "–ù–ï–ì–ê–¢–ò–í–ù–´–ô –û–¢–ó–´–í"
            
            message_text = f"""{icon} {title}

üì¶ {product_name}
‚≠ê –†–µ–π—Ç–∏–Ω–≥: {rating}/5
üí¨ "{display_text}"
üë§ –ê–≤—Ç–æ—Ä: {user_name}
üÜî ID –æ—Ç–∑—ã–≤–∞: {review_id}"""
            
            if notification_type == "new_review":
                message_text += "\n\nüí° –ù–∞–∂–º–∏—Ç–µ /reviews –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –æ—Ç–∑—ã–≤–æ–≤"
            else:
                message_text += "\n\n‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –æ—Ç–∑—ã–≤ –∏–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º"
            
            await self.bot.send_message(chat_id=telegram_id, text=message_text)
            logger.info(f"‚úÖ {notification_type} notification sent to user {telegram_id}")
            return
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –æ—Å—Ç–∞—Ç–∫–æ–≤ (–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å)
        if notification_type == "critical_stocks":
            product_name = event_data.get('name') or event_data.get('product_name') or event_data.get('title') or f"–¢–æ–≤–∞—Ä {event_data.get('nm_id', 'N/A')}"
            nm_id = event_data.get('nm_id', 'N/A')
            stocks = event_data.get('stocks', {})
            critical_sizes = event_data.get("critical_sizes", [])
            
            message_text = f"""‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–°–¢–ê–¢–ö–ò

üì¶ {product_name}
üÜî {nm_id}
üìä –û—Å—Ç–∞—Ç–∫–∏: {stocks}"""
            
            if critical_sizes:
                message_text += f"\n‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–Ω–æ: {', '.join(critical_sizes)}"
            
            await self.bot.send_message(chat_id=telegram_id, text=message_text)
            logger.info(f"‚úÖ {notification_type} notification sent to user {telegram_id}")
            return
        
        # –î–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∑–∞–∫–∞–∑–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        await self._handle_detailed_order_notification(telegram_id, event_data, notification_type)
    
    async def _handle_detailed_order_notification(self, telegram_id: int, event_data: dict, notification_type: str):
        """–î–µ—Ç–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ (–∫–∞–∫ –≤ –º–µ–Ω—é)"""
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
        status_map = {
            "new_order": "–ù–û–í–´–ô –ó–ê–ö–ê–ó",
            "order_buyout": "–ó–ê–ö–ê–ó –í–´–ö–£–ü–õ–ï–ù", 
            "order_cancellation": "–ó–ê–ö–ê–ó –û–¢–ú–ï–ù–ï–ù",
            "order_return": "–ó–ê–ö–ê–ó –í–û–ó–í–†–ê–©–ï–ù"
        }
        
        status = status_map.get(notification_type, "–ó–ê–ö–ê–ó")
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        order_id = event_data.get("order_id", event_data.get("id", "N/A"))
        order_date = self._format_datetime(event_data.get("date", event_data.get("order_date", "")))
        brand = event_data.get("brand", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        product_name = event_data.get("product_name", event_data.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"))
        nm_id = event_data.get("nm_id", "N/A")
        supplier_article = event_data.get("supplier_article", event_data.get("article", ""))
        size = event_data.get("size", "")
        barcode = event_data.get("barcode", "")
        warehouse_from = event_data.get("warehouse_from", "")
        warehouse_to = event_data.get("warehouse_to", "")
        
        # –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        order_amount = event_data.get("amount", event_data.get("total_price", 0))
        spp_percent = event_data.get("spp_percent", 0)
        customer_price = event_data.get("customer_price", 0)
        logistics_amount = event_data.get("logistics_amount", 0)
        
        # –õ–æ–≥–∏—Å—Ç–∏–∫–∞
        dimensions = event_data.get("dimensions", "")
        volume_liters = event_data.get("volume_liters", 0)
        warehouse_rate_per_liter = event_data.get("warehouse_rate_per_liter", 0)
        warehouse_rate_extra = event_data.get("warehouse_rate_extra", 0)
        
        # –†–µ–π—Ç–∏–Ω–≥–∏ –∏ –æ—Ç–∑—ã–≤—ã
        rating = event_data.get("rating", 0)
        reviews_count = event_data.get("reviews_count", 0)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        sales_periods = event_data.get("sales_periods", {})
        
        # –û—Å—Ç–∞—Ç–∫–∏
        stocks = event_data.get("stocks", {})
        stock_days = event_data.get("stock_days", {})
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–æ–º –∂–µ —Ñ–æ—Ä–º–∞—Ç–µ, —á—Ç–æ –∏ –≤ –º–µ–Ω—é
        message = f"üßæ {status} [#{order_id}] {order_date}\n\n"
        message += f"‚úè {product_name}\n"
        message += f"üÜî {nm_id} / {supplier_article} / ({size})\n"
        if barcode:
            message += f"üéπ {barcode}\n"
        message += f"üöõ {warehouse_from} ‚ü∂ {warehouse_to}\n"
        message += f"üí∞ –¶–µ–Ω–∞ –∑–∞–∫–∞–∑–∞: {order_amount:,.0f}‚ÇΩ\n"
        
        # –£—Å–ª–æ–≤–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª–µ–π
        if spp_percent or customer_price:
            message += f"üõç –°–ü–ü: {spp_percent}% (–¶–µ–Ω–∞ –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è: {customer_price:,.0f}‚ÇΩ)\n"
        if logistics_amount:
            message += f"üí∂ –õ–æ–≥–∏—Å—Ç–∏–∫–∞ WB: {logistics_amount:,.1f}‚ÇΩ\n"
        if dimensions or volume_liters:
            message += f"        –ì–∞–±–∞—Ä–∏—Ç—ã: {dimensions}. ({volume_liters}–ª.)\n"
        if warehouse_rate_per_liter or warehouse_rate_extra:
            message += f"        –¢–∞—Ä–∏—Ñ —Å–∫–ª–∞–¥–∞: {warehouse_rate_per_liter:,.1f}‚ÇΩ –∑–∞ 1–ª. | {warehouse_rate_extra:,.1f}‚ÇΩ –∑–∞ –ª. —Å–≤—ã—à–µ)\n"
        if rating or reviews_count:
            message += f"üåü –û—Ü–µ–Ω–∫–∞: {rating}\n"
        message += f"üí¨ –û—Ç–∑—ã–≤—ã: {reviews_count}\n"
        
        # –ü—Ä–æ–¥–∞–∂–∏
        if sales_periods and any(sales_periods.values()):
            message += f"üìñ –ü—Ä–æ–¥–∞–∂ –∑–∞ 7 / 14 / 30 –¥–Ω–µ–π:\n"
            message += f"        {sales_periods.get('7_days', 0)} | {sales_periods.get('14_days', 0)} | {sales_periods.get('30_days', 0)} —à—Ç.\n"
        
        # –û—Å—Ç–∞—Ç–∫–∏
        if stocks and any(stocks.values()):
            message += f"üì¶ –û—Å—Ç–∞—Ç–æ–∫:\n"
            for size in ["L", "M", "S", "XL"]:
                stock_count = stocks.get(size, 0)
                stock_days_count = stock_days.get(size, 0)
                if stock_count > 0 or stock_days_count > 0:
                    message += f"        {size} ({stock_count} —à—Ç.) ‚âà –Ω–∞ {stock_days_count} –¥–Ω.\n"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image_url = event_data.get("image_url")
        
        if image_url:
            try:
                await self.bot.send_photo(chat_id=telegram_id, photo=image_url, caption=message)
                logger.info(f"‚úÖ Photo sent successfully for {notification_type}")
            except Exception as e:
                logger.error(f"‚ùå Failed to send photo: {e}, falling back to text")
                await self.bot.send_message(chat_id=telegram_id, text=message)
        else:
            await self.bot.send_message(chat_id=telegram_id, text=message)
        
        logger.info(f"‚úÖ {notification_type} notification sent to user {telegram_id}")
    
    def _format_datetime(self, datetime_str: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏"""
        try:
            if not datetime_str:
                return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            
            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ú–°–ö
            from datetime import datetime
            dt = datetime.fromisoformat(datetime_str.replace('Z', '+00:00'))
            msk_dt = TimezoneUtils.to_msk(dt)
            
            return msk_dt.strftime("%d.%m.%Y %H:%M")
        except Exception:
            return datetime_str

    # –ê–ª–∏–∞—Å—ã –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    async def _handle_new_order_notification(self, telegram_id: int, event_data: dict):
        await self._handle_universal_notification(telegram_id, event_data, "new_order")
    
    async def _handle_critical_stocks_notification(self, telegram_id: int, event_data: dict):
        await self._handle_universal_notification(telegram_id, event_data, "critical_stocks")
    
    async def _handle_new_review_notification(self, telegram_id: int, event_data: dict):
        await self._handle_universal_notification(telegram_id, event_data, "new_review")
    
    async def _handle_negative_review_notification(self, telegram_id: int, event_data: dict):
        await self._handle_universal_notification(telegram_id, event_data, "negative_review")
    
    async def _handle_order_buyout_notification(self, telegram_id: int, event_data: dict):
        await self._handle_universal_notification(telegram_id, event_data, "order_buyout")
    
    async def _handle_order_cancellation_notification(self, telegram_id: int, event_data: dict):
        await self._handle_universal_notification(telegram_id, event_data, "order_cancellation")
    
    async def _handle_order_return_notification(self, telegram_id: int, event_data: dict):
        await self._handle_universal_notification(telegram_id, event_data, "order_return")
    
    async def _handle_cabinet_removal_notification(self, telegram_id: int, event_data: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–±–∏–Ω–µ—Ç–∞"""
        cabinet_data = event_data
        
        text = "üö® –ö–ê–ë–ò–ù–ï–¢ –£–î–ê–õ–ï–ù\n\n"
        text += f"–ö–∞–±–∏–Ω–µ—Ç \"{cabinet_data.get('cabinet_name', 'N/A')}\" –±—ã–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω –∏–∑-–∑–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–≥–æ API –∫–ª—é—á–∞.\n\n"
        text += f"**–ü—Ä–∏—á–∏–Ω–∞:** {cabinet_data.get('removal_reason', 'N/A')}\n"
        text += f"**–í—Ä–µ–º—è —É–¥–∞–ª–µ–Ω–∏—è:** {cabinet_data.get('removal_timestamp', 'N/A')}\n\n"
        
        validation_error = cabinet_data.get('validation_error', {})
        if validation_error and validation_error.get('message'):
            text += f"**–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:** {validation_error['message']}\n\n"
        
        text += "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –Ω–æ–≤—ã–π –∫–∞–±–∏–Ω–µ—Ç —Å –¥–µ–π—Å—Ç–≤—É—é—â–∏–º API –∫–ª—é—á–æ–º."
        
        await self.bot.send_message(chat_id=telegram_id, text=text)
        logger.info(f"‚úÖ Cabinet removal notification sent to user {telegram_id}")

    async def _handle_error_notification(self, telegram_id: int, event_data: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ"""
        error_type = event_data.get("type", "unknown")
        error_message = event_data.get("message", "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        
        text = f"‚ö†Ô∏è **–û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã**\n\n"
        text += f"–¢–∏–ø: {error_type}\n"
        text += f"–û–ø–∏—Å–∞–Ω–∏–µ: {error_message}\n\n"
        text += "üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"
        
        await self.bot.send_message(chat_id=telegram_id, text=text)
        logger.info(f"‚úÖ Error notification sent to user {telegram_id}")
    
    async def _handle_sync_completed_notification(self, telegram_id: int, event_data: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –ª–∏ –ø–µ—Ä–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
            is_first_sync = event_data.get("is_first_sync", False)
            
            if not is_first_sync:
                # –≠—Ç–æ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è - –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
                logger.info(f"üîÑ Periodic sync completed for user {telegram_id}, skipping menu")
                return
            
            # –≠—Ç–æ –ø–µ—Ä–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            logger.info(f"üèÅ First sync completed for user {telegram_id}, showing main menu")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞—à–±–æ—Ä–¥ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ
            from api.client import bot_api_client
            dashboard_response = await bot_api_client.get_dashboard(
                user_id=telegram_id
            )
            
            if dashboard_response.success:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞—à–±–æ—Ä–¥ —Å –∫–Ω–æ–ø–∫–æ–π –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
                from keyboards.keyboards import wb_menu_keyboard
                await self.bot.send_message(
                    chat_id=telegram_id,
                    text="‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n" + 
                         (dashboard_response.telegram_text or "üìä –î–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!"),
                    reply_markup=wb_menu_keyboard()
                )
                logger.info(f"‚úÖ Sync completion notification sent to user {telegram_id}")
            else:
                # –ï—Å–ª–∏ –¥–∞—à–±–æ—Ä–¥ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                from keyboards.keyboards import wb_menu_keyboard
                await self.bot.send_message(
                    chat_id=telegram_id,
                    text="‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\nüìä –î–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!",
                    reply_markup=wb_menu_keyboard()
                )
                logger.info(f"‚úÖ Sync completion notification sent to user {telegram_id}")
                
        except Exception as e:
            logger.error(f"Error handling sync completion notification for user {telegram_id}: {e}")
            # Fallback - –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            from keyboards.keyboards import wb_menu_keyboard
            await self.bot.send_message(
                chat_id=telegram_id,
                text="‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\nüìä –î–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!",
                reply_markup=wb_menu_keyboard()
            )


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä poller'–∞
poller: Optional[NotificationPoller] = None

async def start_notification_polling(bot):
    """–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã polling —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    global poller
    poller = NotificationPoller(bot)
    await poller.start_polling()

async def stop_notification_polling():
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã polling —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    global poller
    if poller:
        await poller.stop_polling()
