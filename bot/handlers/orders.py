import sys
import logging
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –±–æ—Ç–∞
sys.path.insert(0, str(Path(__file__).parent.parent))

from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command

from api.client import bot_api_client
from keyboards.keyboards import wb_menu_keyboard, main_keyboard, create_orders_keyboard
from utils.formatters import format_error_message

logger = logging.getLogger(__name__)

router = Router()


@router.callback_query(F.data == "orders")
async def show_orders_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∑–∞–∫–∞–∑–æ–≤"""
    logger.info(f"üîç DEBUG: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ orders –≤—ã–∑–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
    
    logger.info(f"üîç DEBUG: –í—ã–∑—ã–≤–∞–µ–º bot_api_client.get_recent_orders —Å user_id={callback.from_user.id}")
    response = await bot_api_client.get_recent_orders(
        user_id=callback.from_user.id,
        limit=10,
        offset=0
    )
    
    logger.info(f"üîç DEBUG: –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API: success={response.success}, status_code={response.status_code}")
    if response.error:
        logger.info(f"üîç DEBUG: –û—à–∏–±–∫–∞ API: {response.error}")
    
    if response.success and response.data:
        orders = response.data.get("orders", [])
        pagination = response.data.get("pagination", {})
        
        if orders:
            keyboard = create_orders_keyboard(
                orders=orders,
                offset=pagination.get("offset", 0),
                has_more=pagination.get("has_more", False)
            )
            
            await callback.message.edit_text(
                response.telegram_text or "üõí –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã",
                reply_markup=keyboard
            )
        else:
            await callback.message.edit_text(
                "üì≠ –ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç\n\n"
                "–ó–∞–∫–∞–∑—ã –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –ø—Ä–æ–¥–∞–∂–∏.",
                reply_markup=wb_menu_keyboard()
            )
    else:
        error_message = format_error_message(response.error, response.status_code)
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤:\n\n{error_message}",
            reply_markup=wb_menu_keyboard()
        )
    
    await callback.answer()


@router.callback_query(F.data == "recent_orders")
async def show_recent_orders(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã"""
    response = await bot_api_client.get_recent_orders(
        user_id=callback.from_user.id,
        limit=10,
        offset=0
    )
    
    if response.success and response.data:
        orders = response.data.get("orders", [])
        pagination = response.data.get("pagination", {})
        
        if orders:
            keyboard = create_orders_keyboard(
                orders=orders,
                offset=pagination.get("offset", 0),
                has_more=pagination.get("has_more", False)
            )
            
            await callback.message.edit_text(
                response.telegram_text or "üõí –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã",
                reply_markup=keyboard
            )
        else:
            await callback.message.edit_text(
                "üì≠ –ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç\n\n"
                "–ó–∞–∫–∞–∑—ã –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –ø—Ä–æ–¥–∞–∂–∏.",
                reply_markup=wb_menu_keyboard()
            )
    else:
        error_message = format_error_message(response.error, response.status_code)
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤:\n\n{error_message}",
            reply_markup=wb_menu_keyboard()
        )
    
    await callback.answer()


@router.callback_query(F.data.startswith("orders_page_"))
async def show_orders_page(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞–∫–∞–∑–æ–≤"""
    try:
        offset = int(callback.data.split("_")[-1])
    except (ValueError, IndexError):
        offset = 0
    
    response = await bot_api_client.get_recent_orders(
        user_id=callback.from_user.id,
        limit=10,
        offset=offset
    )
    
    if response.success and response.data:
        orders = response.data.get("orders", [])
        pagination = response.data.get("pagination", {})
        
        keyboard = create_orders_keyboard(
            orders=orders,
            offset=offset,
            has_more=pagination.get("has_more", False)
        )
        
        await callback.message.edit_text(
            response.telegram_text or "üõí –ó–∞–∫–∞–∑—ã",
            reply_markup=keyboard
        )
    else:
        error_message = format_error_message(response.error, response.status_code)
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤:\n\n{error_message}",
            reply_markup=wb_menu_keyboard()
        )
    
    await callback.answer()


@router.callback_query(F.data.startswith("order_details_"))
async def show_order_details(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ"""
    try:
        order_id = int(callback.data.split("_")[-1])
    except (ValueError, IndexError):
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–∫–∞–∑–∞")
        return
    
    response = await bot_api_client.get_order_details(order_id=order_id)
    
    if response.success and response.data:
        order = response.data.get("order", {})
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="üîô –ö —Å–ø–∏—Å–∫—É –∑–∞–∫–∞–∑–æ–≤",
                callback_data="sales_period"
            )],
            [InlineKeyboardButton(
                text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
                callback_data=f"order_details_{order_id}"
            )]
        ])
        
        await callback.message.edit_text(
            response.telegram_text or "üßæ –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞",
            reply_markup=keyboard
        )
    else:
        error_message = format_error_message(response.error, response.status_code)
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–∞:\n\n{error_message}",
            reply_markup=wb_menu_keyboard()
        )
    
    await callback.answer()


@router.message(Command("orders"))
async def cmd_orders(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /orders"""
    response = await bot_api_client.get_recent_orders(
        user_id=message.from_user.id,
        limit=10,
        offset=0
    )
    
    if response.success and response.data:
        orders = response.data.get("orders", [])
        pagination = response.data.get("pagination", {})
        
        if orders:
            keyboard = create_orders_keyboard(
                orders=orders,
                offset=0,
                has_more=pagination.get("has_more", False)
            )
            
            await message.answer(
                response.telegram_text or "üõí –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã",
                reply_markup=keyboard
            )
        else:
            await message.answer(
                "üì≠ –ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç\n\n"
                "–ó–∞–∫–∞–∑—ã –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –ø—Ä–æ–¥–∞–∂–∏.",
                reply_markup=wb_menu_keyboard()
            )
    else:
        error_message = format_error_message(response.error, response.status_code)
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤:\n\n{error_message}",
            reply_markup=main_keyboard()
        )