import sys
import logging
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –±–æ—Ç–∞
sys.path.insert(0, str(Path(__file__).parent.parent))

from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command

from api.client import bot_api_client
from keyboards.keyboards import wb_menu_keyboard, main_keyboard, create_orders_keyboard
from utils.formatters import format_error_message, safe_edit_message, handle_telegram_errors

logger = logging.getLogger(__name__)

router = Router()


@router.callback_query(F.data == "orders")
async def show_orders_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∑–∞–∫–∞–∑–æ–≤"""
    logger.info(f"üîç [show_orders_menu] User {callback.from_user.id} requested orders menu")
    
    response = await bot_api_client.get_recent_orders(
        user_id=callback.from_user.id,
        limit=10,
        offset=0
    )
    
    
    if response.success:
        # –ù–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞: –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ—Ä–Ω–µ response
        orders = response.orders or []
        pagination = response.pagination or {}
        
        if orders:
            keyboard = create_orders_keyboard(
                orders=orders,
                offset=pagination.get("offset", 0),
                has_more=pagination.get("has_more", False)
            )
            new_text = response.telegram_text or "üõí –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã"
            new_markup = keyboard
        else:
            new_text = ("üì≠ –ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç\n\n"
                       "–ó–∞–∫–∞–∑—ã –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –ø—Ä–æ–¥–∞–∂–∏.")
            new_markup = wb_menu_keyboard()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—Å—Ç –≤ —Ç–µ–∫—É—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        current_text = getattr(callback.message, "text", None)
        if current_text:
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç, –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
            await safe_edit_message(
                callback=callback,
                text=new_text,
                reply_markup=new_markup,
                user_id=callback.from_user.id
            )
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞ (—Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ), —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            await callback.message.delete()
            await callback.message.answer(
                text=new_text,
                reply_markup=new_markup
            )
    else:
        error_message = format_error_message(response.error, response.status_code)
        new_text = f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤:\n\n{error_message}"
        new_markup = wb_menu_keyboard()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—Å—Ç –≤ —Ç–µ–∫—É—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        current_text = getattr(callback.message, "text", None)
        if current_text:
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç, –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
            await safe_edit_message(
                callback=callback,
                text=new_text,
                reply_markup=new_markup,
                user_id=callback.from_user.id
            )
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞ (—Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ), —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            await callback.message.delete()
            await callback.message.answer(
                text=new_text,
                reply_markup=new_markup
            )
    
    await callback.answer()


@router.callback_query(F.data == "recent_orders")
async def show_recent_orders(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã"""
    response = await bot_api_client.get_recent_orders(
        user_id=callback.from_user.id,
        limit=10,
        offset=0
    )
    
    if response.success:
        # –ù–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞: –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ—Ä–Ω–µ response
        orders = response.orders or []
        pagination = response.pagination or {}
        
        if orders:
            keyboard = create_orders_keyboard(
                orders=orders,
                offset=pagination.get("offset", 0),
                has_more=pagination.get("has_more", False)
            )
            
            await callback.message.edit_text(
                response.telegram_text or "üõí –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã",
                reply_markup=keyboard
            )
        else:
            await callback.message.edit_text(
                "üì≠ –ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç\n\n"
                "–ó–∞–∫–∞–∑—ã –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –ø—Ä–æ–¥–∞–∂–∏.",
                reply_markup=wb_menu_keyboard()
            )
    else:
        error_message = format_error_message(response.error, response.status_code)
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤:\n\n{error_message}",
            reply_markup=wb_menu_keyboard()
        )
    
    await callback.answer()


@router.callback_query(F.data.startswith("orders_page_"))
async def show_orders_page(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞–∫–∞–∑–æ–≤"""
    try:
        offset = int(callback.data.split("_")[-1])
    except (ValueError, IndexError):
        offset = 0
    
    response = await bot_api_client.get_recent_orders(
        user_id=callback.from_user.id,
        limit=10,
        offset=offset
    )
    
    if response.success:
        # –ù–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞: –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ—Ä–Ω–µ response
        orders = response.orders or []
        pagination = response.pagination or {}
        
        keyboard = create_orders_keyboard(
            orders=orders,
            offset=offset,
            has_more=pagination.get("has_more", False)
        )
        
        await callback.message.edit_text(
            response.telegram_text or "üõí –ó–∞–∫–∞–∑—ã",
            reply_markup=keyboard
        )
    else:
        error_message = format_error_message(response.error, response.status_code)
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤:\n\n{error_message}",
            reply_markup=wb_menu_keyboard()
        )
    
    await callback.answer()


@router.callback_query(F.data.startswith("order_details_"))
async def show_order_details(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ"""
    try:
        order_id = int(callback.data.split("_")[-1])
    except (ValueError, IndexError):
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–∫–∞–∑–∞")
        return
    
    response = await bot_api_client.get_order_details(order_id=order_id, user_id=callback.from_user.id)
    
    if response.success:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤–æ–µ –ø–æ–ª–µ order –∏–∑ response
        order = response.order or {}
        image_url = order.get("image_url")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.info(f"üì¢ Order detail response: {response}")
        logger.info(f"üì¢ Order data: {order}")
        logger.info(f"üì¢ Order image_url: {image_url}")
        logger.info(f"üì¢ Telegram text: {response.telegram_text}")
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="üîô –ö —Å–ø–∏—Å–∫—É –∑–∞–∫–∞–∑–æ–≤",
                callback_data="orders"
            )]
            # [InlineKeyboardButton(
            #     text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
            #     callback_data=f"order_details_{order_id}"
            # )]
        ])
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é, –∏–Ω–∞—á–µ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if image_url:
            try:
                logger.info(f"üì¢ Sending photo for order detail: {image_url}")
                await callback.message.delete()
                await callback.message.answer_photo(
                    photo=image_url,
                    caption=response.telegram_text or "üßæ –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞",
                    reply_markup=keyboard
                )
                logger.info(f"üì¢ Photo sent successfully for order {order_id}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
                await callback.message.edit_text(
                    response.telegram_text or "üßæ –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞",
                    reply_markup=keyboard
                )
        else:
            logger.info(f"üì¢ No image_url for order {order_id}, sending text only")
            await callback.message.edit_text(
                response.telegram_text or "üßæ –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞",
                reply_markup=keyboard
            )
    else:
        error_message = format_error_message(response.error, response.status_code)
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–∞:\n\n{error_message}",
            reply_markup=wb_menu_keyboard()
        )
    
    await callback.answer()


@router.message(Command("orders"))
async def cmd_orders(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /orders"""
    logger.info(f"üîç [cmd_orders] User {message.from_user.id} used /orders command")
    
    response = await bot_api_client.get_recent_orders(
        user_id=message.from_user.id,
        limit=10,
        offset=0
    )
    
    logger.info(f"üì° [cmd_orders] API response: success={response.success}, error={response.error}")
    
    if response.success:
        # –ù–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞: –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ—Ä–Ω–µ response
        orders = response.orders or []
        pagination = response.pagination or {}
        
        logger.info(f"üìã [cmd_orders] Received {len(orders)} orders from API")
        for i, order in enumerate(orders[:3]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –∑–∞–∫–∞–∑–∞
            logger.info(f"   Order {i+1}: ID={order.get('id')}, WB_ID={order.get('order_id')}, Date={order.get('date')}, Amount={order.get('amount')}")
        
        if orders:
            keyboard = create_orders_keyboard(
                orders=orders,
                offset=0,
                has_more=pagination.get("has_more", False)
            )
            
            await message.answer(
                response.telegram_text or "üõí –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã",
                reply_markup=keyboard
            )
        else:
            await message.answer(
                "üì≠ –ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç\n\n"
                "–ó–∞–∫–∞–∑—ã –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –ø—Ä–æ–¥–∞–∂–∏.",
                reply_markup=wb_menu_keyboard()
            )
    else:
        error_message = format_error_message(response.error, response.status_code)
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤:\n\n{error_message}",
            reply_markup=main_keyboard()
        )