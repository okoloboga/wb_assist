"""
Webhook handlers –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
"""
import logging
import hmac
import hashlib
import json
from typing import Dict, Any, Optional
from aiogram import Bot, Dispatcher, Router
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram import F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from fastapi import FastAPI, Request, HTTPException, Header, status, Depends
from fastapi.responses import JSONResponse
import json

from core.config import config

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
router = Router()

# –°–æ–∑–¥–∞–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è webhook
webhook_app = FastAPI()
# –£–¥–∞–ª–µ–Ω—ã –∏–º–ø–æ—Ä—Ç—ã –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π

logger = logging.getLogger(__name__)


class WebhookStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook"""
    waiting_for_webhook_url = State()


# @router.message(Command("webhook"))
# async def setup_webhook_command(message: Message, state: FSMContext):
#     """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook URL"""
#     await message.answer(
#         "üîó **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Webhook**\n\n"
#         "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –Ω—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å webhook URL.\n\n"
#         "–í–≤–µ–¥–∏—Ç–µ URL –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: https://your-bot-domain.com/webhook/notifications):",
#         parse_mode="Markdown"
#     )
#     await state.set_state(WebhookStates.waiting_for_webhook_url)


# @router.message(WebhookStates.waiting_for_webhook_url)
# async def process_webhook_url(message: Message, state: FSMContext):
#     """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ webhook URL"""
#     # –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ - webhook –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
#     pass

# @router.message(Command("cancel"))
# async def cancel_webhook_setup(message: Message, state: FSMContext):
#     """–û—Ç–º–µ–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook"""
#     # –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ - webhook –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
#     pass


# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π webhook endpoint —Å telegram_id –≤ URL
@webhook_app.post("/webhook/notifications/{telegram_id}")
async def receive_auto_webhook(
    telegram_id: int,
    request: Request,
    x_webhook_signature: Optional[str] = Header(None)
):
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π webhook endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞.
    URL: /webhook/notifications/{telegram_id}
    """
    try:
        payload_body = await request.body()
        notification_data = json.loads(payload_body)

        # –ü–æ–ª—É—á–∞–µ–º telegram_id –∏–∑ payload –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        payload_telegram_id = notification_data.get("telegram_id")
        user_id = notification_data.get("user_id")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ telegram_id –≤ URL –∏ payload
        if payload_telegram_id and payload_telegram_id != telegram_id:
            logger.warning(f"Telegram ID mismatch: URL={telegram_id}, payload={payload_telegram_id}")
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º telegram_id –∏–∑ URL (–±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ)
            telegram_id_to_use = telegram_id
        else:
            telegram_id_to_use = telegram_id
        
        logger.info(f"Processing webhook for telegram_id={telegram_id_to_use}, user_id={user_id}")

        telegram_text = notification_data.get("telegram_text")
        notification_type = notification_data.get("type")

        if not telegram_text:
            logger.error(f"Invalid webhook payload: missing telegram_text. Payload: {notification_data}")
            raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail="Invalid payload")

        # –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        # TODO: –í–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∏ –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ–∫—Ä–µ—Ç–æ–≤
        logger.info(f"Webhook signature verification disabled for user {telegram_id}")

        logger.info(f"Received auto webhook notification for user {telegram_id} (type: {notification_type})")

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
        # –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        from core.config import config
        from aiogram import Bot
        bot = Bot(token=config.bot_token)
        
        # –î–ª—è sync_completed —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º dashboard —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        if notification_type == "sync_completed":
            # –ò–∑–≤–ª–µ–∫–∞–µ–º data –∏–∑ notification_data
            data = notification_data.get("data", {})
            is_first_sync = data.get("is_first_sync", False)
            
            if is_first_sync:
                # –ü–µ—Ä–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º dashboard —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
                from keyboards.keyboards import wb_menu_keyboard
                from api.client import bot_api_client
                
                try:
                    # –ü–æ–ª—É—á–∞–µ–º dashboard –¥–∞–Ω–Ω—ã–µ (–∏—Å–ø–æ–ª—å–∑—É–µ–º user_id –∫–∞–∫ –≤ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏)
                    dashboard_response = await bot_api_client.get_dashboard(user_id=telegram_id)
                    
                    if dashboard_response.success:
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–π dashboard —Ç–µ–∫—Å—Ç –∏–∑ API
                        dashboard_text = dashboard_response.telegram_text or "üìä –î–∞—à–±–æ—Ä–¥ –∑–∞–≥—Ä—É–∂–µ–Ω"
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
                        text = f"üéâ **–ü–ï–†–í–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!**\n\n"
                        text += f"‚úÖ {telegram_text}\n\n"
                        text += "üìä –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:\n\n"
                        text += dashboard_text
                        
                        try:
                            await bot.send_message(
                                chat_id=telegram_id,
                                text=text,
                                reply_markup=wb_menu_keyboard(),
                                parse_mode="Markdown"
                            )
                            logger.info(f"üéâ First sync completion sent to telegram_id {telegram_id}")
                        except Exception as send_error:
                            logger.error(f"Error sending first sync message: {send_error}")
                            # –§–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–æ–ª–±—ç–∫ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                            await bot.send_message(
                                chat_id=telegram_id,
                                text=f"üéâ –ü–ï–†–í–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!\n\n‚úÖ {telegram_text}\n\nüìä –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.",
                                reply_markup=wb_menu_keyboard()
                            )
                    else:
                        # –§–æ–ª–±—ç–∫ –µ—Å–ª–∏ dashboard –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
                        text = f"üéâ **–ü–ï–†–í–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!**\n\n"
                        text += f"‚úÖ {telegram_text}\n\n"
                        text += "üìä –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é."
                        
                        try:
                            await bot.send_message(
                                chat_id=telegram_id,
                                text=text,
                                reply_markup=wb_menu_keyboard(),
                                parse_mode="Markdown"
                            )
                        except Exception as send_error:
                            logger.error(f"Error sending fallback message: {send_error}")
                            # –§–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–æ–ª–±—ç–∫ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                            await bot.send_message(
                                chat_id=telegram_id,
                                text=f"üéâ –ü–ï–†–í–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!\n\n‚úÖ {telegram_text}\n\nüìä –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.",
                                reply_markup=wb_menu_keyboard()
                            )
                except Exception as e:
                    logger.error(f"Error getting dashboard for telegram_id {telegram_id}: {e}")
                    # –§–æ–ª–±—ç–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
                    try:
                        text = f"üéâ **–ü–ï–†–í–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!**\n\n"
                        text += f"‚úÖ {telegram_text}\n\n"
                        text += "üìä –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é."
                        
                        await bot.send_message(
                            chat_id=telegram_id,
                            text=text,
                            reply_markup=wb_menu_keyboard(),
                            parse_mode="Markdown"
                        )
                    except Exception as final_error:
                        logger.error(f"Final fallback failed for telegram_id {telegram_id}: {final_error}")
                        # –ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–Ω—Å - –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        await bot.send_message(
                            chat_id=telegram_id,
                            text=f"üéâ –ü–ï–†–í–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!\n\n‚úÖ {telegram_text}"
                        )
            else:
                # –ü–æ—Å–ª–µ–¥—É—é—â–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ - —Ç–æ–ª—å–∫–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                try:
                    await bot.send_message(
                        chat_id=telegram_id,
                        text=telegram_text,
                        parse_mode="Markdown"
                    )
                    logger.info(f"üì± Sync completion sent to telegram_id {telegram_id}")
                except Exception as e:
                    logger.error(f"Error sending sync completion to telegram_id {telegram_id}: {e}")
                    # –§–æ–ª–±—ç–∫ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    try:
                        await bot.send_message(
                            chat_id=telegram_id,
                            text=telegram_text
                        )
                    except Exception as fallback_error:
                        logger.error(f"Fallback sync completion failed for telegram_id {telegram_id}: {fallback_error}")
        else:
            # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ image_url
            data = notification_data.get("data", {})
            image_url = data.get("image_url")
            
            if image_url:
                # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
                try:
                    await bot.send_photo(
                        chat_id=telegram_id,
                        photo=image_url,
                        caption=telegram_text,
                        parse_mode=None  # ‚Üê –û–¢–ö–õ–Æ–ß–ê–ï–ú MARKDOWN!
                    )
                    logger.info(f"üì∏ Sent photo notification to telegram_id {telegram_id}: {image_url}")
                except Exception as e:
                    logger.error(f"Error sending photo notification: {e}")
                    # –§–æ–ª–±—ç–∫ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    try:
                        await bot.send_message(
                            chat_id=telegram_id,
                            text=telegram_text,
                            parse_mode=None  # ‚Üê –û–¢–ö–õ–Æ–ß–ê–ï–ú MARKDOWN!
                        )
                        logger.info(f"üì± Fallback message sent to telegram_id {telegram_id}")
                    except Exception as fallback_error:
                        logger.error(f"Fallback message failed for telegram_id {telegram_id}: {fallback_error}")
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                try:
                    await bot.send_message(
                        chat_id=telegram_id,
                        text=telegram_text,
                        parse_mode=None  # ‚Üê –û–¢–ö–õ–Æ–ß–ê–ï–ú MARKDOWN!
                    )
                    logger.info(f"üì± Message sent to telegram_id {telegram_id}")
                except Exception as e:
                    logger.error(f"Error sending message to telegram_id {telegram_id}: {e}")
        
        logger.info(f"‚úÖ Webhook notification sent to telegram_id {telegram_id}")

        return {"status": "success", "message": "Auto webhook notification received and processed"}

    except json.JSONDecodeError:
        logger.error("Invalid JSON payload received for auto webhook")
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail="Invalid JSON payload")
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error processing auto webhook notification: {e}", exc_info=True)
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=f"Internal server error: {e}")


def _verify_signature(payload_body: bytes, secret: str, signature: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç HMAC-SHA256 –ø–æ–¥–ø–∏—Å—å webhook'–∞.
    """
    if not secret:
        logger.warning("Webhook secret not configured, skipping signature verification.")
        return True  # –ï—Å–ª–∏ —Å–µ–∫—Ä–µ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É (–¥–ª—è dev)

    if not signature or not signature.startswith("sha256="):
        logger.error("Invalid or missing X-Webhook-Signature header.")
        return False

    hash_algorithm, hex_digest = signature.split("=", 1)
    if hash_algorithm != "sha256":
        logger.error(f"Unsupported hash algorithm: {hash_algorithm}")
        return False

    hmac_obj = hmac.new(secret.encode('utf-8'), payload_body, hashlib.sha256)
    expected_signature = hmac_obj.hexdigest()

    return hmac.compare_digest(expected_signature, hex_digest)


# –£–¥–∞–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è handle_webhook_notification - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–æ—Å—Ç–æ–π –ø–æ–¥—Ö–æ–¥


def verify_webhook_signature(payload: str, signature: str, secret: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ webhook –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    
    Args:
        payload: –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
        signature: –ü–æ–¥–ø–∏—Å—å –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        secret: –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á
    
    Returns:
        bool: True –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å—å –≤–µ—Ä–Ω–∞
    """
    try:
        if not signature.startswith("sha256="):
            return False
        
        # –£–±–∏—Ä–∞–µ–º "sha256=" –ø—Ä–µ—Ñ–∏–∫—Å
        received_signature = signature[7:]
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–∂–∏–¥–∞–µ–º—É—é –ø–æ–¥–ø–∏—Å—å
        expected_signature = hmac.new(
            secret.encode('utf-8'),
            payload.encode('utf-8'),
            hashlib.sha256
        ).hexdigest()
        
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ
        return hmac.compare_digest(received_signature, expected_signature)
        
    except Exception as e:
        logger.error(f"Error verifying webhook signature: {e}")
        return False


async def handle_sync_completed_notification(bot: Bot, telegram_id: int, data: Dict[str, Any]):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
    try:
        is_first_sync = data.get("is_first_sync", False)
        cabinet_id = data.get("cabinet_id")
        message = data.get("message", "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        
        if is_first_sync:
            # –ü–µ—Ä–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            from keyboards.keyboards import wb_menu_keyboard
            from api.client import bot_api_client
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞—à–±–æ—Ä–¥ –¥–ª—è –ø–æ–∫–∞–∑–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
            dashboard_response = await bot_api_client.get_dashboard(telegram_id=telegram_id)
            
            if dashboard_response.success:
                text = f"üéâ **–ü–ï–†–í–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!**\n\n"
                text += f"‚úÖ {message}\n\n"
                text += "üìä –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
                
                await safe_send_message(
                    bot, telegram_id, text, 
                    reply_markup=wb_menu_keyboard()
                )
            else:
                # –§–æ–ª–±—ç–∫ –µ—Å–ª–∏ –¥–∞—à–±–æ—Ä–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
                text = f"üéâ **–ü–ï–†–í–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!**\n\n"
                text += f"‚úÖ {message}"
                
                await safe_send_message(bot, telegram_id, text)
        else:
            # –ü–æ—Å–ª–µ–¥—É—é—â–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ - —Ç–æ–ª—å–∫–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±–µ–∑ –º–µ–Ω—é
            text = f"‚úÖ **–°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê**\n\n"
            text += f"{message}\n\n"
            text += "üîÑ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ."
            
            await safe_send_message(bot, telegram_id, text)
            
    except Exception as e:
        logger.error(f"Error handling sync completed notification: {e}")


async def safe_send_message(bot: Bot, telegram_id: int, text: str, reply_markup=None):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        await bot.send_message(
            chat_id=telegram_id,
            text=text,
            parse_mode="Markdown",
            reply_markup=reply_markup
        )
        logger.info(f"Message sent successfully to telegram_id {telegram_id}")
    except Exception as e:
        logger.error(f"Error sending message to telegram_id {telegram_id}: {e}")


# –£–¥–∞–ª–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∏–º–ø–æ—Ä—Ç–∞–º–∏ - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–æ—Å—Ç–æ–π –ø–æ–¥—Ö–æ–¥


# –í—Å–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∏–º–ø–æ—Ä—Ç–∞–º–∏ —É–¥–∞–ª–µ–Ω—ã - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–æ—Å—Ç–æ–π –ø–æ–¥—Ö–æ–¥

@webhook_app.get("/health")
async def webhook_health():
    return {"status": "ok"}
