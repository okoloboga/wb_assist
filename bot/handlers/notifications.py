import sys
import logging
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –±–æ—Ç–∞
sys.path.insert(0, str(Path(__file__).parent.parent))

from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

logger = logging.getLogger(__name__)

from core.states import NotificationStates
from core.config import config
from keyboards.keyboards import wb_menu_keyboard, main_keyboard, create_notification_keyboard
from api.client import bot_api_client
from utils.formatters import format_error_message, format_stocks_summary

router = Router()


@router.callback_query(F.data == "notifications")
async def show_notifications_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    await callback.message.edit_text(
        "üîî –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø\n\n"
        "üìä –°—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:\n"
        "‚úÖ –ó–∞–∫–∞–∑—ã: –í–∫–ª—é—á–µ–Ω—ã\n"
        "‚úÖ –û—Å—Ç–∞—Ç–∫–∏: –í–∫–ª—é—á–µ–Ω—ã\n"
        "‚úÖ –û—Ç–∑—ã–≤—ã: –í–∫–ª—é—á–µ–Ω—ã\n"
        "‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: –í–∫–ª—é—á–µ–Ω—ã\n\n"
        "üîß –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Ä–∞–∑–¥–µ–ª–µ '–ù–∞—Å—Ç—Ä–æ–π–∫–∏' ‚Üí '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
                callback_data="settings_notifications"
            )],
            [InlineKeyboardButton(
                text="üîô –ù–∞–∑–∞–¥",
                callback_data="wb_menu"
            )]
        ])
    )
    await callback.answer()


@router.callback_query(F.data == "settings_notifications")
async def show_notification_settings(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (—Å —Å–µ—Ä–≤–µ—Ä–∞)"""
    await state.set_state(NotificationStates.settings_menu)

    user_id = callback.from_user.id
    response = await bot_api_client.get_notification_settings(user_id)

    if response.success and response.data:
        settings = response.data.get("data", response.data)  # APIResponse wraps data
        await callback.message.edit_text(
            "üîî –ù–ê–°–¢–†–û–ô–ö–ò –£–í–ï–î–û–ú–õ–ï–ù–ò–ô\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è:\n\n"
            "‚úÖ –í–∫–ª | ‚ùå –í—ã–∫–ª",
            reply_markup=create_notification_keyboard(settings)
        )
    else:
        await callback.message.edit_text(
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.\n\n{response.error or ''}",
            reply_markup=wb_menu_keyboard()
        )
    await callback.answer()


async def _toggle_and_refresh(callback: CallbackQuery, key: str):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è: –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–ª–∞–≥ key –∏ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∞—Ç—å –º–µ–Ω—é"""
    user_id = callback.from_user.id
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    current = await bot_api_client.get_notification_settings(user_id)
    settings = current.data.get("data", current.data) if current.success and current.data else {}
    current_value = bool(settings.get(key, False))
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    update = {key: not current_value}
    upd_resp = await bot_api_client.update_notification_settings(user_id, update)
    if not upd_resp.success:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {upd_resp.error or upd_resp.status_code}", show_alert=True)
        return
    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ
    refreshed = await bot_api_client.get_notification_settings(user_id)
    new_settings = refreshed.data.get("data", refreshed.data) if refreshed.success and refreshed.data else settings
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç/–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await callback.message.edit_text(
        "üîî –ù–ê–°–¢–†–û–ô–ö–ò –£–í–ï–î–û–ú–õ–ï–ù–ò–ô\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è:\n\n"
        "‚úÖ –í–∫–ª | ‚ùå –í—ã–∫–ª",
        reply_markup=create_notification_keyboard(new_settings)
    )
    await callback.answer()


@router.callback_query(F.data == "toggle_notif_new_orders")
async def toggle_notif_new_orders(callback: CallbackQuery):
    await _toggle_and_refresh(callback, "new_orders_enabled")


@router.callback_query(F.data == "toggle_notif_critical_stocks")
async def toggle_notif_critical_stocks(callback: CallbackQuery):
    await _toggle_and_refresh(callback, "critical_stocks_enabled")


@router.callback_query(F.data == "toggle_notif_negative_reviews")
async def toggle_notif_negative_reviews(callback: CallbackQuery):
    await _toggle_and_refresh(callback, "negative_reviews_enabled")


@router.callback_query(F.data == "toggle_notif_grouping")
async def toggle_notif_grouping(callback: CallbackQuery):
    await _toggle_and_refresh(callback, "grouping_enabled")


@router.callback_query(F.data == "test_notification")
async def test_notification(callback: CallbackQuery):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
    await callback.message.edit_text(
        "üß™ –¢–ï–°–¢–û–í–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï\n\n"
        "‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!\n\n"
        "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç.",
        reply_markup=create_notification_keyboard()
    )
    await callback.answer("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")


@router.message(Command("notifications"))
async def cmd_notifications(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ /notifications"""
    await state.set_state(NotificationStates.settings_menu)
    
    await message.answer(
        "üîî –ù–ê–°–¢–†–û–ô–ö–ò –£–í–ï–î–û–ú–õ–ï–ù–ò–ô\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å:\n\n"
        "‚úÖ –í–∫–ª—é—á–µ–Ω–æ\n"
        "‚ùå –í—ã–∫–ª—é—á–µ–Ω–æ\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è:",
        reply_markup=create_notification_keyboard()
    )


# Polling –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
async def handle_new_order_notification(message: Message, data: dict):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ"""
    order_data = data.get("data", {})
    
    order_id = order_data.get('order_id', 'N/A')
    order_date = order_data.get('date', 'N/A')
    brand = order_data.get('brand', 'N/A')
    product_name = order_data.get('product_name', 'N/A')
    nm_id = order_data.get('nm_id', 'N/A')
    supplier_article = order_data.get('supplier_article', '')
    size = order_data.get('size', '')
    barcode = order_data.get('barcode', '')
    warehouse_from = order_data.get('warehouse_from', 'N/A')
    warehouse_to = order_data.get('warehouse_to', 'N/A')
    order_amount = order_data.get('amount', 0)
    commission_percent = order_data.get('commission_percent', 0)
    commission_amount = order_data.get('commission_amount', 0)
    spp_percent = order_data.get('spp_percent', 0)
    customer_price = order_data.get('customer_price', 0)
    # –õ–æ–≥–∏—Å—Ç–∏–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
    dimensions = order_data.get('dimensions', '')
    volume_liters = order_data.get('volume_liters', 0)
    warehouse_rate_per_liter = order_data.get('warehouse_rate_per_liter', 0)
    warehouse_rate_extra = order_data.get('warehouse_rate_extra', 0)
    rating = order_data.get('rating', 0)
    reviews_count = order_data.get('reviews_count', 0)
    buyout_rates = order_data.get('buyout_rates', {})
    order_speed = order_data.get('order_speed', {})
    sales_periods = order_data.get('sales_periods', {})
    category_availability = order_data.get('category_availability', '')
    stocks = order_data.get('stocks', {})
    stock_days = order_data.get('stock_days', {})
    
    text = f"üßæ –ó–∞–∫–∞–∑ [#{order_id}] {order_date}\n\n"
    text += f"üëë {brand} ({brand})\n"
    text += f"‚úè –ù–∞–∑–≤–∞–Ω–∏–µ: {product_name}\n"
    text += f"üÜî {nm_id} / {supplier_article} / ({size})\n"
    text += f"üéπ {barcode}\n"
    text += f"üöõ {warehouse_from} ‚ü∂ {warehouse_to}\n"
    text += f"üí∞ –¶–µ–Ω–∞ –∑–∞–∫–∞–∑–∞: {order_amount:,.0f}‚ÇΩ\n"
    text += f"üí∂ –ö–æ–º–∏—Å—Å–∏—è WB: {commission_percent}% ({commission_amount:,.0f}‚ÇΩ)\n"
    text += f"üõç –°–ü–ü: {spp_percent}% (–¶–µ–Ω–∞ –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è: {customer_price:,.0f}‚ÇΩ)\n"
    # –õ–æ–≥–∏—Å—Ç–∏–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
    text += f"        –ì–∞–±–∞—Ä–∏—Ç—ã: {dimensions}. ({volume_liters}–ª.)\n"
    text += f"        –¢–∞—Ä–∏—Ñ —Å–∫–ª–∞–¥–∞: {warehouse_rate_per_liter:,.1f}‚ÇΩ –∑–∞ 1–ª. | {warehouse_rate_extra:,.1f}‚ÇΩ –∑–∞ –ª. —Å–≤—ã—à–µ)\n"
    text += f"üåü –û—Ü–µ–Ω–∫–∞: {rating}\n"
    text += f"üí¨ –û—Ç–∑—ã–≤—ã: {reviews_count}\n"
    text += f"‚öñÔ∏è –í—ã–∫—É–ø/—Å —É—á–µ—Ç–æ–º –≤–æ–∑–≤—Ä–∞—Ç–∞ (7/14/30):\n"
    text += f"        {buyout_rates.get('7_days', 0):.1f}% / {buyout_rates.get('14_days', 0):.1f}% / {buyout_rates.get('30_days', 0):.1f}%\n"
    text += f"üí† –°–∫–æ—Ä–æ—Å—Ç—å –∑–∞–∫–∞–∑–æ–≤ –∑–∞ 7/14/30 –¥–Ω–µ–π:\n"
    text += f"        {order_speed.get('7_days', 0):.2f} | {order_speed.get('14_days', 0):.1f} | {order_speed.get('30_days', 0):.1f} —à—Ç. –≤ –¥–µ–Ω—å\n"
    text += f"üìñ –ü—Ä–æ–¥–∞–∂ –∑–∞ 7 / 14 / 30 –¥–Ω–µ–π:\n"
    text += f"        {sales_periods.get('7_days', 0)} | {sales_periods.get('14_days', 0)} | {sales_periods.get('30_days', 0)} —à—Ç.\n"
    text += f"üíà –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ 90:\n"
    text += f"        {category_availability}\n"
    text += f"üì¶ –û—Å—Ç–∞—Ç–æ–∫:\n"
    for size in ["L", "M", "S", "XL"]:
        stock_count = stocks.get(size, 0)
        stock_days_count = stock_days.get(size, 0)
        text += f"        {size} ({stock_count} —à—Ç.) ‚âà –Ω–∞ {stock_days_count} –¥–Ω.\n"
    
    await message.answer(text)


async def handle_critical_stocks_notification(message: Message, data: dict):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –æ—Å—Ç–∞—Ç–∫–∞—Ö"""
    products = data.get("data", {}).get("products", [])
    
    text = "‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ù–´–ï –û–°–¢–ê–¢–ö–ò!\n\n"
    
    for product in products[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 3 —Ç–æ–≤–∞—Ä–∞
        text += f"üì¶ {product.get('name', 'N/A')} ({product.get('brand', 'N/A')})\n"
        text += f"üÜî {product.get('nm_id', 'N/A')}\n"
        text += f"üìä –û—Å—Ç–∞—Ç–∫–∏: {format_stocks_summary(product.get('stocks', {}))}\n"
        
        critical_sizes = product.get("critical_sizes", [])
        zero_sizes = product.get("zero_sizes", [])
        
        if critical_sizes:
            text += f"‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–Ω–æ: {', '.join(critical_sizes)}\n"
        if zero_sizes:
            text += f"üî¥ –ù—É–ª–µ–≤—ã–µ: {', '.join(zero_sizes)}\n"
        
        text += "\n"
    
    if len(products) > 3:
        text += f"... –∏ –µ—â–µ {len(products) - 3} —Ç–æ–≤–∞—Ä–æ–≤\n\n"
    
    text += "üí° –ù–∞–∂–º–∏—Ç–µ /stocks –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"
    
    await message.answer(text)


async def handle_new_review_notification(message: Message, data: dict):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –æ—Ç–∑—ã–≤–µ"""
    review_data = data.get("data", {})
    
    text = "‚≠ê –ù–û–í–´–ô –û–¢–ó–´–í!\n\n"
    text += f"üì¶ {review_data.get('product_name', 'N/A')}\n"
    text += f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {review_data.get('rating', 0)}/5\n"
    text += f"üí¨ \"{review_data.get('text', 'N/A')[:100]}{'...' if len(review_data.get('text', '')) > 100 else ''}\"\n"
    text += f"‚è∞ {review_data.get('time_ago', 'N/A')}\n\n"
    text += "üí° –ù–∞–∂–º–∏—Ç–µ /reviews –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –æ—Ç–∑—ã–≤–æ–≤"
    
    await message.answer(text)


async def handle_error_notification(message: Message, data: dict):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
    error_data = data.get("data", {})
    error_type = error_data.get("type", "unknown")
    error_message = error_data.get("message", "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    
    text = f"‚ö†Ô∏è **–û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã**\n\n"
    text += f"–¢–∏–ø: {error_type}\n"
    text += f"–û–ø–∏—Å–∞–Ω–∏–µ: {error_message}\n\n"
    text += "üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"
    
    await message.answer(text)

async def handle_sync_completed_notification(message: Message, data: dict):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
    sync_data = data.get("data", {})
    
    text = "‚úÖ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê\n\n"
    text += f"‚è±Ô∏è –í—Ä–µ–º—è: {sync_data.get('duration_seconds', 0)} —Å–µ–∫\n"
    text += f"üìä –û–±–Ω–æ–≤–ª–µ–Ω–æ: {sync_data.get('updates_count', 0)} –∑–∞–ø–∏—Å–µ–π\n"
    
    if sync_data.get("errors_count", 0) > 0:
        text += f"‚ö†Ô∏è –û—à–∏–±–æ–∫: {sync_data.get('errors_count', 0)}\n"
    
    text += "\nüí° –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∏ –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"
    
    await message.answer(text)


async def handle_cabinet_removal_notification(telegram_id: int, data: dict):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–±–∏–Ω–µ—Ç–∞"""
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–æ—Ç–∞ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–æ–¥—É–ª—è
        import sys
        from pathlib import Path
        sys.path.insert(0, str(Path(__file__).parent.parent))
        
        from core.config import config
        from aiogram import Bot
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        bot = Bot(token=config.bot_token)
        
        from keyboards.keyboards import create_cabinet_removal_keyboard
        from utils.formatters import format_datetime
        
        cabinet_id = data.get('cabinet_id', 'N/A')
        cabinet_name = data.get('cabinet_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç')
        removal_reason = data.get('removal_reason', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞')
        removal_timestamp = data.get('removal_timestamp', '')
        validation_error = data.get('validation_error', {})
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è —É–¥–∞–ª–µ–Ω–∏—è
        if removal_timestamp:
            try:
                from datetime import datetime
                dt = datetime.fromisoformat(removal_timestamp.replace('Z', '+00:00'))
                formatted_time = dt.strftime('%d.%m.%Y %H:%M')
            except:
                formatted_time = removal_timestamp
        else:
            formatted_time = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        text = "üö® –ö–ê–ë–ò–ù–ï–¢ –£–î–ê–õ–ï–ù\n\n"
        text += f"–ö–∞–±–∏–Ω–µ—Ç \"{cabinet_name}\" –±—ã–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω –∏–∑-–∑–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–≥–æ API –∫–ª—é—á–∞.\n\n"
        text += f"**–ü—Ä–∏—á–∏–Ω–∞:** {removal_reason}\n"
        text += f"**–í—Ä–µ–º—è —É–¥–∞–ª–µ–Ω–∏—è:** {formatted_time}\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
        if validation_error and validation_error.get('message'):
            text += f"**–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:** {validation_error['message']}\n\n"
        
        text += "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –Ω–æ–≤—ã–π –∫–∞–±–∏–Ω–µ—Ç —Å –¥–µ–π—Å—Ç–≤—É—é—â–∏–º API –∫–ª—é—á–æ–º."
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = create_cabinet_removal_keyboard()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.send_message(
            chat_id=telegram_id,
            text=text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        
        logger.info(f"‚úÖ Cabinet removal notification sent to user {telegram_id}")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞
        await bot.session.close()
        
    except Exception as e:
        logger.error(f"Error sending cabinet removal notification to user {telegram_id}: {e}")
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        try:
            await bot.session.close()
        except:
            pass
        raise