import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –±–æ—Ç–∞
sys.path.insert(0, str(Path(__file__).parent.parent))

from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from core.states import NotificationStates
from core.config import config
from keyboards.keyboards import wb_menu_keyboard, main_keyboard, create_notification_keyboard
from utils.formatters import format_error_message, format_stocks_summary

router = Router()


@router.callback_query(F.data == "notifications")
async def show_notifications_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    await callback.message.edit_text(
        "üîî –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø\n\n"
        "üìä –°—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:\n"
        "‚úÖ –ó–∞–∫–∞–∑—ã: –í–∫–ª—é—á–µ–Ω—ã\n"
        "‚úÖ –û—Å—Ç–∞—Ç–∫–∏: –í–∫–ª—é—á–µ–Ω—ã\n"
        "‚úÖ –û—Ç–∑—ã–≤—ã: –í–∫–ª—é—á–µ–Ω—ã\n"
        "‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: –í–∫–ª—é—á–µ–Ω—ã\n\n"
        "üîß –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Ä–∞–∑–¥–µ–ª–µ '–ù–∞—Å—Ç—Ä–æ–π–∫–∏' ‚Üí '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
                callback_data="settings_notifications"
            )],
            [InlineKeyboardButton(
                text="üîô –ù–∞–∑–∞–¥",
                callback_data="wb_menu"
            )]
        ])
    )
    await callback.answer()


@router.callback_query(F.data == "settings_notifications")
async def show_notification_settings(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    await state.set_state(NotificationStates.settings_menu)
    
    await callback.message.edit_text(
        "üîî –ù–ê–°–¢–†–û–ô–ö–ò –£–í–ï–î–û–ú–õ–ï–ù–ò–ô\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å:\n\n"
        "‚úÖ –í–∫–ª—é—á–µ–Ω–æ\n"
        "‚ùå –í—ã–∫–ª—é—á–µ–Ω–æ\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è:",
        reply_markup=create_notification_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data == "toggle_orders_notifications")
async def toggle_orders_notifications(callback: CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–∞—Ö"""
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ API
    await callback.answer(
        "‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏",
        show_alert=True
    )


@router.callback_query(F.data == "toggle_stocks_notifications")
async def toggle_stocks_notifications(callback: CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö"""
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ API
    await callback.answer(
        "‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏",
        show_alert=True
    )


@router.callback_query(F.data == "toggle_reviews_notifications")
async def toggle_reviews_notifications(callback: CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–∑—ã–≤–∞—Ö"""
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ API
    await callback.answer(
        "‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏",
        show_alert=True
    )


@router.callback_query(F.data == "toggle_sync_notifications")
async def toggle_sync_notifications(callback: CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ API
    await callback.answer(
        "‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏",
        show_alert=True
    )


@router.callback_query(F.data == "test_notification")
async def test_notification(callback: CallbackQuery):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
    await callback.message.edit_text(
        "üß™ –¢–ï–°–¢–û–í–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï\n\n"
        "‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!\n\n"
        "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç.",
        reply_markup=create_notification_keyboard()
    )
    await callback.answer("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")


@router.message(Command("notifications"))
async def cmd_notifications(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ /notifications"""
    await state.set_state(NotificationStates.settings_menu)
    
    await message.answer(
        "üîî –ù–ê–°–¢–†–û–ô–ö–ò –£–í–ï–î–û–ú–õ–ï–ù–ò–ô\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å:\n\n"
        "‚úÖ –í–∫–ª—é—á–µ–Ω–æ\n"
        "‚ùå –í—ã–∫–ª—é—á–µ–Ω–æ\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è:",
        reply_markup=create_notification_keyboard()
    )


# Webhook –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
@router.message()
async def handle_webhook_notification(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç webhook"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
    if hasattr(message, 'web_app_data') and message.web_app_data:
        try:
            import json
            data = json.loads(message.web_app_data.data)
            
            if data.get("type") == "new_order":
                await handle_new_order_notification(message, data)
            elif data.get("type") == "critical_stocks":
                await handle_critical_stocks_notification(message, data)
            elif data.get("type") == "new_review":
                await handle_new_review_notification(message, data)
            elif data.get("type") == "sync_completed":
                await handle_sync_completed_notification(message, data)
                
        except (json.JSONDecodeError, KeyError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")


async def handle_new_order_notification(message: Message, data: dict):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ"""
    order_data = data.get("data", {})
    
    text = f"üéâ –ù–û–í–´–ô –ó–ê–ö–ê–ó!\n\n"
    text += f"üßæ #{order_data.get('order_id', 'N/A')} | {order_data.get('amount', 0):,}‚ÇΩ\n"
    text += f"üëë {order_data.get('brand', 'N/A')}\n"
    text += f"‚úè {order_data.get('product_name', 'N/A')}\n"
    text += f"üöõ {order_data.get('warehouse_from', 'N/A')} ‚Üí {order_data.get('warehouse_to', 'N/A')}\n\n"
    
    today_stats = order_data.get("today_stats", {})
    if today_stats:
        text += f"üìä –°–µ–≥–æ–¥–Ω—è: {today_stats.get('count', 0)} –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ {today_stats.get('amount', 0):,}‚ÇΩ\n"
    
    stocks = order_data.get("stocks", {})
    if stocks:
        text += f"üì¶ –û—Å—Ç–∞—Ç–æ–∫: {format_stocks_summary(stocks)}\n"
    
    text += f"\nüí° –ù–∞–∂–º–∏—Ç–µ /order_{order_data.get('order_id', 'N/A')} –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"
    
    await message.answer(text)


async def handle_critical_stocks_notification(message: Message, data: dict):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –æ—Å—Ç–∞—Ç–∫–∞—Ö"""
    products = data.get("data", {}).get("products", [])
    
    text = "‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ù–´–ï –û–°–¢–ê–¢–ö–ò!\n\n"
    
    for product in products[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 3 —Ç–æ–≤–∞—Ä–∞
        text += f"üì¶ {product.get('name', 'N/A')} ({product.get('brand', 'N/A')})\n"
        text += f"üÜî {product.get('nm_id', 'N/A')}\n"
        text += f"üìä –û—Å—Ç–∞—Ç–∫–∏: {format_stocks_summary(product.get('stocks', {}))}\n"
        
        critical_sizes = product.get("critical_sizes", [])
        zero_sizes = product.get("zero_sizes", [])
        
        if critical_sizes:
            text += f"‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–Ω–æ: {', '.join(critical_sizes)}\n"
        if zero_sizes:
            text += f"üî¥ –ù—É–ª–µ–≤—ã–µ: {', '.join(zero_sizes)}\n"
        
        text += "\n"
    
    if len(products) > 3:
        text += f"... –∏ –µ—â–µ {len(products) - 3} —Ç–æ–≤–∞—Ä–æ–≤\n\n"
    
    text += "üí° –ù–∞–∂–º–∏—Ç–µ /stocks –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"
    
    await message.answer(text)


async def handle_new_review_notification(message: Message, data: dict):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –æ—Ç–∑—ã–≤–µ"""
    review_data = data.get("data", {})
    
    text = "‚≠ê –ù–û–í–´–ô –û–¢–ó–´–í!\n\n"
    text += f"üì¶ {review_data.get('product_name', 'N/A')}\n"
    text += f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {review_data.get('rating', 0)}/5\n"
    text += f"üí¨ \"{review_data.get('text', 'N/A')[:100]}{'...' if len(review_data.get('text', '')) > 100 else ''}\"\n"
    text += f"‚è∞ {review_data.get('time_ago', 'N/A')}\n\n"
    text += "üí° –ù–∞–∂–º–∏—Ç–µ /reviews –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –æ—Ç–∑—ã–≤–æ–≤"
    
    await message.answer(text)


async def handle_sync_completed_notification(message: Message, data: dict):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
    sync_data = data.get("data", {})
    
    text = "‚úÖ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê\n\n"
    text += f"‚è±Ô∏è –í—Ä–µ–º—è: {sync_data.get('duration_seconds', 0)} —Å–µ–∫\n"
    text += f"üìä –û–±–Ω–æ–≤–ª–µ–Ω–æ: {sync_data.get('updates_count', 0)} –∑–∞–ø–∏—Å–µ–π\n"
    
    if sync_data.get("errors_count", 0) > 0:
        text += f"‚ö†Ô∏è –û—à–∏–±–æ–∫: {sync_data.get('errors_count', 0)}\n"
    
    text += "\nüí° –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∏ –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"
    
    await message.answer(text)