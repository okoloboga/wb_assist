import sys
from pathlib import Path
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –±–æ—Ç–∞
sys.path.insert(0, str(Path(__file__).parent.parent))

from api.client import bot_api_client
from core.states import WBConnectionStates, WBCabinetStates
from keyboards.keyboards import wb_menu_keyboard, main_keyboard
from utils.formatters import format_error_message

router = Router()


@router.callback_query(F.data == "settings_api_key")
async def start_wb_connection(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WB –∫–∞–±–∏–Ω–µ—Ç–∞"""
    await state.set_state(WBConnectionStates.waiting_for_api_key)
    
    await callback.message.edit_text(
        "üîë –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï WB –ö–ê–ë–ò–ù–ï–¢–ê\n\n"
        "–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–∞–±–∏–Ω–µ—Ç–∞ Wildberries –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à API –∫–ª—é—á.\n\n"
        "üìã –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å API –∫–ª—é—á:\n"
        "1. –í–æ–π–¥–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç WB\n"
        "2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª '–ù–∞—Å—Ç—Ä–æ–π–∫–∏' ‚Üí '–î–æ—Å—Ç—É–ø –∫ API'\n"
        "3. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –∫–ª—é—á –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π\n"
        "4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–ª—é—á –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ —Å—é–¥–∞\n\n"
        "‚ö†Ô∏è –ö–ª—é—á –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ\n"
        "‚ùå –î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel",
        reply_markup=None
    )
    await callback.answer()


@router.message(WBCabinetStates.waiting_for_api_key)
async def process_initial_api_key(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã–π API –∫–ª—é—á –ø—Ä–∏ –ø–µ—Ä–≤–∏—á–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    api_key = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç–º–µ–Ω—É
    if api_key.lower() in ['/cancel', '–æ—Ç–º–µ–Ω–∞', 'cancel']:
        await state.clear()
        await message.answer(
            "‚ùå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ë–µ–∑ API –∫–ª—é—á–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.",
            reply_markup=main_keyboard()
        )
        return
    
    # –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–ª—é—á–∞
    if len(api_key) < 10:
        await message.answer(
            "‚ùå API –∫–ª—é—á —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã:"
        )
        return
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    await state.set_state(WBCabinetStates.validating_key)
    await message.answer("‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é API –∫–ª—é—á...")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    response = await bot_api_client.connect_wb_cabinet(
        user_id=message.from_user.id,
        api_key=api_key
    )
    
    if response.success:
        await state.clear()
        
        # –û—á–∏—â–∞–µ–º –∫—ç—à middleware –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            from __main__ import api_key_middleware
            api_key_middleware.clear_user_cache(message.from_user.id)
        except ImportError:
            # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            pass
        
        await message.answer(
            response.telegram_text or "‚úÖ –ö–∞–±–∏–Ω–µ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.",
            reply_markup=wb_menu_keyboard()
        )
    else:
        await state.set_state(WBCabinetStates.connection_error)
        error_message = format_error_message(response.error, response.status_code)
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–∞–±–∏–Ω–µ—Ç–∞:\n\n{error_message}\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã:",
            reply_markup=None
        )
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ–∂–∏–¥–∞–Ω–∏—é –∫–ª—é—á–∞
        await state.set_state(WBCabinetStates.waiting_for_api_key)


@router.message(WBConnectionStates.waiting_for_api_key)
async def process_api_key(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã–π API –∫–ª—é—á"""
    api_key = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç–º–µ–Ω—É
    if api_key.lower() in ['/cancel', '–æ—Ç–º–µ–Ω–∞', 'cancel']:
        await state.clear()
        await message.answer(
            "‚ùå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=main_keyboard()
        )
        return
    
    # –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–ª—é—á–∞
    if len(api_key) < 10:
        await message.answer(
            "‚ùå API –∫–ª—é—á —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã:"
        )
        return
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    await state.set_state(WBConnectionStates.validating_key)
    await message.answer("‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é API –∫–ª—é—á...")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    response = await bot_api_client.connect_wb_cabinet(
        user_id=message.from_user.id,
        api_key=api_key
    )
    
    if response.success:
        await state.set_state(WBConnectionStates.connection_success)
        await message.answer(
            response.telegram_text or "‚úÖ –ö–∞–±–∏–Ω–µ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω!",
            reply_markup=wb_menu_keyboard()
        )
        await state.clear()
    else:
        await state.set_state(WBConnectionStates.connection_error)
        error_message = format_error_message(response.error, response.status_code)
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–∞–±–∏–Ω–µ—Ç–∞:\n\n{error_message}\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã:",
            reply_markup=None
        )
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ–∂–∏–¥–∞–Ω–∏—é –∫–ª—é—á–∞
        await state.set_state(WBConnectionStates.waiting_for_api_key)


@router.message(WBCabinetStates.connection_error)
async def handle_initial_connection_error(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—à–∏–±–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ –ø–µ—Ä–≤–∏—á–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    await state.set_state(WBCabinetStates.waiting_for_api_key)
    await process_initial_api_key(message, state)


@router.message(WBConnectionStates.connection_error)
async def handle_connection_error(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—à–∏–±–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è - –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤–≤–æ–¥—É –∫–ª—é—á–∞"""
    await state.set_state(WBConnectionStates.waiting_for_api_key)
    await process_api_key(message, state)


@router.callback_query(F.data == "check_cabinet_status")
async def check_cabinet_status(callback: CallbackQuery):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–∞–±–∏–Ω–µ—Ç–æ–≤"""
    response = await bot_api_client.get_cabinet_status(
        user_id=callback.from_user.id
    )
    
    if response.success:
        await callback.message.edit_text(
            response.telegram_text or "üìä –°—Ç–∞—Ç—É—Å –∫–∞–±–∏–Ω–µ—Ç–æ–≤ –ø–æ–ª—É—á–µ–Ω",
            reply_markup=wb_menu_keyboard()
        )
    else:
        error_message = format_error_message(response.error, response.status_code)
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:\n\n{error_message}",
            reply_markup=main_keyboard()
        )
    
    await callback.answer()


@router.callback_query(F.data == "disconnect_cabinet")
async def disconnect_cabinet(callback: CallbackQuery):
    """–û—Ç–∫–ª—é—á–∏—Ç—å –∫–∞–±–∏–Ω–µ—Ç WB"""
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–±–∏–Ω–µ—Ç–∞ —á–µ—Ä–µ–∑ API
    await callback.message.edit_text(
        "üîå –û–¢–ö–õ–Æ–ß–ï–ù–ò–ï –ö–ê–ë–ò–ù–ï–¢–ê\n\n"
        "‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–∞–±–∏–Ω–µ—Ç–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏.\n\n"
        "–î–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
        reply_markup=wb_menu_keyboard()
    )
    await callback.answer()


@router.message(Command("cancel"))
async def cancel_operation(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é"""
    current_state = await state.get_state()
    
    if current_state:
        await state.clear()
        await message.answer(
            "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
            reply_markup=main_keyboard()
        )
    else:
        await message.answer(
            "‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã",
            reply_markup=main_keyboard()
        )