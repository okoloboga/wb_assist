import sys
import logging
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –±–æ—Ç–∞
sys.path.insert(0, str(Path(__file__).parent.parent))

from aiogram import Router, F
from aiogram.types import CallbackQuery, User, InlineKeyboardMarkup, InlineKeyboardButton, Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from utils.formatters import safe_edit_message, safe_send_message, handle_telegram_errors

logger = logging.getLogger(__name__)

from keyboards.keyboards import (
    main_keyboard,
    wb_menu_keyboard,
    analytics_keyboard,
    stock_keyboard,
    reviews_keyboard,
    prices_keyboard,
    content_keyboard,
    ai_assistant_keyboard,
    settings_keyboard
)

router = Router()

# –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ "–Ω–∞–∑–∞–¥"
navigation = {
    "orders": "wb_menu",
    "analytics": "wb_menu",
    "stock": "wb_menu",
    "reviews": "wb_menu",
    "prices": "wb_menu",
    "notifications": "wb_menu",
    "content": "wb_menu",
    "ai_assistant": "wb_menu",
    "settings": "wb_menu",
    "wb_menu": "main"
}

keyboards_map = {
    "main": main_keyboard,
    "wb_menu": wb_menu_keyboard,
    "prices": prices_keyboard,
    "content": content_keyboard,
    "ai_assistant": ai_assistant_keyboard,
    "settings": settings_keyboard
}

section_titles = {
    "main": "–Ø ‚Äî –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞–±–∏–Ω–µ—Ç–æ–º WildBerries.\n\n–ü–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–∞–±–∏–Ω–µ—Ç, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",
    "wb_menu": "‚úÖ –ö–∞–±–∏–Ω–µ—Ç '{user_name}'\n–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: 5 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥\n\n–í—ã–±–µ—Ä–∏—Ç–µ, —Å —á–µ–º —Ö–æ—Ç–∏—Ç–µ –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å:",
    "orders": "üõí –ó–∞–∫–∞–∑—ã\n\n–ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–∫–∞–∑–æ–≤ –∏ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤.\n\n–ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ...",
    "analytics": "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞\n\n–ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n- –í—ã—Ä—É—á–∫–∞: 123 456 ‚ÇΩ (+15%)\n- –ó–∞–∫–∞–∑—ã: 89 —à—Ç. (-5%)\n- –ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –∑–∞–∫–∞–∑: 4.2%\n\n–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –ø–æ–¥—Ä–æ–±–Ω–µ–µ?",
    "stock": "üì¶ –°–∫–ª–∞–¥\n\n–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ—Å—Ç–∞—Ç–∫–æ–≤: 1 234 567 ‚ÇΩ\n–¢–æ–≤–∞—Ä–æ–≤ –Ω–∞ –∏—Å—Ö–æ–¥–µ (–º–µ–Ω–µ–µ 7 –¥–Ω–µ–π): 5 —à—Ç.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
    "reviews": "‚≠ê –û—Ç–∑—ã–≤—ã\n\n–£ –≤–∞—Å 12 –Ω–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤.\n–¢—Ä–µ–±—É—é—Ç –æ—Ç–≤–µ—Ç–∞: 3 –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö (1-3‚≠ê)\n\n–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?",
    "prices": "üí∞ –¶–µ–Ω—ã –∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã\n\n–í—ã–≥–æ–¥–Ω–µ–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤: 45 –ø–æ–∑–∏—Ü–∏–π\n–î–æ—Ä–æ–∂–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤: 12 –ø–æ–∑–∏—Ü–∏–π\n\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å:",
    "notifications": "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n\nReal-time —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–∞—Ö, –æ—Å—Ç–∞—Ç–∫–∞—Ö –∏ –æ—Ç–∑—ã–≤–∞—Ö.\n\n–ó–∞–≥—Ä—É–∂–∞—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...",
    "content": "üé® –ö–æ–Ω—Ç–µ–Ω—Ç-—Å—Ç—É–¥–∏—è\n\n–ó–¥–µ—Å—å –º—ã –º–æ–∂–µ–º —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–¥–∞—é—â–∏–µ —Ç–µ–∫—Å—Ç—ã –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –≤–∞—à–∏—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ —Ç–æ–≤–∞—Ä–æ–≤. –ù–∞—á–Ω–µ–º —Ç–≤–æ—Ä–∏—Ç—å?",
    "ai_assistant": "ü§ñ AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç\n\n–Ø –≥–æ—Ç–æ–≤ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ, –Ω–∞–π—Ç–∏ —Ç–æ—á–∫–∏ —Ä–æ—Å—Ç–∞ –∏–ª–∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –æ –≤–∞—à–µ–º –±–∏–∑–Ω–µ—Å–µ. –ü—Ä–æ—Å—Ç–æ —Å–ø—Ä–æ—Å–∏—Ç–µ. –ù–∞–ø—Ä–∏–º–µ—Ä: '–ö–∞–∫–∏–µ 5 —Ç–æ–≤–∞—Ä–æ–≤ –ø—Ä–∏–Ω–µ—Å–ª–∏ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –ø—Ä–∏–±—ã–ª–∏ –∑–∞ –º–µ—Å—è—Ü?'",
    "settings": "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n\n–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º–∏, –¥–æ—Å—Ç—É–ø–∞–º–∏ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏."
}


async def get_section_text(menu_name: str, user: User) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ –º–µ–Ω—é, —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É—è –µ–≥–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.
    """
    text_template = section_titles.get(menu_name, "")

    if 'user_name' in text_template:
        user_name = f"{user.first_name} {user.last_name or ''}".strip()
        return text_template.format(user_name=user_name)
    
    return text_template


@router.callback_query(F.data == "connect_wb")
async def connect_wb_callback(callback: CallbackQuery):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç
    from api.client import bot_api_client
    
    response = await bot_api_client.get_cabinet_status(
        user_id=callback.from_user.id
    )
    
    if response.success and response.data:
        # –ö–∞–±–∏–Ω–µ—Ç —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞—à–±–æ—Ä–¥ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
        dashboard_response = await bot_api_client.get_dashboard(
            user_id=callback.from_user.id
        )
        
        if dashboard_response.success:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–∞—à–±–æ—Ä–¥–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –º–µ–Ω—é
            await safe_edit_message(
                callback=callback,
                text=dashboard_response.telegram_text or "üìä –î–∞—à–±–æ—Ä–¥ –∑–∞–≥—Ä—É–∂–µ–Ω",
                reply_markup=wb_menu_keyboard(),
                user_id=callback.from_user.id
            )
        else:
            # –ï—Å–ª–∏ –¥–∞—à–±–æ—Ä–¥ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω–æ–µ –º–µ–Ω—é
            text = await get_section_text("wb_menu", callback.from_user)
            await safe_edit_message(
                callback=callback,
                text=text,
                reply_markup=wb_menu_keyboard(),
                user_id=callback.from_user.id
            )
    else:
        # –ö–∞–±–∏–Ω–µ—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        await callback.message.edit_text(
            "üîë –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï WB –ö–ê–ë–ò–ù–ï–¢–ê\n\n"
            "–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∫–∞–±–∏–Ω–µ—Ç Wildberries.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="üîë –ü–æ–¥–∫–ª—é—á–∏—Ç—å –∫–∞–±–∏–Ω–µ—Ç",
                    callback_data="settings_api_key"
                )],
                [InlineKeyboardButton(
                    text="‚ÑπÔ∏è –ü–æ–º–æ—â—å",
                    callback_data="help"
                )]
            ])
        )
    
    await callback.answer()


@router.callback_query(F.data == "help")
async def help_callback(callback: CallbackQuery):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç
    from api.client import bot_api_client
    
    response = await bot_api_client.get_cabinet_status(
        user_id=callback.from_user.id
    )
    
    if response.success and response.data:
        # –ö–∞–±–∏–Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞—à–±–æ—Ä–¥
        dashboard_response = await bot_api_client.get_dashboard(
            user_id=callback.from_user.id
        )
        
        if dashboard_response.success:
            await safe_edit_message(
                callback=callback,
                text=dashboard_response.telegram_text or "üìä –î–∞—à–±–æ—Ä–¥ –∑–∞–≥—Ä—É–∂–µ–Ω",
                reply_markup=wb_menu_keyboard(),
                user_id=callback.from_user.id
            )
        else:
            await safe_edit_message(
                callback=callback,
                text="‚úÖ –ö–∞–±–∏–Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=wb_menu_keyboard(),
                user_id=callback.from_user.id
            )
    else:
        # –ö–∞–±–∏–Ω–µ—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        text = (
            "üîë –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï WB –ö–ê–ë–ò–ù–ï–¢–ê\n\n"
            "–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∫–∞–±–∏–Ω–µ—Ç Wildberries.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        await safe_edit_message(
            callback=callback,
            text=text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="üîë –ü–æ–¥–∫–ª—é—á–∏—Ç—å –∫–∞–±–∏–Ω–µ—Ç",
                    callback_data="settings_api_key"
                )],
                [InlineKeyboardButton(
                    text="‚ÑπÔ∏è –ü–æ–º–æ—â—å",
                    callback_data="help"
                )]
            ]),
            user_id=callback.from_user.id
        )
    
    await callback.answer()


@router.callback_query(F.data == "main_menu")
async def main_menu_callback(callback: CallbackQuery):
    """–ü—Ä—è–º–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é' - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∞—à–±–æ—Ä–¥"""
    logger.info(f"üîç DEBUG: –û–±—Ä–∞–±–æ—Ç–∫–∞ main_menu –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
    
    from api.client import bot_api_client
    
    dashboard_response = await bot_api_client.get_dashboard(
        user_id=callback.from_user.id
    )
    
    if dashboard_response.success:
        await safe_edit_message(
            callback=callback,
            text=dashboard_response.telegram_text or "üìä –î–∞—à–±–æ—Ä–¥ –∑–∞–≥—Ä—É–∂–µ–Ω",
            reply_markup=wb_menu_keyboard(),
            user_id=callback.from_user.id
        )
    else:
        await safe_edit_message(
            callback=callback,
            text="‚úÖ –ö–∞–±–∏–Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=wb_menu_keyboard(),
            user_id=callback.from_user.id
        )
    
    await callback.answer()


@router.callback_query(F.data == "wb_menu")
async def wb_menu_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é' - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∞—à–±–æ—Ä–¥"""
    logger.info(f"üîç DEBUG: –û–±—Ä–∞–±–æ—Ç–∫–∞ wb_menu –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
    
    from api.client import bot_api_client
    
    dashboard_response = await bot_api_client.get_dashboard(
        user_id=callback.from_user.id
    )
    
    if dashboard_response.success:
        await safe_edit_message(
            callback=callback,
            text=dashboard_response.telegram_text or "üìä –î–∞—à–±–æ—Ä–¥ –∑–∞–≥—Ä—É–∂–µ–Ω",
            reply_markup=wb_menu_keyboard(),
            user_id=callback.from_user.id
        )
    else:
        await safe_edit_message(
            callback=callback,
            text="‚úÖ –ö–∞–±–∏–Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=wb_menu_keyboard(),
            user_id=callback.from_user.id
        )
    
    await callback.answer()


@router.callback_query(F.data == "export_sheets")
@handle_telegram_errors
async def handle_export_sheets_button(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Google Sheets"""
    user_id = callback.from_user.id
    logger.info(f"üîç DEBUG: –ü–æ–ª—É—á–µ–Ω callback –¥–ª—è export_sheets –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    await export_to_sheets_from_callback(callback.message, user_id, state)
    await callback.answer()


@router.callback_query(F.data.in_(["prices", "content", "ai_assistant", "settings"]))
async def menu_callback(callback: CallbackQuery):
    data = callback.data

    if data in keyboards_map:
        text = await get_section_text(data, callback.from_user)
        await safe_edit_message(
            callback=callback,
            text=text,
            reply_markup=keyboards_map[data](),
            user_id=callback.from_user.id
        )
        await callback.answer()
        
    elif data.startswith("back_"):
        target_menu = navigation.get(data.replace("back_", ""), "main")
        logger.info(f"üîç DEBUG: –û–±—Ä–∞–±–æ—Ç–∫–∞ back_ –¥–ª—è {data}, target_menu: {target_menu}")
        
        if data == "back_wb_menu" or target_menu == "wb_menu":
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞—à–±–æ—Ä–¥
            from api.client import bot_api_client
            
            dashboard_response = await bot_api_client.get_dashboard(
                user_id=callback.from_user.id
            )
            
            if dashboard_response.success:
                await safe_edit_message(
                    callback=callback,
                    text=dashboard_response.telegram_text or "üìä –î–∞—à–±–æ—Ä–¥ –∑–∞–≥—Ä—É–∂–µ–Ω",
                    reply_markup=wb_menu_keyboard(),
                    user_id=callback.from_user.id
                )
            else:
                text = await get_section_text(target_menu, callback.from_user)
                await safe_edit_message(
                    callback=callback,
                    text=text,
                    reply_markup=keyboards_map[target_menu](),
                    user_id=callback.from_user.id
                )
        else:
            text = await get_section_text(target_menu, callback.from_user)
            await safe_edit_message(
                callback=callback,
                text=text,
                reply_markup=keyboards_map[target_menu](),
                user_id=callback.from_user.id
            )
        await callback.answer()


# –ö–æ–º–∞–Ω–¥–∞ /webhook –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ handlers/webhook.py


async def export_to_sheets_from_callback(message: Message, user_id: int, state: FSMContext):
    """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ Google Sheets –∏–∑ callback"""
    logger.info(f"üîç DEBUG: –ó–∞–ø—É—Å–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (–∏–∑ callback)")
    
    try:
        from api.client import bot_api_client
        
        logger.info(f"üîç DEBUG: –í—ã–∑—ã–≤–∞–µ–º get_dashboard —Å user_id={user_id}")
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–±–∏–Ω–µ—Ç–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        dashboard_response = await bot_api_client.get_dashboard(user_id=user_id)
        logger.info(f"üîç DEBUG: get_dashboard –≤–µ—Ä–Ω—É–ª success={dashboard_response.success}")
        logger.info(f"üîç DEBUG: dashboard_response.data = {dashboard_response.data}")
        
        if not dashboard_response.success or not dashboard_response.data or not dashboard_response.data.get('dashboard'):
            await safe_send_message(
                message=message,
                text="‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–±–∏–Ω–µ—Ç–æ–≤ WB. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–∞–±–∏–Ω–µ—Ç —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /start",
                user_id=user_id
            )
            return
        
        # –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∫–∞–±–∏–Ω–µ—Ç - —Å–æ–∑–¥–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç
        # –ü–æ–ª—É—á–∞–µ–º ID –∫–∞–±–∏–Ω–µ—Ç–∞ –∏–∑ API
        cabinet_status_response = await bot_api_client.get_cabinet_status(user_id=user_id)
        if not cabinet_status_response.success:
            await safe_send_message(
                message=message,
                text="‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID –∫–∞–±–∏–Ω–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                user_id=user_id
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–±–∏–Ω–µ—Ç–µ –∏–∑ dashboard
        dashboard_data = dashboard_response.data.get('dashboard', {})
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ–≤–æ–π ID –∫–∞–±–∏–Ω–µ—Ç–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏ "cabinet_1" -> 1
        cabinet_id_str = cabinet_status_response.data.get('cabinets', [{}])[0].get('id', 'cabinet_1')
        cabinet_id = int(cabinet_id_str.replace('cabinet_', '')) if cabinet_id_str.startswith('cabinet_') else 1
        
        cabinet = type('Cabinet', (), {
            'id': cabinet_id,  # –ß–∏—Å–ª–æ–≤–æ–π ID –∏–∑ API
            'name': dashboard_data.get('cabinet_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç')
        })()
        
        await create_export_for_cabinet(message, cabinet, user_id, state)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ export_to_sheets_from_callback: {e}")
        await safe_send_message(
            message=message,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            user_id=user_id
        )


@router.message(Command("export_sheets"))
@handle_telegram_errors
async def export_to_sheets(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Google Sheets"""
    user_id = message.from_user.id
    logger.info(f"üîç DEBUG: –ó–∞–ø—É—Å–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    try:
        from api.client import bot_api_client
        
        logger.info(f"üîç DEBUG: –í—ã–∑—ã–≤–∞–µ–º get_dashboard —Å user_id={user_id}")
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–±–∏–Ω–µ—Ç–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        dashboard_response = await bot_api_client.get_dashboard(user_id=user_id)
        logger.info(f"üîç DEBUG: get_dashboard –≤–µ—Ä–Ω—É–ª success={dashboard_response.success}")
        logger.info(f"üîç DEBUG: dashboard_response.data = {dashboard_response.data}")
        
        if not dashboard_response.success or not dashboard_response.data or not dashboard_response.data.get('dashboard'):
            await safe_send_message(
                message=message,
                text="‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–±–∏–Ω–µ—Ç–æ–≤ WB. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–∞–±–∏–Ω–µ—Ç —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /start",
                user_id=user_id
            )
            return
        
        # –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∫–∞–±–∏–Ω–µ—Ç - —Å–æ–∑–¥–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç
        # –ü–æ–ª—É—á–∞–µ–º ID –∫–∞–±–∏–Ω–µ—Ç–∞ –∏–∑ API
        cabinet_status_response = await bot_api_client.get_cabinet_status(user_id=user_id)
        if not cabinet_status_response.success:
            await safe_send_message(
                message=message,
                text="‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID –∫–∞–±–∏–Ω–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                user_id=user_id
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–±–∏–Ω–µ—Ç–µ –∏–∑ dashboard
        dashboard_data = dashboard_response.data.get('dashboard', {})
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ–≤–æ–π ID –∫–∞–±–∏–Ω–µ—Ç–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏ "cabinet_1" -> 1
        cabinet_id_str = cabinet_status_response.data.get('cabinets', [{}])[0].get('id', 'cabinet_1')
        cabinet_id = int(cabinet_id_str.replace('cabinet_', '')) if cabinet_id_str.startswith('cabinet_') else 1
        
        cabinet = type('Cabinet', (), {
            'id': cabinet_id,  # –ß–∏—Å–ª–æ–≤–æ–π ID –∏–∑ API
            'name': dashboard_data.get('cabinet_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç')
        })()
        
        await create_export_for_cabinet(message, cabinet, user_id, state)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ export_sheets: {e}")
        await safe_send_message(
            message=message,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            user_id=user_id
        )


async def create_export_for_cabinet(message: Message, cabinet, user_id: int, state: FSMContext = None):
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —ç–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞"""
    try:
        import os
        
        # –ü–æ–ª—É—á–∞–µ–º ID —à–∞–±–ª–æ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        template_id = os.getenv('GOOGLE_TEMPLATE_SPREADSHEET_ID')
        if not template_id:
            await safe_send_message(
                message=message,
                text="‚ùå –®–∞–±–ª–æ–Ω Google Sheets –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                user_id=user_id
            )
            return
        template_url = f"https://docs.google.com/spreadsheets/d/{template_id}/copy"

        # 1) –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –ª–∏ —Ç–∞–±–ª–∏—Ü–∞
        from api.client import bot_api_client
        existing_sheet = await bot_api_client.get_cabinet_spreadsheet(cabinet.id)
        
        if existing_sheet.success and existing_sheet.data and existing_sheet.data.get("spreadsheet_id"):
            sheet_url = existing_sheet.data.get("spreadsheet_url")
            text = (
                f"üìä –≠–∫—Å–ø–æ—Ä—Ç –≤ Google Sheets\n\n"
                f"üîó –¢–µ–∫—É—â–∞—è —Ç–∞–±–ª–∏—Ü–∞: {sheet_url}\n\n"
                f"‚ÑπÔ∏è –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.\n"
                f"–í—ã –º–æ–∂–µ—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é –∏–ª–∏ –∑–∞–º–µ–Ω–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É."
            )
            from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
            kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–µ–π—á–∞—Å", callback_data=f"manual_export_update_{cabinet.id}")],
                [InlineKeyboardButton(text="‚ôªÔ∏è –°–º–µ–Ω–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É", callback_data=f"change_spreadsheet_{cabinet.id}")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_wb_menu")]
            ])
            await safe_send_message(message=message, text=text, reply_markup=kb, user_id=user_id)
            return
        
        # 2) –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ ‚Äî –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∫–∞–∫ —Ä–∞–Ω—å—à–µ (–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è + –æ–∂–∏–¥–∞–Ω–∏–µ URL)
        if state:
            await state.update_data(cabinet_id=cabinet.id)
            from core.states import ExportStates
            await state.set_state(ExportStates.waiting_for_spreadsheet_url)

        text = f"""üìä –≠–∫—Å–ø–æ—Ä—Ç –≤ Google Sheets

üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:

1Ô∏è‚É£ –û—Ç–∫—Ä–æ–π—Ç–µ —Å—Å—ã–ª–∫—É –∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–∞–±–ª–∏—Ü—É:
{template_url}

2Ô∏è‚É£ –î–∞–π—Ç–µ –¥–æ—Å—Ç—É–ø –±–æ—Ç—É:
   ‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –¥–æ—Å—Ç—É–ø"
   ‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ: wb-assist-sheets@wb-assist.iam.gserviceaccount.com
   ‚Ä¢ –î–∞–π—Ç–µ –ø—Ä–∞–≤–∞ "–†–µ–¥–∞–∫—Ç–æ—Ä"

3Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à—É —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É

‚ú® –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!

üí° –ü–æ–¥–¥–µ—Ä–∂–∫–∞: @wb_assist_bot"""
        
        await safe_send_message(message=message, text=text, user_id=user_id)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–ª—è –∫–∞–±–∏–Ω–µ—Ç–∞ {cabinet.id}: {e}")
        await safe_send_message(
            message=message,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            user_id=user_id
        )


async def show_cabinet_selection(message: Message, cabinets, user_id: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–∞–±–∏–Ω–µ—Ç–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞"""
    from keyboards.keyboards import InlineKeyboardMarkup, InlineKeyboardButton
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    
    for cabinet in cabinets:
        cabinet_name = cabinet.name or f"–ö–∞–±–∏–Ω–µ—Ç {cabinet.id}"
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(
                text=f"üìä {cabinet_name}",
                callback_data=f"export_cabinet_{cabinet.id}"
            )
        ])
    
    keyboard.inline_keyboard.append([
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_export")
    ])
    
    await safe_send_message(
        message=message,
        text="üìä **–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–±–∏–Ω–µ—Ç –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Google Sheets:**",
        reply_markup=keyboard,
        user_id=user_id
    )


@router.callback_query(F.data.startswith("export_cabinet_"))
@handle_telegram_errors
async def handle_cabinet_export_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞–±–∏–Ω–µ—Ç–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞"""
    try:
        cabinet_id = int(callback.data.replace("export_cabinet_", ""))
        user_id = callback.from_user.id
        
        from api.client import bot_api_client
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–±–∏–Ω–µ—Ç–µ
        dashboard_response = await bot_api_client.get_dashboard(user_id=user_id)
        cabinet = None
        
        if dashboard_response.success and dashboard_response.cabinets:
            cabinet = next((c for c in dashboard_response.cabinets if c.id == cabinet_id), None)
        
        if not cabinet:
            await callback.answer("‚ùå –ö–∞–±–∏–Ω–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        await callback.answer()
        await create_export_for_cabinet(callback.message, cabinet, user_id, state)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –∫–∞–±–∏–Ω–µ—Ç–∞: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "cancel_export")
@handle_telegram_errors
async def handle_cancel_export(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞"""
    await callback.answer("‚ùå –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç–º–µ–Ω–µ–Ω")
    await state.clear()
    await safe_edit_message(
        callback=callback,
        text="‚ùå –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç–º–µ–Ω–µ–Ω",
        user_id=callback.from_user.id
    )


@router.callback_query(F.data.startswith("change_spreadsheet_"))
@handle_telegram_errors
async def handle_change_spreadsheet(callback: CallbackQuery, state: FSMContext):
    """–í–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º —Å–º–µ–Ω—ã —Ç–∞–±–ª–∏—Ü—ã –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é"""
    try:
        import os
        from core.states import ExportStates
        
        cabinet_id = int(callback.data.replace("change_spreadsheet_", ""))
        template_id = os.getenv('GOOGLE_TEMPLATE_SPREADSHEET_ID')
        template_url = f"https://docs.google.com/spreadsheets/d/{template_id}/copy" if template_id else None
        
        await state.update_data(cabinet_id=cabinet_id)
        await state.set_state(ExportStates.waiting_for_spreadsheet_url)
        
        text = (
            "üîÑ –°–º–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü—ã —ç–∫—Å–ø–æ—Ä—Ç–∞.\n\n"
            "üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n\n"
            f"1Ô∏è‚É£ –û—Ç–∫—Ä–æ–π—Ç–µ —Å—Å—ã–ª–∫—É –∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–∞–±–ª–∏—Ü—É:\n{template_url}\n\n"
            "2Ô∏è‚É£ –î–∞–π—Ç–µ –¥–æ—Å—Ç—É–ø –±–æ—Ç—É:\n"
            "   ‚Ä¢ –ù–∞–∂–º–∏—Ç–µ \"–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –¥–æ—Å—Ç—É–ø\"\n"
            "   ‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ: wb-assist-sheets@wb-assist.iam.gserviceaccount.com\n"
            "   ‚Ä¢ –î–∞–π—Ç–µ –ø—Ä–∞–≤–∞ \"–†–µ–¥–∞–∫—Ç–æ—Ä\"\n\n"
            "3Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à—É —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É"
        )
        
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_export")]
        ])
        
        await safe_edit_message(callback=callback, text=text, reply_markup=kb, user_id=callback.from_user.id)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã —Ç–∞–±–ª–∏—Ü—ã: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@router.message(F.text.startswith("http"))
@handle_telegram_errors
async def check_export_state(message: Message, state: FSMContext):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏"""
    from core.states import ExportStates
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å—Å—ã–ª–∫–∞ –Ω–∞ Google Sheets
    if 'docs.google.com/spreadsheets' not in message.text:
        return  # –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—Ä—É–≥–∏–º handlers
    
    current_state = await state.get_state()
    
    logger.info(f"üîç Received Google Sheets URL. Current state: {current_state}")
    
    if current_state == ExportStates.waiting_for_spreadsheet_url:
        logger.info(f"‚úÖ State matches, processing spreadsheet URL")
        await process_spreadsheet_url(message, state)
    else:
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç - –≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–ª —Å—Å—ã–ª–∫—É
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∫–∞–±–∏–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ
        logger.info(f"‚ö†Ô∏è State does not match. Trying to find cabinet automatically")
        await process_spreadsheet_url_auto(message, state)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Å—ã–ª–∫–∏
async def process_spreadsheet_url(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ Google Sheets –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    spreadsheet_url = message.text.strip()
    
    logger.info(f"üîç Processing spreadsheet URL: {spreadsheet_url[:50]}...")
    
    try:
        from api.client import bot_api_client
        from core.states import ExportStates
        
        # –ü–æ–ª—É—á–∞–µ–º cabinet_id –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        cabinet_id = data.get('cabinet_id')
        
        if not cabinet_id:
            await safe_send_message(
                message=message,
                text="‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID –∫–∞–±–∏–Ω–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                user_id=user_id
            )
            await state.clear()
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ URL Google Sheets
        if 'docs.google.com/spreadsheets' not in spreadsheet_url:
            await safe_send_message(
                message=message,
                text="‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ Google Sheets —Ç–∞–±–ª–∏—Ü—É.",
                user_id=user_id
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º spreadsheet_id —á–µ—Ä–µ–∑ API
        response = await bot_api_client.set_cabinet_spreadsheet(
            cabinet_id=cabinet_id,
            spreadsheet_url=spreadsheet_url
        )
        
        if response.success:
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.clear()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            text = """‚úÖ –¢–∞–±–ª–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω–∞!

üìä –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.

üîÑ –•–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å?"""
            
            from keyboards.keyboards import InlineKeyboardMarkup, InlineKeyboardButton
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–µ–π—á–∞—Å",
                    callback_data=f"manual_export_update_{cabinet_id}"
                )],
                [InlineKeyboardButton(
                    text="‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
                    callback_data="cancel_export"
                )]
            ])
            
            await safe_send_message(
                message=message,
                text=text,
                reply_markup=keyboard,
                user_id=user_id
            )
        else:
            await safe_send_message(
                message=message,
                text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ —Ç–∞–±–ª–∏—Ü—ã: {response.error}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤—ã –¥–∞–ª–∏ –¥–æ—Å—Ç—É–ø –±–æ—Ç—É.",
                user_id=user_id
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç–∞–±–ª–∏—Ü—É: {e}")
        await safe_send_message(
            message=message,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            user_id=user_id
        )
        await state.clear()


@router.callback_query(F.data.startswith("manual_export_update_"))
@handle_telegram_errors
async def handle_manual_export_update(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã"""
    try:
        from api.client import bot_api_client
        
        cabinet_id = int(callback.data.replace("manual_export_update_", ""))
        user_id = callback.from_user.id
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        await callback.answer("‚è≥ –û–±–Ω–æ–≤–ª—è—é —Ç–∞–±–ª–∏—Ü—É...", show_alert=False)
        
        await safe_edit_message(
            callback=callback,
            text="‚è≥ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã...\n–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.",
            user_id=user_id
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        response = await bot_api_client.update_cabinet_spreadsheet(cabinet_id)
        
        if response.success:
            await safe_edit_message(
                callback=callback,
                text="‚úÖ –¢–∞–±–ª–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n\n–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∏ –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.",
                user_id=user_id
            )
        else:
            await safe_edit_message(
                callback=callback,
                text=f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: {response.error}",
                user_id=user_id
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


async def process_spreadsheet_url_auto(message: Message, state: FSMContext):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–∫–∏ –±–µ–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    user_id = message.from_user.id
    spreadsheet_url = message.text.strip()
    
    logger.info(f"üîç Auto-processing spreadsheet URL for user {user_id}")
    
    try:
        from api.client import bot_api_client
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∫–∞–±–∏–Ω–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cabinets_response = await bot_api_client.get_user_cabinets(user_id)
        
        if not cabinets_response.success or not cabinets_response.data:
            await safe_send_message(
                message=message,
                text="‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–∞–±–∏–Ω–µ—Ç–æ–≤. –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–∞–±–∏–Ω–µ—Ç —á–µ—Ä–µ–∑ /start",
                user_id=user_id
            )
            return
        
        cabinets = cabinets_response.data if isinstance(cabinets_response.data, list) else []
        
        if not cabinets:
            await safe_send_message(
                message=message,
                text="‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–∞–±–∏–Ω–µ—Ç–æ–≤",
                user_id=user_id
            )
            return
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –∫–∞–±–∏–Ω–µ—Ç
        cabinet_id = cabinets[0].get('id') if isinstance(cabinets[0], dict) else cabinets[0].id
        
        logger.info(f"üìä Using cabinet {cabinet_id} for auto-processing")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º spreadsheet_id —á–µ—Ä–µ–∑ API
        response = await bot_api_client.set_cabinet_spreadsheet(
            cabinet_id=cabinet_id,
            spreadsheet_url=spreadsheet_url
        )
        
        if response.success:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            text = f"""‚úÖ –¢–∞–±–ª–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ –∫–∞–±–∏–Ω–µ—Ç—É!

üìä –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.

üîÑ –•–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å?"""
            
            from keyboards.keyboards import InlineKeyboardMarkup, InlineKeyboardButton
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–µ–π—á–∞—Å",
                    callback_data=f"manual_export_update_{cabinet_id}"
                )],
                [InlineKeyboardButton(
                    text="‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
                    callback_data="cancel_export"
                )]
            ])
            
            await safe_send_message(
                message=message,
                text=text,
                reply_markup=keyboard,
                user_id=user_id
            )
        else:
            await safe_send_message(
                message=message,
                text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ —Ç–∞–±–ª–∏—Ü—ã: {response.error}\n\n–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –¥–∞–ª–∏ –¥–æ—Å—Ç—É–ø –±–æ—Ç—É.",
                user_id=user_id
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Å—ã–ª–∫–∏: {e}")
        await safe_send_message(
            message=message,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            user_id=user_id
    )
