import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –±–æ—Ç–∞
sys.path.insert(0, str(Path(__file__).parent.parent))

from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command

from api.client import bot_api_client
from keyboards.keyboards import wb_menu_keyboard, main_keyboard, create_analytics_keyboard
from utils.formatters import format_error_message, format_currency, format_percentage

router = Router()



@router.callback_query(F.data == "analytics")
async def show_analytics_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    response = await bot_api_client.get_analytics_sales(
        user_id=callback.from_user.id,
        period="7d"
    )
    
    if response.success and response.data:
        keyboard = create_analytics_keyboard(period="7d")
        
        await callback.message.edit_text(
            response.telegram_text or "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∂",
            reply_markup=keyboard
        )
    else:
        error_message = format_error_message(response.error, response.status_code)
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:\n\n{error_message}",
            reply_markup=create_analytics_keyboard()
        )
    
    await callback.answer()


@router.callback_query(F.data.startswith("analytics_period_"))
async def show_analytics_period(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"""
    period = callback.data.split("_")[-1]
    
    response = await bot_api_client.get_analytics_sales(
        user_id=callback.from_user.id,
        period=period
    )
    
    if response.success and response.data:
        keyboard = create_analytics_keyboard(period=period)
        
        await callback.message.edit_text(
            response.telegram_text or "üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∂",
            reply_markup=keyboard
        )
    else:
        error_message = format_error_message(response.error, response.status_code)
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:\n\n{error_message}",
            reply_markup=create_analytics_keyboard()
        )
    
    await callback.answer()


@router.callback_query(F.data == "refresh_analytics")
async def refresh_analytics(callback: CallbackQuery):
    """–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    await callback.message.edit_text("‚è≥ –û–±–Ω–æ–≤–ª—è—é –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏...")
    
    response = await bot_api_client.get_analytics_sales(
        user_id=callback.from_user.id,
        period="7d"
    )
    
    if response.success and response.data:
        keyboard = create_analytics_keyboard(period="7d")
        
        await callback.message.edit_text(
            response.telegram_text or "üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞",
            reply_markup=keyboard
        )
    else:
        error_message = format_error_message(response.error, response.status_code)
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:\n\n{error_message}",
            reply_markup=create_analytics_keyboard()
        )
    
    await callback.answer("‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")


@router.callback_query(F.data == "dynamics")
async def show_dynamics(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–Ω–∞–º–∏–∫—É –ø—Ä–æ–¥–∞–∂"""
    response = await bot_api_client.get_analytics_sales(
        user_id=callback.from_user.id,
        period="7d"
    )
    
    if response.success and response.data:
        sales_periods = response.data.get("sales_periods", {})
        dynamics = response.data.get("dynamics", {})
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –¥–∏–Ω–∞–º–∏–∫–∏
        text = "üìà –î–ò–ù–ê–ú–ò–ö–ê –ü–†–û–î–ê–ñ\n\n"
        
        # –ü—Ä–æ–¥–∞–∂–∏ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º
        text += "üìä –ü–†–û–î–ê–ñ–ò –ü–û –ü–ï–†–ò–û–î–ê–ú:\n"
        for period, data in sales_periods.items():
            count = data.get("count", 0)
            amount = data.get("amount", 0)
            text += f"‚Ä¢ {period.replace('_', ' ').title()}: {count} –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ {format_currency(amount)}\n"
        
        text += "\nüìà –î–ò–ù–ê–ú–ò–ö–ê:\n"
        yesterday_growth = dynamics.get("yesterday_growth_percent", 0)
        week_growth = dynamics.get("week_growth_percent", 0)
        avg_check = dynamics.get("average_check", 0)
        conversion = dynamics.get("conversion_percent", 0)
        
        text += f"‚Ä¢ –†–æ—Å—Ç –∫ –≤—á–µ—Ä–∞: {format_percentage(yesterday_growth)}\n"
        text += f"‚Ä¢ –†–æ—Å—Ç –∫ –ø—Ä–æ—à–ª–æ–π –Ω–µ–¥–µ–ª–µ: {format_percentage(week_growth)}\n"
        text += f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {format_currency(avg_check)}\n"
        text += f"‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏—è: {conversion:.1f}%\n"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="üîô –ö –∞–Ω–∞–ª–∏—Ç–∏–∫–µ",
                callback_data="analytics"
            )]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard)
    else:
        error_message = format_error_message(response.error, response.status_code)
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∏–Ω–∞–º–∏–∫–∏:\n\n{error_message}",
            reply_markup=create_analytics_keyboard()
        )
    
    await callback.answer()


@router.callback_query(F.data == "avg_check")
async def show_avg_check(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫ –∏ –∫–æ–Ω–≤–µ—Ä—Å–∏—é"""
    response = await bot_api_client.get_analytics_sales(
        user_id=callback.from_user.id,
        period="7d"
    )
    
    if response.success and response.data:
        dynamics = response.data.get("dynamics", {})
        top_products = response.data.get("top_products", [])
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —Å—Ä–µ–¥–Ω–µ–≥–æ —á–µ–∫–∞
        text = "üí∞ –°–†–ï–î–ù–ò–ô –ß–ï–ö –ò –ö–û–ù–í–ï–†–°–ò–Ø\n\n"
        
        avg_check = dynamics.get("average_check", 0)
        conversion = dynamics.get("conversion_percent", 0)
        
        text += f"üí≥ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {format_currency(avg_check)}\n"
        text += f"üìä –ö–æ–Ω–≤–µ—Ä—Å–∏—è: {conversion:.1f}%\n\n"
        
        if top_products:
            text += "üèÜ –¢–û–ü –¢–û–í–ê–†–´:\n"
            for i, product in enumerate(top_products[:3], 1):
                name = product.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä")
                sales_count = product.get("sales_count", 0)
                sales_amount = product.get("sales_amount", 0)
                rating = product.get("rating", 0)
                
                text += f"{i}. {name}\n"
                text += f"   –ü—Ä–æ–¥–∞–∂: {sales_count} —à—Ç. –Ω–∞ {format_currency(sales_amount)}\n"
                text += f"   –†–µ–π—Ç–∏–Ω–≥: {rating:.1f}‚≠ê\n\n"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="üîô –ö –∞–Ω–∞–ª–∏—Ç–∏–∫–µ",
                callback_data="analytics"
            )]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard)
    else:
        error_message = format_error_message(response.error, response.status_code)
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:\n\n{error_message}",
            reply_markup=create_analytics_keyboard()
        )
    
    await callback.answer()


@router.callback_query(F.data == "sales_period")
async def show_sales_period(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø—Ä–æ–¥–∞–∂ –∑–∞ –ø–µ—Ä–∏–æ–¥"""
    response = await bot_api_client.get_analytics_sales(
        user_id=callback.from_user.id,
        period="7d"
    )
    
    if response.success and response.data:
        keyboard = create_analytics_keyboard(period="7d")
        
        await callback.message.edit_text(
            response.telegram_text or "üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∂",
            reply_markup=keyboard
        )
    else:
        error_message = format_error_message(response.error, response.status_code)
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:\n\n{error_message}",
            reply_markup=create_analytics_keyboard()
        )
    
    await callback.answer()


@router.callback_query(F.data == "export_sales")
async def export_sales_to_google(callback: CallbackQuery):
    """–≠–∫—Å–ø–æ—Ä—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø—Ä–æ–¥–∞–∂ –≤ Google Sheets"""
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —ç–∫—Å–ø–æ—Ä—Ç –≤ Google Sheets
    await callback.message.edit_text(
        "üì§ –≠–ö–°–ü–û–†–¢ –í GOOGLE SHEETS\n\n"
        "‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Google Sheets –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏.\n\n"
        "–°–µ–π—á–∞—Å –¥–æ—Å—Ç—É–ø–µ–Ω –ø—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø—Ä–æ–¥–∞–∂.",
        reply_markup=create_analytics_keyboard()
    )
    await callback.answer()


@router.message(Command("analytics"))
async def cmd_analytics(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /analytics"""
    response = await bot_api_client.get_analytics_sales(
        user_id=message.from_user.id,
        period="7d"
    )
    
    if response.success and response.data:
        keyboard = create_analytics_keyboard(period="7d")
        
        await message.answer(
            response.telegram_text or "üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∂",
            reply_markup=keyboard
        )
    else:
        error_message = format_error_message(response.error, response.status_code)
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:\n\n{error_message}",
            reply_markup=main_keyboard()
        )