import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –±–æ—Ç–∞
sys.path.insert(0, str(Path(__file__).parent.parent))

from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from api.client import bot_api_client
from core.states import SyncStates
from keyboards.keyboards import wb_menu_keyboard, main_keyboard, create_sync_keyboard
from utils.formatters import format_error_message, format_relative_time

router = Router()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ sync —É–±—Ä–∞–Ω, —Ç–∞–∫ –∫–∞–∫ –∫–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –º–µ–Ω—é


@router.callback_query(F.data == "start_sync")
async def start_manual_sync(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä—É—á–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é"""
    await state.set_state(SyncStates.waiting_for_confirmation)
    
    await callback.message.edit_text(
        "üîÑ –†–£–ß–ù–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø\n\n"
        "‚ö†Ô∏è –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 30-60 —Å–µ–∫—É–Ω–¥.\n"
        "–í —ç—Ç–æ –≤—Ä–µ–º—è –¥–∞–Ω–Ω—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.\n\n"
        "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="‚úÖ –î–∞, –∑–∞–ø—É—Å—Ç–∏—Ç—å",
                callback_data="confirm_sync"
            )],
            [InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∞",
                callback_data="cancel_sync"
            )]
        ])
    )
    await callback.answer()


@router.callback_query(F.data == "confirm_sync")
async def confirm_sync(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
    await state.set_state(SyncStates.sync_in_progress)
    
    await callback.message.edit_text("‚è≥ –ó–∞–ø—É—Å–∫–∞—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é...")
    
    response = await bot_api_client.start_sync(
        user_id=callback.from_user.id
    )
    
    if response.success and response.data:
        sync_id = response.data.get("sync_id")
        await state.update_data(sync_id=sync_id)
        
        await callback.message.edit_text(
            response.telegram_text or "üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞",
            reply_markup=create_sync_keyboard(sync_id=sync_id)
        )
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        await state.set_state(SyncStates.sync_in_progress)
    else:
        await state.set_state(SyncStates.sync_error)
        error_message = format_error_message(response.error, response.status_code)
        
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:\n\n{error_message}",
            reply_markup=create_sync_keyboard()
        )
    
    await callback.answer()


@router.callback_query(F.data == "cancel_sync")
async def cancel_sync(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é"""
    await state.clear()
    
    await callback.message.edit_text(
        "‚ùå –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
        reply_markup=create_sync_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data == "sync_status")
async def show_sync_status(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
    response = await bot_api_client.get_sync_status(
        user_id=callback.from_user.id
    )
    
    if response.success and response.data:
        last_sync = response.data.get("last_sync")
        status = response.data.get("status")
        duration = response.data.get("duration_seconds", 0)
        updates = response.data.get("updates", {})
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        text = response.telegram_text or "üîÑ –°—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"
        
        if last_sync:
            text += f"\n\n‚è∞ –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: {format_relative_time(last_sync)}"
        
        if status:
            status_emoji = "‚úÖ" if status == "completed" else "‚è≥" if status == "in_progress" else "‚ùå"
            text += f"\nüìä –°—Ç–∞—Ç—É—Å: {status_emoji} {status.title()}"
        
        if duration > 0:
            text += f"\n‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} —Å–µ–∫"
        
        if updates:
            text += "\n\nüìà –û–±–Ω–æ–≤–ª–µ–Ω–æ:"
            for key, value in updates.items():
                if isinstance(value, dict):
                    for sub_key, sub_value in value.items():
                        text += f"\n‚Ä¢ {key.title()}: {sub_value}"
                else:
                    text += f"\n‚Ä¢ {key.title()}: {value}"
        
        keyboard = create_sync_keyboard()
        await callback.message.edit_text(text, reply_markup=keyboard)
    else:
        error_message = format_error_message(response.error, response.status_code)
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:\n\n{error_message}",
            reply_markup=create_sync_keyboard()
        )
    
    await callback.answer()


@router.callback_query(F.data.startswith("sync_status_"))
async def check_sync_status(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
    sync_id = callback.data.split("_")[-1]
    
    response = await bot_api_client.get_sync_status(
        user_id=callback.from_user.id
    )
    
    if response.success and response.data:
        status = response.data.get("status")
        
        if status == "completed":
            await state.set_state(SyncStates.sync_completed)
            await callback.message.edit_text(
                "‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!",
                reply_markup=create_sync_keyboard()
            )
        elif status == "in_progress":
            await callback.message.edit_text(
                "‚è≥ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Å–µ –µ—â–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.",
                reply_markup=create_sync_keyboard(sync_id=sync_id)
            )
        else:
            await state.set_state(SyncStates.sync_error)
            await callback.message.edit_text(
                f"‚ùå –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π\n\n"
                f"–°—Ç–∞—Ç—É—Å: {status}",
                reply_markup=create_sync_keyboard()
            )
    else:
        error_message = format_error_message(response.error, response.status_code)
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:\n\n{error_message}",
            reply_markup=create_sync_keyboard()
        )
    
    await callback.answer()


@router.message(Command("sync"))
async def cmd_sync(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ /sync"""
    await state.set_state(SyncStates.waiting_for_confirmation)
    
    await message.answer(
        "üîÑ –†–£–ß–ù–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø\n\n"
        "‚ö†Ô∏è –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 30-60 —Å–µ–∫—É–Ω–¥.\n"
        "–í —ç—Ç–æ –≤—Ä–µ–º—è –¥–∞–Ω–Ω—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.\n\n"
        "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="‚úÖ –î–∞, –∑–∞–ø—É—Å—Ç–∏—Ç—å",
                callback_data="confirm_sync"
            )],
            [InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∞",
                callback_data="cancel_sync"
            )]
        ])
    )


@router.message(Command("sync_status"))
async def cmd_sync_status(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /sync_status"""
    response = await bot_api_client.get_sync_status(
        user_id=message.from_user.id
    )
    
    if response.success and response.data:
        await message.answer(
            response.telegram_text or "üîÑ –°—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏",
            reply_markup=create_sync_keyboard()
        )
    else:
        error_message = format_error_message(response.error, response.status_code)
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:\n\n{error_message}",
            reply_markup=main_keyboard()
        )