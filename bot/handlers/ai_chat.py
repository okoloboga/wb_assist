"""
AI Chat Handler - –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å AI Chat Service.

–ö–Ω–æ–ø–∫–∞:
- üí¨ AI-—á–∞—Ç (–≤ –º–µ–Ω—é AI-–ø–æ–º–æ—â–Ω–∏–∫)

–ö–æ–º–∞–Ω–¥—ã:
- /ai_limits - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–∏–º–∏—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤
"""

import logging
import os
from typing import Optional, Dict, Any
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
import aiohttp

from core.config import config
from core.states import AIChatStates
from utils.formatters import (
    safe_send_message,
    handle_telegram_errors,
)
from api.client import bot_api_client

logger = logging.getLogger(__name__)

router = Router()

# URL AI Chat Service
AI_CHAT_URL = getattr(config, "ai_chat_service_url", None) or os.getenv("AI_CHAT_SERVICE_URL", "http://ai_chat:9001")


# ============================================================================
# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
# ============================================================================

async def get_user_context(telegram_id: int) -> Optional[str]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –ë–î –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤.
    
    –í–∫–ª—é—á–∞–µ—Ç:
    - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–¥–∞–∂
    - –î–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–∞—Ö
    - –ê–Ω–∞–ª–∏—Ç–∏–∫—É
    
    Returns:
        str: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ø—Ä–æ–º–ø—Ç –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    try:
        logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º dashboard (–æ—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)
        dashboard_resp = await bot_api_client.get_dashboard(telegram_id)
        
        if not dashboard_resp.success or not dashboard_resp.data:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å dashboard –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
            return None
        
        dashboard = dashboard_resp.data
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–¥–∞–∂ –∑–∞ 7 –¥–Ω–µ–π
        sales_resp = await bot_api_client.get_analytics_sales(
            user_id=telegram_id,
            period="7d"
        )
        
        sales_data = sales_resp.data if sales_resp.success else {}
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context_parts = []
        
        # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        if "orders" in dashboard:
            orders = dashboard["orders"]
            context_parts.append(f"–ó–∞–∫–∞–∑—ã –∑–∞ 7 –¥–Ω–µ–π: {orders.get('total_7d', 0)} —à—Ç.")
            context_parts.append(f"–ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã: {orders.get('new', 0)} —à—Ç.")
        
        if "sales" in dashboard:
            sales = dashboard["sales"]
            revenue_7d = sales.get('revenue_7d', 0)
            context_parts.append(f"–í—ã—Ä—É—á–∫–∞ –∑–∞ 7 –¥–Ω–µ–π: {revenue_7d:,.0f} ‚ÇΩ")
        
        if "stocks" in dashboard:
            stocks = dashboard["stocks"]
            context_parts.append(f"–¢–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–µ: {stocks.get('total_items', 0)} —à—Ç.")
            critical = stocks.get('critical_items', 0)
            if critical > 0:
                context_parts.append(f"‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–Ω—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤: {critical}")
        
        if "reviews" in dashboard:
            reviews = dashboard["reviews"]
            avg_rating = reviews.get('average_rating', 0)
            if avg_rating:
                context_parts.append(f"–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {avg_rating:.1f}‚≠ê")
            negative = reviews.get('negative_count', 0)
            if negative > 0:
                context_parts.append(f"–ù–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤: {negative}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∂
        if sales_data:
            if "top_products" in sales_data:
                top_products = sales_data["top_products"][:3]  # –¢–æ–ø-3
                if top_products:
                    context_parts.append("\n–¢–æ–ø —Ç–æ–≤–∞—Ä—ã –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º:")
                    for i, product in enumerate(top_products, 1):
                        name = product.get("name", "N/A")[:30]
                        revenue = product.get("revenue", 0)
                        context_parts.append(f"{i}. {name} - {revenue:,.0f} ‚ÇΩ")
        
        if not context_parts:
            return None
        
        # –°–æ–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context = "\n".join(context_parts)
        
        logger.info(f"‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id} –ø–æ–ª—É—á–µ–Ω: {len(context)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        return context
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {e}", exc_info=True)
        return None


# ============================================================================
# Callback ai_chat - –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å AI
# ============================================================================

def create_ai_chat_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–µ–∂–∏–º–∞ AI —á–∞—Ç–∞."""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –í—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞", callback_data="cancel_ai_chat")],
        [InlineKeyboardButton(text="üìä –ú–æ–∏ –ª–∏–º–∏—Ç—ã", callback_data="check_ai_limits")]
    ])


@router.callback_query(F.data == "ai_chat")
@handle_telegram_errors
async def callback_ai_chat(callback: CallbackQuery, state: FSMContext):
    """
    –ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º.
    
    –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —Ä–µ–∂–∏–º —á–∞—Ç–∞, –≥–¥–µ –≤—Å–µ –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –≤ AI Chat Service.
    """
    telegram_id = callback.from_user.id
    
    logger.info(f"ü§ñ User {telegram_id} started AI chat")
    
    welcome_text = (
        "ü§ñ <b>AI –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç Wildberries</b>\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å:\n"
        "üìä –ê–Ω–∞–ª–∏–∑–æ–º –ø—Ä–æ–¥–∞–∂ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n"
        "üì¶ –†–∞–±–æ—Ç–æ–π —Å –∑–∞–∫–∞–∑–∞–º–∏ –∏ –æ—Å—Ç–∞—Ç–∫–∞–º–∏\n"
        "‚≠ê –û—Ç–∑—ã–≤–∞–º–∏ –∏ —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏\n"
        "üí∞ –¶–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º –∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞–º–∏\n"
        "üìà –°—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è –Ω–∞ WB\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ —è –æ—Ç–≤–µ—á—É!\n\n"
        "üéØ <b>–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è:</b>\n"
        "<i>–Ø –≤–∏–∂—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–∞—à–∏—Ö –ø—Ä–æ–¥–∞–∂ –∏ –º–æ–≥—É –¥–∞–≤–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö!</i>\n\n"
        "üí° <b>–î–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:</b> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É <b>üß† AI-–∞–Ω–∞–ª–∏–∑</b> - –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏\n"
        "üìä <i>–£ –≤–∞—Å –µ—Å—Ç—å 30 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å—É—Ç–∫–∏</i>"
    )
    
    await callback.message.edit_text(
        welcome_text,
        parse_mode="HTML",
        reply_markup=create_ai_chat_keyboard()
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
    await state.set_state(AIChatStates.waiting_for_message)
    await callback.answer()


# ============================================================================
# Callback cancel_ai_chat - –≤—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ —á–∞—Ç–∞
# ============================================================================

@router.callback_query(F.data == "cancel_ai_chat", StateFilter(AIChatStates.waiting_for_message))
@handle_telegram_errors
async def callback_cancel_chat(callback: CallbackQuery, state: FSMContext):
    """
    –í—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ AI —á–∞—Ç–∞.
    """
    telegram_id = callback.from_user.id
    
    logger.info(f"üîö User {telegram_id} cancelled AI chat")
    
    await state.clear()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é AI-–ø–æ–º–æ—â–Ω–∏–∫–∞
    from keyboards.keyboards import ai_assistant_keyboard
    
    await callback.message.edit_text(
        "‚úÖ –ß–∞—Ç —Å AI –∑–∞–≤–µ—Ä—à–µ–Ω.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=ai_assistant_keyboard()
    )
    await callback.answer()


# ============================================================================
# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ä–µ–∂–∏–º–µ AI —á–∞—Ç–∞
# ============================================================================

@router.message(StateFilter(AIChatStates.waiting_for_message), F.text)
@handle_telegram_errors
async def process_ai_message(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–∂–∏–º–µ AI —á–∞—Ç–∞.
    
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ AI Chat Service –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç.
    """
    telegram_id = message.from_user.id
    user_message = message.text
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è
    if len(user_message) > 4000:
        await safe_send_message(
            message,
            "‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 4000 —Å–∏–º–≤–æ–ª–æ–≤).\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å.",
            user_id=telegram_id
        )
        return
    
    logger.info(f"üí¨ AI chat message from user {telegram_id}: {len(user_message)} chars")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏
    await message.bot.send_chat_action(chat_id=telegram_id, action="typing")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_context = await get_user_context(telegram_id)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ AI Chat Service
    endpoint = f"{AI_CHAT_URL.rstrip('/')}/v1/chat/send"
    payload = {
        "telegram_id": telegram_id,
        "message": user_message,
        "user_context": user_context  # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    }
    headers = {
        "Content-Type": "application/json",
        "X-API-KEY": config.api_secret_key
    }
    
    try:
        timeout = aiohttp.ClientTimeout(total=60)  # 60 —Å–µ–∫—É–Ω–¥ –¥–ª—è OpenAI
        async with aiohttp.ClientSession(timeout=timeout) as session:
            async with session.post(endpoint, json=payload, headers=headers) as resp:
                
                # –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
                if resp.status == 200:
                    data = await resp.json()
                    response_text = data.get("response", "")
                    remaining = data.get("remaining_requests", 0)
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ª–∏–º–∏—Ç–∞—Ö
                    full_response = (
                        f"{response_text}\n\n"
                        f"<i>–û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–æ–≤: {remaining}/30</i>"
                    )
                    
                    await safe_send_message(
                        message,
                        full_response,
                        user_id=telegram_id,
                        parse_mode="HTML"
                    )
                    
                    logger.info(f"‚úÖ AI response sent to user {telegram_id}: {remaining} requests remaining")
                
                # –õ–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω
                elif resp.status == 429:
                    error_data = await resp.json()
                    error_detail = error_data.get("detail", {})
                    
                    if isinstance(error_detail, dict):
                        error_msg = error_detail.get("message", "–õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω")
                    else:
                        error_msg = str(error_detail)
                    
                    await safe_send_message(
                        message,
                        f"‚õî {error_msg}\n\n"
                        "üí° –õ–∏–º–∏—Ç —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ –ø–æ–ª–Ω–æ—á—å.\n"
                        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞! üåÖ",
                        user_id=telegram_id
                    )
                    
                    # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ä–µ–∂–∏–º–∞ —á–∞—Ç–∞
                    await state.clear()
                    
                    logger.warning(f"‚õî Rate limit exceeded for user {telegram_id}")
                
                # –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏
                else:
                    body = await resp.text()
                    logger.error(f"‚ùå AI Chat Service error {resp.status}: {body}")
                    
                    await safe_send_message(
                        message,
                        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ AI —Å–µ—Ä–≤–∏—Å—É.\n"
                        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                        user_id=telegram_id
                    )
    
    except aiohttp.ClientError as e:
        logger.error(f"‚ùå Network error calling AI Chat Service: {e}")
        await safe_send_message(
            message,
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å AI —Å–µ—Ä–≤–∏—Å–æ–º.\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            user_id=telegram_id
        )
    
    except Exception as e:
        logger.error(f"‚ùå Unexpected error in AI chat: {e}", exc_info=True)
        await safe_send_message(
            message,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            user_id=telegram_id
        )


# ============================================================================
# Callback check_ai_limits - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–∏–º–∏—Ç—ã
# ============================================================================

@router.callback_query(F.data == "check_ai_limits")
@handle_telegram_errors
async def callback_ai_limits(callback: CallbackQuery):
    """
    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –ª–∏–º–∏—Ç—ã AI –∑–∞–ø—Ä–æ—Å–æ–≤ (—á–µ—Ä–µ–∑ callback).
    """
    await show_ai_limits(callback.from_user.id, callback.message)
    await callback.answer()


# ============================================================================
# –ö–æ–º–∞–Ω–¥–∞ /ai_limits - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–∏–º–∏—Ç—ã (–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
# ============================================================================

@router.message(Command("ai_limits"))
@handle_telegram_errors
async def cmd_ai_limits(message: Message):
    """
    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –ª–∏–º–∏—Ç—ã AI –∑–∞–ø—Ä–æ—Å–æ–≤ (—á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É).
    """
    await show_ai_limits(message.from_user.id, message)


async def show_ai_limits(telegram_id: int, target_message: Message):
    """
    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –ª–∏–º–∏—Ç—ã AI –∑–∞–ø—Ä–æ—Å–æ–≤.
    """
    logger.info(f"üìä User {telegram_id} checking AI limits")
    
    # –ó–∞–ø—Ä–æ—Å –∫ AI Chat Service
    endpoint = f"{AI_CHAT_URL.rstrip('/')}/v1/chat/limits/{telegram_id}"
    headers = {
        "X-API-KEY": config.api_secret_key
    }
    
    try:
        timeout = aiohttp.ClientTimeout(total=10)
        async with aiohttp.ClientSession(timeout=timeout) as session:
            async with session.get(endpoint, headers=headers) as resp:
                
                if resp.status == 200:
                    data = await resp.json()
                    
                    requests_today = data.get("requests_today", 0)
                    requests_remaining = data.get("requests_remaining", 0)
                    daily_limit = data.get("daily_limit", 30)
                    
                    # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
                    filled = int((requests_today / daily_limit) * 10)
                    empty = 10 - filled
                    progress_bar = "‚ñà" * filled + "‚ñë" * empty
                    
                    limits_text = (
                        "üìä <b>–í–∞—à–∏ –ª–∏–º–∏—Ç—ã AI —á–∞—Ç–∞</b>\n\n"
                        f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: <b>{requests_today}</b> –∏–∑ {daily_limit}\n"
                        f"–û—Å—Ç–∞–ª–æ—Å—å: <b>{requests_remaining}</b>\n\n"
                        f"[{progress_bar}] {requests_today}/{daily_limit}\n\n"
                        "üí° –õ–∏–º–∏—Ç —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ –ø–æ–ª–Ω–æ—á—å"
                    )
                    
                    # –ï—Å–ª–∏ —ç—Ç–æ callback, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    if hasattr(target_message, 'edit_text'):
                        await target_message.edit_text(
                            limits_text,
                            parse_mode="HTML",
                            reply_markup=create_ai_chat_keyboard()
                        )
                    else:
                        # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        await safe_send_message(
                            target_message,
                            limits_text,
                            user_id=telegram_id,
                            parse_mode="HTML"
                        )
                    
                    logger.info(f"‚úÖ Limits sent to user {telegram_id}: {requests_remaining} remaining")
                
                else:
                    body = await resp.text()
                    logger.error(f"‚ùå Failed to get limits: HTTP {resp.status}: {body}")
                    
                    error_text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–º–∏—Ç–∞—Ö.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                    
                    if hasattr(target_message, 'edit_text'):
                        await target_message.edit_text(error_text, reply_markup=create_ai_chat_keyboard())
                    else:
                        await safe_send_message(target_message, error_text, user_id=telegram_id)
    
    except Exception as e:
        logger.error(f"‚ùå Error getting AI limits: {e}", exc_info=True)
        
        error_text = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–æ–≤.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        
        if hasattr(target_message, 'edit_text'):
            await target_message.edit_text(error_text, reply_markup=create_ai_chat_keyboard())
        else:
            await safe_send_message(target_message, error_text, user_id=telegram_id)

