import sys
from pathlib import Path
from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –±–æ—Ç–∞
sys.path.insert(0, str(Path(__file__).parent.parent))

from keyboards.keyboards import wb_menu_keyboard
from api.client import register_user_on_server, bot_api_client
from core.states import WBCabinetStates
from aiogram.fsm.context import FSMContext

router = Router()


@router.message(Command(commands=["start"]))
async def register_user(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start, —Å–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,
    —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ WB API –∫–ª—é—á–∞.
    """
    first_name = message.from_user.first_name or ""
    user_id = message.from_user.id
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    payload = {
        "telegram_id": user_id,
        "username": message.from_user.username or None,
        "first_name": first_name,
        "last_name": message.from_user.last_name or None
    }

    status, _ = await register_user_on_server(payload)

    if status not in [200, 201]:
        if status == 503:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        else:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ WB API –∫–ª—é—á–∞
    has_api_key = await _check_user_api_key(user_id)
    
    if has_api_key:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞—à–±–æ—Ä–¥
        dashboard_response = await bot_api_client.get_dashboard(
            user_id=user_id
        )
        
        if dashboard_response.success:
            await message.answer(
                dashboard_response.telegram_text or "üìä –î–∞—à–±–æ—Ä–¥ –∑–∞–≥—Ä—É–∂–µ–Ω",
                reply_markup=wb_menu_keyboard()
            )
        else:
            # –ï—Å–ª–∏ –¥–∞—à–±–æ—Ä–¥ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω–æ–µ –º–µ–Ω—é
            await message.answer(
                "‚úÖ –ö–∞–±–∏–Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=wb_menu_keyboard()
            )
    else:
        # –¢—Ä–µ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ API –∫–ª—é—á–∞
        await _require_api_key(message, first_name, state)


async def _check_user_api_key(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        response = await bot_api_client.get_cabinet_status(user_id)
        
        if not response.success:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –∫–∞–±–∏–Ω–µ—Ç—ã
        cabinets = response.data.get('cabinets', []) if response.data else []
        return len(cabinets) > 0
        
    except Exception as e:
        return False


async def _require_api_key(message: Message, first_name: str, state: FSMContext):
    """–¢—Ä–µ–±—É–µ—Ç –≤–≤–æ–¥ API –∫–ª—é—á–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await state.set_state(WBCabinetStates.waiting_for_api_key)
    
    welcome_text = (
        f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {first_name}! üëã\n\n"
        "üîë **–¢–†–ï–ë–£–ï–¢–°–Ø –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï WB –ö–ê–ë–ò–ù–ï–¢–ê**\n\n"
        "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –≤–∞—à WB –∫–∞–±–∏–Ω–µ—Ç.\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à API –∫–ª—é—á –æ—Ç Wildberries:\n\n"
        "üí° **–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å API –∫–ª—é—á:**\n"
        "1. –ó–∞–π–¥–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç WB\n"
        "2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª '–ù–∞—Å—Ç—Ä–æ–π–∫–∏' ‚Üí '–î–æ—Å—Ç—É–ø –∫ API'\n"
        "3. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞\n"
        "4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –±–æ—Ç—É\n\n"
        "‚ö†Ô∏è **–í–∞–∂–Ω–æ:** API –∫–ª—é—á –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º –∏ –∏–º–µ—Ç—å –ø—Ä–∞–≤–∞ –Ω–∞ —á—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö."
    )
    
    await message.answer(
        welcome_text,
        parse_mode="Markdown"
    )

