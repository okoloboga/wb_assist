import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –±–æ—Ç–∞
sys.path.insert(0, str(Path(__file__).parent.parent))

from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command

from api.client import bot_api_client
from keyboards.keyboards import wb_menu_keyboard, main_keyboard, create_reviews_keyboard
from utils.formatters import format_error_message, format_rating

router = Router()


@router.callback_query(F.data == "reviews")
async def show_reviews_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –æ—Ç–∑—ã–≤–æ–≤ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    response = await bot_api_client.get_reviews_summary(
        user_id=callback.from_user.id,
        limit=10,
        offset=0
    )
    
    if response.success and response.data:
        reviews_data = response.data.get("reviews", {})
        new_reviews = reviews_data.get("new_reviews", [])
        unanswered_questions = reviews_data.get("unanswered_questions", [])
        statistics = reviews_data.get("statistics", {})
        
        if new_reviews or unanswered_questions:
            keyboard = create_reviews_keyboard(
                has_more=len(new_reviews) + len(unanswered_questions) >= 10,
                offset=0
            )
            
            await callback.message.edit_text(
                response.telegram_text or "‚≠ê –û—Ç–∑—ã–≤—ã –∏ –≤–æ–ø—Ä–æ—Å—ã",
                reply_markup=keyboard
            )
        else:
            await callback.message.edit_text(
                "‚úÖ –ù–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ –∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–µ—Ç!\n\n"
                "–í—Å–µ –æ—Ç–∑—ã–≤—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.",
                reply_markup=wb_menu_keyboard()
            )
    else:
        error_message = format_error_message(response.error, response.status_code)
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–∑—ã–≤–æ–≤:\n\n{error_message}",
            reply_markup=wb_menu_keyboard()
        )
    
    await callback.answer()


@router.callback_query(F.data == "new_reviews")
async def show_new_reviews(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–æ–≤—ã–µ –æ—Ç–∑—ã–≤—ã"""
    response = await bot_api_client.get_reviews_summary(
        user_id=callback.from_user.id,
        limit=10,
        offset=0
    )
    
    if response.success and response.data:
        reviews_data = response.data.get("reviews", {})
        new_reviews = reviews_data.get("new_reviews", [])
        unanswered_questions = reviews_data.get("unanswered_questions", [])
        statistics = reviews_data.get("statistics", {})
        
        if new_reviews or unanswered_questions:
            keyboard = create_reviews_keyboard(
                has_more=len(new_reviews) + len(unanswered_questions) >= 10,
                offset=0
            )
            
            await callback.message.edit_text(
                response.telegram_text or "‚≠ê –ù–æ–≤—ã–µ –æ—Ç–∑—ã–≤—ã –∏ –≤–æ–ø—Ä–æ—Å—ã",
                reply_markup=keyboard
            )
        else:
            await callback.message.edit_text(
                "‚úÖ –ù–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ –∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–µ—Ç!\n\n"
                "–í—Å–µ –æ—Ç–∑—ã–≤—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.",
                reply_markup=wb_menu_keyboard()
            )
    else:
        error_message = format_error_message(response.error, response.status_code)
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–∑—ã–≤–æ–≤:\n\n{error_message}",
            reply_markup=wb_menu_keyboard()
        )
    
    await callback.answer()


@router.callback_query(F.data == "critical_reviews")
async def show_critical_reviews(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç–∑—ã–≤—ã (1-3 –∑–≤–µ–∑–¥—ã)"""
    response = await bot_api_client.get_reviews_summary(
        user_id=callback.from_user.id,
        limit=10,
        offset=0
    )
    
    if response.success and response.data:
        reviews_data = response.data.get("reviews", {})
        new_reviews = reviews_data.get("new_reviews", [])
        statistics = reviews_data.get("statistics", {})
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç–∑—ã–≤—ã
        critical_reviews = [r for r in new_reviews if r.get("rating", 5) <= 3]
        
        if critical_reviews:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤
            text = "üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–¢–ó–´–í–´ (1-3‚≠ê)\n\n"
            
            for review in critical_reviews[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 5
                rating = review.get("rating", 0)
                product_name = review.get("product_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä")
                review_text = review.get("text", "")
                time_ago = review.get("time_ago", "")
                
                text += f"{format_rating(rating)} {product_name}\n"
                text += f"üí¨ \"{review_text[:100]}{'...' if len(review_text) > 100 else ''}\"\n"
                text += f"‚è∞ {time_ago}\n\n"
            
            if len(critical_reviews) > 5:
                text += f"... –∏ –µ—â–µ {len(critical_reviews) - 5} –æ—Ç–∑—ã–≤–æ–≤\n\n"
            
            text += f"üìä –í—Å–µ–≥–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö: {statistics.get('attention_needed', 0)}"
            
            keyboard = create_reviews_keyboard()
            await callback.message.edit_text(text, reply_markup=keyboard)
        else:
            await callback.message.edit_text(
                "‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤ –Ω–µ—Ç!\n\n"
                "–í—Å–µ –æ—Ç–∑—ã–≤—ã –∏–º–µ—é—Ç —Ä–µ–π—Ç–∏–Ω–≥ 4-5 –∑–≤–µ–∑–¥.",
                reply_markup=wb_menu_keyboard()
            )
    else:
        error_message = format_error_message(response.error, response.status_code)
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–∑—ã–≤–æ–≤:\n\n{error_message}",
            reply_markup=wb_menu_keyboard()
        )
    
    await callback.answer()


@router.callback_query(F.data.startswith("reviews_page_"))
async def show_reviews_page(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ—Ç–∑—ã–≤–æ–≤"""
    try:
        offset = int(callback.data.split("_")[-1])
    except (ValueError, IndexError):
        offset = 0
    
    response = await bot_api_client.get_reviews_summary(
        user_id=callback.from_user.id,
        limit=10,
        offset=offset
    )
    
    if response.success and response.data:
        reviews_data = response.data.get("reviews", {})
        new_reviews = reviews_data.get("new_reviews", [])
        unanswered_questions = reviews_data.get("unanswered_questions", [])
        
        keyboard = create_reviews_keyboard(
            has_more=len(new_reviews) + len(unanswered_questions) >= 10,
            offset=offset
        )
        
        await callback.message.edit_text(
            response.telegram_text or "‚≠ê –û—Ç–∑—ã–≤—ã –∏ –≤–æ–ø—Ä–æ—Å—ã",
            reply_markup=keyboard
        )
    else:
        error_message = format_error_message(response.error, response.status_code)
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–∑—ã–≤–æ–≤:\n\n{error_message}",
            reply_markup=wb_menu_keyboard()
        )
    
    await callback.answer()


@router.callback_query(F.data == "refresh_reviews")
async def refresh_reviews(callback: CallbackQuery):
    """–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–± –æ—Ç–∑—ã–≤–∞—Ö"""
    await callback.message.edit_text("‚è≥ –û–±–Ω–æ–≤–ª—è—é –¥–∞–Ω–Ω—ã–µ –æ–± –æ—Ç–∑—ã–≤–∞—Ö...")
    
    response = await bot_api_client.get_reviews_summary(
        user_id=callback.from_user.id,
        limit=10,
        offset=0
    )
    
    if response.success and response.data:
        reviews_data = response.data.get("reviews", {})
        new_reviews = reviews_data.get("new_reviews", [])
        unanswered_questions = reviews_data.get("unanswered_questions", [])
        
        keyboard = create_reviews_keyboard(
            has_more=len(new_reviews) + len(unanswered_questions) >= 10,
            offset=0
        )
        
        await callback.message.edit_text(
            response.telegram_text or "‚≠ê –û—Ç–∑—ã–≤—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã",
            reply_markup=keyboard
        )
    else:
        error_message = format_error_message(response.error, response.status_code)
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤:\n\n{error_message}",
            reply_markup=wb_menu_keyboard()
        )
    
    await callback.answer("‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")


@router.callback_query(F.data == "auto_answers")
async def show_auto_answers(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–æ–≤"""
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã —á–µ—Ä–µ–∑ API
    await callback.message.edit_text(
        "ü§ñ –ê–í–¢–û–û–¢–í–ï–¢–´\n\n"
        "‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–æ–≤ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏.\n\n"
        "–°–µ–π—á–∞—Å –¥–æ—Å—Ç—É–ø–µ–Ω –ø—Ä–æ—Å–º–æ—Ç—Ä –Ω–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ –∏ –≤–æ–ø—Ä–æ—Å–æ–≤.",
        reply_markup=create_reviews_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data == "export_reviews")
async def export_reviews_to_google(callback: CallbackQuery):
    """–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç–∑—ã–≤–æ–≤ –≤ Google Sheets"""
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —ç–∫—Å–ø–æ—Ä—Ç –≤ Google Sheets
    await callback.message.edit_text(
        "üì§ –≠–ö–°–ü–û–†–¢ –í GOOGLE SHEETS\n\n"
        "‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Google Sheets –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏.\n\n"
        "–°–µ–π—á–∞—Å –¥–æ—Å—Ç—É–ø–µ–Ω –ø—Ä–æ—Å–º–æ—Ç—Ä –Ω–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ –∏ –≤–æ–ø—Ä–æ—Å–æ–≤.",
        reply_markup=create_reviews_keyboard()
    )
    await callback.answer()


@router.message(Command("reviews"))
async def cmd_reviews(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /reviews"""
    response = await bot_api_client.get_reviews_summary(
        user_id=message.from_user.id,
        limit=10,
        offset=0
    )
    
    if response.success and response.data:
        reviews_data = response.data.get("reviews", {})
        new_reviews = reviews_data.get("new_reviews", [])
        unanswered_questions = reviews_data.get("unanswered_questions", [])
        
        if new_reviews or unanswered_questions:
            keyboard = create_reviews_keyboard(
                has_more=len(new_reviews) + len(unanswered_questions) >= 10,
                offset=0
            )
            
            await message.answer(
                response.telegram_text or "‚≠ê –ù–æ–≤—ã–µ –æ—Ç–∑—ã–≤—ã –∏ –≤–æ–ø—Ä–æ—Å—ã",
                reply_markup=keyboard
            )
        else:
            await message.answer(
                "‚úÖ –ù–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ –∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–µ—Ç!\n\n"
                "–í—Å–µ –æ—Ç–∑—ã–≤—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.",
                reply_markup=wb_menu_keyboard()
            )
    else:
        error_message = format_error_message(response.error, response.status_code)
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–∑—ã–≤–æ–≤:\n\n{error_message}",
            reply_markup=main_keyboard()
        )