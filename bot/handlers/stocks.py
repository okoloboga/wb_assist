import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –±–æ—Ç–∞
sys.path.insert(0, str(Path(__file__).parent.parent))

from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command

from api.client import bot_api_client
from keyboards.keyboards import wb_menu_keyboard, main_keyboard, create_stocks_keyboard
from utils.formatters import format_error_message, format_stocks_summary

router = Router()



@router.callback_query(F.data == "stock_list")
async def show_critical_stocks(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏"""
    response = await bot_api_client.get_critical_stocks(
        user_id=callback.from_user.id,
        limit=20,
        offset=0
    )
    
    if response.success and response.data:
        critical_products = response.data.get("critical_products", [])
        zero_products = response.data.get("zero_products", [])
        summary = response.data.get("summary", {})
        
        if critical_products or zero_products:
            keyboard = create_stocks_keyboard(
                has_more=len(critical_products) + len(zero_products) >= 20,
                offset=0
            )
            
            await callback.message.edit_text(
                response.telegram_text or "üì¶ –ö—Ä–∏—Ç–∏—á–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏",
                reply_markup=keyboard
            )
        else:
            await callback.message.edit_text(
                "‚úÖ –í—Å–µ –æ—Å—Ç–∞—Ç–∫–∏ –≤ –Ω–æ—Ä–º–µ!\n\n"
                "–ö—Ä–∏—Ç–∏—á–Ω—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.",
                reply_markup=wb_menu_keyboard()
            )
    else:
        error_message = format_error_message(response.error, response.status_code)
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤:\n\n{error_message}",
            reply_markup=wb_menu_keyboard()
        )
    
    await callback.answer()


@router.callback_query(F.data.startswith("stocks_page_"))
async def show_stocks_page(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ—Å—Ç–∞—Ç–∫–æ–≤"""
    try:
        offset = int(callback.data.split("_")[-1])
    except (ValueError, IndexError):
        offset = 0
    
    response = await bot_api_client.get_critical_stocks(
        user_id=callback.from_user.id,
        limit=20,
        offset=offset
    )
    
    if response.success and response.data:
        critical_products = response.data.get("critical_products", [])
        zero_products = response.data.get("zero_products", [])
        
        keyboard = create_stocks_keyboard(
            has_more=len(critical_products) + len(zero_products) >= 20,
            offset=offset
        )
        
        await callback.message.edit_text(
            response.telegram_text or "üì¶ –û—Å—Ç–∞—Ç–∫–∏",
            reply_markup=keyboard
        )
    else:
        error_message = format_error_message(response.error, response.status_code)
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤:\n\n{error_message}",
            reply_markup=wb_menu_keyboard()
        )
    
    await callback.answer()


@router.callback_query(F.data == "refresh_stocks")
async def refresh_stocks(callback: CallbackQuery):
    """–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö"""
    await callback.message.edit_text("‚è≥ –û–±–Ω–æ–≤–ª—è—é –¥–∞–Ω–Ω—ã–µ –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö...")
    
    response = await bot_api_client.get_critical_stocks(
        user_id=callback.from_user.id,
        limit=20,
        offset=0
    )
    
    if response.success and response.data:
        critical_products = response.data.get("critical_products", [])
        zero_products = response.data.get("zero_products", [])
        
        keyboard = create_stocks_keyboard(
            has_more=len(critical_products) + len(zero_products) >= 20,
            offset=0
        )
        
        await callback.message.edit_text(
            response.telegram_text or "üì¶ –û—Å—Ç–∞—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã",
            reply_markup=keyboard
        )
    else:
        error_message = format_error_message(response.error, response.status_code)
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤:\n\n{error_message}",
            reply_markup=wb_menu_keyboard()
        )
    
    await callback.answer("‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")


@router.callback_query(F.data == "stock_forecast")
async def show_stock_forecast(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –æ—Å—Ç–∞—Ç–∫–æ–≤"""
    # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –æ—Å—Ç–∞—Ç–∫–æ–≤ —á–µ—Ä–µ–∑ API
    await callback.message.edit_text(
        "üìä –ü–†–û–ì–ù–û–ó –û–°–¢–ê–¢–ö–û–í\n\n"
        "‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏.\n\n"
        "–°–µ–π—á–∞—Å –¥–æ—Å—Ç—É–ø–µ–Ω –ø—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–∫—É—â–∏—Ö –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤.",
        reply_markup=create_stocks_keyboard()
    )
    await callback.answer()


@router.message(Command("stocks"))
async def cmd_stocks(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /stocks"""
    response = await bot_api_client.get_critical_stocks(
        user_id=message.from_user.id,
        limit=20,
        offset=0
    )
    
    if response.success and response.data:
        critical_products = response.data.get("critical_products", [])
        zero_products = response.data.get("zero_products", [])
        
        if critical_products or zero_products:
            keyboard = create_stocks_keyboard(
                has_more=len(critical_products) + len(zero_products) >= 20,
                offset=0
            )
            
            await message.answer(
                response.telegram_text or "üì¶ –ö—Ä–∏—Ç–∏—á–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏",
                reply_markup=keyboard
            )
        else:
            await message.answer(
                "‚úÖ –í—Å–µ –æ—Å—Ç–∞—Ç–∫–∏ –≤ –Ω–æ—Ä–º–µ!\n\n"
                "–ö—Ä–∏—Ç–∏—á–Ω—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.",
                reply_markup=wb_menu_keyboard()
            )
    else:
        error_message = format_error_message(response.error, response.status_code)
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤:\n\n{error_message}",
            reply_markup=main_keyboard()
        )