#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –º–µ—Ç–æ–¥–æ–≤ API –∫–ª–∏–µ–Ω—Ç–∞
"""

import asyncio
import logging
import os
import pytest

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Å–µ–∫—Ä–µ—Ç –¥–æ –∏–º–ø–æ—Ä—Ç–∞ –∫–ª–∏–µ–Ω—Ç–∞
os.environ.setdefault("API_SECRET_KEY", "test_secret")

from api.client import BotAPIClient

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç
bot_api_client = BotAPIClient()

pytestmark = pytest.mark.asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_new_api_methods():
    """–¢–µ—Å—Ç –Ω–æ–≤—ã—Ö –º–µ—Ç–æ–¥–æ–≤ API –∫–ª–∏–µ–Ω—Ç–∞"""
    
    test_user_id = 5101525651  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π Telegram ID –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –º–µ—Ç–æ–¥–æ–≤ API –∫–ª–∏–µ–Ω—Ç–∞")
    logger.info("=" * 60)
    
    try:
        # 1. –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–∫–∞–∑–æ–≤
        logger.info("1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ get_orders_statistics...")
        response = await bot_api_client.get_orders_statistics(user_id=test_user_id)
        logger.info(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: success={response.success}, status_code={response.status_code}")
        if response.error:
            logger.error(f"   –û—à–∏–±–∫–∞: {response.error}")
        
        # 2. –¢–µ—Å—Ç –ø—Ä–æ–¥–∞–∂
        logger.info("2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ get_recent_sales...")
        response = await bot_api_client.get_recent_sales(user_id=test_user_id, limit=5)
        logger.info(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: success={response.success}, status_code={response.status_code}")
        if response.error:
            logger.error(f"   –û—à–∏–±–∫–∞: {response.error}")
        
        # 3. –¢–µ—Å—Ç –≤—ã–∫—É–ø–æ–≤
        logger.info("3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ get_buyouts...")
        response = await bot_api_client.get_buyouts(user_id=test_user_id, limit=5)
        logger.info(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: success={response.success}, status_code={response.status_code}")
        if response.error:
            logger.error(f"   –û—à–∏–±–∫–∞: {response.error}")
        
        # 4. –¢–µ—Å—Ç –≤–æ–∑–≤—Ä–∞—Ç–æ–≤
        logger.info("4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ get_returns...")
        response = await bot_api_client.get_returns(user_id=test_user_id, limit=5)
        logger.info(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: success={response.success}, status_code={response.status_code}")
        if response.error:
            logger.error(f"   –û—à–∏–±–∫–∞: {response.error}")
        
        # 5. –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–¥–∞–∂
        logger.info("5Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ get_sales_statistics...")
        response = await bot_api_client.get_sales_statistics(user_id=test_user_id)
        logger.info(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: success={response.success}, status_code={response.status_code}")
        if response.error:
            logger.error(f"   –û—à–∏–±–∫–∞: {response.error}")
        
        # 6. –¢–µ—Å—Ç –∫–∞–±–∏–Ω–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        logger.info("6Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ get_user_cabinets...")
        response = await bot_api_client.get_user_cabinets(user_id=test_user_id)
        logger.info(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: success={response.success}, status_code={response.status_code}")
        if response.error:
            logger.error(f"   –û—à–∏–±–∫–∞: {response.error}")
        
        # 7. –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–∞–±–∏–Ω–µ—Ç–æ–≤
        logger.info("7Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ validate_all_cabinets...")
        response = await bot_api_client.validate_all_cabinets()
        logger.info(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: success={response.success}, status_code={response.status_code}")
        if response.error:
            logger.error(f"   –û—à–∏–±–∫–∞: {response.error}")
        
        # 8. –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–æ–≤
        logger.info("8Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ get_recent_orders —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π...")
        response = await bot_api_client.get_recent_orders(user_id=test_user_id, status="active")
        logger.info(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: success={response.success}, status_code={response.status_code}")
        if response.error:
            logger.error(f"   –û—à–∏–±–∫–∞: {response.error}")
        
        # 9. –¢–µ—Å—Ç deprecated –º–µ—Ç–æ–¥–æ–≤
        logger.info("9Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ deprecated –º–µ—Ç–æ–¥–æ–≤...")
        response = await bot_api_client.get_cabinet_status(user_id=test_user_id)
        logger.info(f"   get_cabinet_status: success={response.success}, status_code={response.status_code}")
        
        response = await bot_api_client.connect_wb_cabinet(user_id=test_user_id, api_key="test_key")
        logger.info(f"   connect_wb_cabinet: success={response.success}, status_code={response.status_code}")
        
        logger.info("=" * 60)
        logger.info("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

if __name__ == "__main__":
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –º–µ—Ç–æ–¥–æ–≤ API –∫–ª–∏–µ–Ω—Ç–∞")
    print("=" * 60)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
    asyncio.run(test_new_api_methods())
    
    print("=" * 60)
    print("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")
