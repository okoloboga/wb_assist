#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ –±–æ—Ç–∞
–ó–∞–ø—É—Å–∫–∞—Ç—å –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ bot/
"""
import sys
import os
import subprocess

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å (bot/)
sys.path.insert(0, os.path.dirname(os.path.dirname(__file__)))

def run_tests():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã"""
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –±–æ—Ç–∞...")
    
    # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ pytest –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ bot/
    cmd = [
        sys.executable, "-m", "pytest",
        "tests/",
        "-v",  # –ø–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥
        "--tb=short",  # –∫–æ—Ä–æ—Ç–∫–∏–π traceback
        "--cov=.",  # –ø–æ–∫—Ä—ã—Ç–∏–µ –∫–æ–¥–∞ (—Ç–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è)
        "--cov-report=term-missing",  # –æ—Ç—á–µ—Ç –æ –ø–æ–∫—Ä—ã—Ç–∏–∏
        "--asyncio-mode=auto"  # –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º asyncio
    ]
    
    try:
        result = subprocess.run(cmd, check=True)
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–æ–π: {e}")
        return False
    except FileNotFoundError:
        print("‚ùå pytest –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ: pip install pytest pytest-asyncio pytest-cov")
        return False

def run_unit_tests():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ unit —Ç–µ—Å—Ç—ã"""
    print("üß™ –ó–∞–ø—É—Å–∫ unit —Ç–µ—Å—Ç–æ–≤...")
    
    cmd = [
        sys.executable, "-m", "pytest",
        "tests/unit/",
        "-v",
        "--tb=short",
        "--asyncio-mode=auto"
    ]
    
    try:
        subprocess.run(cmd, check=True)
        print("‚úÖ Unit —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Unit —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–æ–π: {e}")
        return False

def run_api_key_tests():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API –∫–ª—é—á–∞"""
    print("üîë –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏ API –∫–ª—é—á–∞...")
    
    cmd = [
        sys.executable, "-m", "pytest",
        "tests/unit/test_api_key_simple.py",
        "-v",
        "--tb=short",
        "--asyncio-mode=auto"
    ]
    
    try:
        subprocess.run(cmd, check=True)
        print("‚úÖ –¢–µ—Å—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ API –∫–ª—é—á–∞ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –¢–µ—Å—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ API –∫–ª—é—á–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–æ–π: {e}")
        return False

if __name__ == "__main__":
    if len(sys.argv) > 1:
        if sys.argv[1] == "unit":
            success = run_unit_tests()
        elif sys.argv[1] == "api-key":
            success = run_api_key_tests()
        else:
            print("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: unit, api-key –∏–ª–∏ –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤")
            success = False
    else:
        success = run_tests()
    
    sys.exit(0 if success else 1)