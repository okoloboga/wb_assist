"""
Webhook —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
"""
import asyncio
import logging
from typing import Dict, Any
from fastapi import FastAPI, HTTPException, Request
from fastapi.responses import JSONResponse
import uvicorn

from core.config import config
from handlers.notifications import handle_new_order_notification, handle_critical_stocks_notification

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è webhook
webhook_app = FastAPI(title="Bot Webhook Server", version="1.0.0")

@webhook_app.post("/webhook/notifications")
async def receive_notification(request: Request):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        data = await request.json()
        
        logger.info(f"üì• RECEIVED WEBHOOK: {data.get('type', 'unknown')}")
        logger.info(f"   Telegram ID: {data.get('telegram_id', 'N/A')}")
        logger.info(f"   Timestamp: {data.get('timestamp', 'N/A')}")
        logger.info(f"   Data keys: {list(data.get('data', {}).keys())}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        notification_type = data.get("type")
        telegram_id = data.get("telegram_id")
        notification_data = data.get("data", {})
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –¥–∞–Ω–Ω—ã—Ö
        if notification_type == "new_order":
            logger.info(f"üì¶ ORDER DATA:")
            logger.info(f"   Order ID: {notification_data.get('order_id', 'N/A')}")
            logger.info(f"   Amount: {notification_data.get('amount', 'N/A')}‚ÇΩ")
            logger.info(f"   Product: {notification_data.get('product_name', 'N/A')}")
            logger.info(f"   Brand: {notification_data.get('brand', 'N/A')}")
            logger.info(f"   Route: {notification_data.get('warehouse_from', 'N/A')} ‚Üí {notification_data.get('warehouse_to', 'N/A')}")
            logger.info(f"   Today stats: {notification_data.get('today_stats', {})}")
            logger.info(f"   Stocks: {notification_data.get('stocks', {})}")
        
        if not notification_type or not telegram_id:
            raise HTTPException(status_code=400, detail="Missing required fields")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        if notification_type == "new_order":
            logger.info(f"üîÑ Processing new order notification for user {telegram_id}")
            await handle_new_order_webhook(telegram_id, notification_data)
            logger.info(f"‚úÖ New order notification processed successfully for user {telegram_id}")
        elif notification_type == "critical_stocks":
            logger.info(f"üîÑ Processing critical stocks notification for user {telegram_id}")
            await handle_critical_stocks_webhook(telegram_id, notification_data)
            logger.info(f"‚úÖ Critical stocks notification processed successfully for user {telegram_id}")
        else:
            logger.warning(f"‚ùì Unknown notification type: {notification_type}")
            return JSONResponse(content={"status": "ignored", "reason": "Unknown type"})
        
        logger.info(f"üéØ WEBHOOK COMPLETED: {notification_type} for user {telegram_id}")
        return JSONResponse(content={"status": "success"})
        
    except Exception as e:
        logger.error(f"Error processing webhook notification: {e}")
        raise HTTPException(status_code=500, detail=str(e))

async def handle_new_order_webhook(telegram_id: int, data: Dict[str, Any]):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ"""
    try:
        # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        from aiogram import Bot
        bot = Bot(token=config.bot_token)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–∫–∞–∑–∞ —á–µ—Ä–µ–∑ API
        import aiohttp
        import asyncio
        
        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã –∑–∞–∫–∞–∑ —É—Å–ø–µ–ª –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å—Å—è
        await asyncio.sleep(3)
        
        async with aiohttp.ClientSession() as session:
            async with session.get(
                f"http://server:8000/api/v1/bot/orders/{data.get('order_id')}",
                params={"telegram_id": telegram_id},
                headers={"X-API-SECRET-KEY": "CnWvwoDwwGKh"}
            ) as response:
                if response.status == 200:
                    order_data = await response.json()
                    text = order_data.get("telegram_text", "üßæ –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞")
                    logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –ø–æ–ª–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–∫–∞–∑–∞ {data.get('order_id')}")
                else:
                    # Fallback –∫ –ø–æ–ª–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
                    logger.warning(f"‚ö†Ô∏è API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞ {data.get('order_id')}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
                    order_id = data.get('order_id', 'N/A')
                    order_date = data.get('date', 'N/A')
                    brand = data.get('brand', 'N/A')
                    product_name = data.get('product_name', 'N/A')
                    nm_id = data.get('nm_id', 'N/A')
                    supplier_article = data.get('supplier_article', '')
                    size = data.get('size', '')
                    barcode = data.get('barcode', '')
                    warehouse_from = data.get('warehouse_from', 'N/A')
                    warehouse_to = data.get('warehouse_to', 'N/A')
                    order_amount = data.get('amount', 0)
                    commission_percent = data.get('commission_percent', 0)
                    commission_amount = data.get('commission_amount', 0)
                    spp_percent = data.get('spp_percent', 0)
                    customer_price = data.get('customer_price', 0)
                    logistics_amount = data.get('logistics_amount', 0)
                    dimensions = data.get('dimensions', '')
                    volume_liters = data.get('volume_liters', 0)
                    warehouse_rate_per_liter = data.get('warehouse_rate_per_liter', 0)
                    warehouse_rate_extra = data.get('warehouse_rate_extra', 0)
                    rating = data.get('rating', 0)
                    reviews_count = data.get('reviews_count', 0)
                    buyout_rates = data.get('buyout_rates', {})
                    order_speed = data.get('order_speed', {})
                    sales_periods = data.get('sales_periods', {})
                    category_availability = data.get('category_availability', '')
                    stocks = data.get('stocks', {})
                    stock_days = data.get('stock_days', {})
                    
                    text = f"üßæ –ó–∞–∫–∞–∑ [#{order_id}] {order_date}\n\n"
                    text += f"üëë {brand} ({brand})\n"
                    text += f"‚úè –ù–∞–∑–≤–∞–Ω–∏–µ: {product_name}\n"
                    text += f"üÜî {nm_id} / {supplier_article} / ({size})\n"
                    text += f"üéπ {barcode}\n"
                    text += f"üöõ {warehouse_from} ‚ü∂ {warehouse_to}\n"
                    text += f"üí∞ –¶–µ–Ω–∞ –∑–∞–∫–∞–∑–∞: {order_amount:,.0f}‚ÇΩ\n"
                    text += f"üí∂ –ö–æ–º–∏—Å—Å–∏—è WB: {commission_percent}% ({commission_amount:,.0f}‚ÇΩ)\n"
                    text += f"üõç –°–ü–ü: {spp_percent}% (–¶–µ–Ω–∞ –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è: {customer_price:,.0f}‚ÇΩ)\n"
                    text += f"üí∂ –õ–æ–≥–∏—Å—Ç–∏–∫–∞ WB: {logistics_amount:,.1f}‚ÇΩ\n"
                    text += f"        –ì–∞–±–∞—Ä–∏—Ç—ã: {dimensions}. ({volume_liters}–ª.)\n"
                    text += f"        –¢–∞—Ä–∏—Ñ —Å–∫–ª–∞–¥–∞: {warehouse_rate_per_liter:,.1f}‚ÇΩ –∑–∞ 1–ª. | {warehouse_rate_extra:,.1f}‚ÇΩ –∑–∞ –ª. —Å–≤—ã—à–µ)\n"
                    text += f"üåü –û—Ü–µ–Ω–∫–∞: {rating}\n"
                    text += f"üí¨ –û—Ç–∑—ã–≤—ã: {reviews_count}\n"
                    text += f"‚öñÔ∏è –í—ã–∫—É–ø/—Å —É—á–µ—Ç–æ–º –≤–æ–∑–≤—Ä–∞—Ç–∞ (7/14/30):\n"
                    text += f"        {buyout_rates.get('7_days', 0):.1f}% / {buyout_rates.get('14_days', 0):.1f}% / {buyout_rates.get('30_days', 0):.1f}%\n"
                    text += f"üí† –°–∫–æ—Ä–æ—Å—Ç—å –∑–∞–∫–∞–∑–æ–≤ –∑–∞ 7/14/30 –¥–Ω–µ–π:\n"
                    text += f"        {order_speed.get('7_days', 0):.2f} | {order_speed.get('14_days', 0):.1f} | {order_speed.get('30_days', 0):.1f} —à—Ç. –≤ –¥–µ–Ω—å\n"
                    text += f"üìñ –ü—Ä–æ–¥–∞–∂ –∑–∞ 7 / 14 / 30 –¥–Ω–µ–π:\n"
                    text += f"        {sales_periods.get('7_days', 0)} | {sales_periods.get('14_days', 0)} | {sales_periods.get('30_days', 0)} —à—Ç.\n"
                    text += f"üíà –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ 90:\n"
                    text += f"        {category_availability}\n"
                    text += f"üì¶ –û—Å—Ç–∞—Ç–æ–∫:\n"
                    for size in ["L", "M", "S", "XL"]:
                        stock_count = stocks.get(size, 0)
                        stock_days_count = stock_days.get(size, 0)
                        text += f"        {size} ({stock_count} —à—Ç.) ‚âà –Ω–∞ {stock_days_count} –¥–Ω.\n"
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        logger.info(f"üì§ SENDING MESSAGE to user {telegram_id}:")
        logger.info(f"   Text length: {len(text)} characters")
        logger.info(f"   Message preview: {text[:100]}...")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.send_message(chat_id=telegram_id, text=text)
        logger.info(f"‚úÖ New order notification sent to user {telegram_id}")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞
        await bot.session.close()
        
    except Exception as e:
        logger.error(f"Error sending new order notification to user {telegram_id}: {e}")
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        try:
            await bot.session.close()
        except:
            pass

async def handle_critical_stocks_webhook(telegram_id: int, data: Dict[str, Any]):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –æ—Å—Ç–∞—Ç–∫–∞—Ö"""
    try:
        # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        from aiogram import Bot
        bot = Bot(token=config.bot_token)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        text = f"‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ù–´–ï –û–°–¢–ê–¢–ö–ò!\n\n"
        
        products = data.get("products", [])
        for product in products:
            text += f"üì¶ {product.get('name', 'N/A')}\n"
            text += f"   –û—Å—Ç–∞—Ç–æ–∫: {product.get('total_stock', 0)} —à—Ç\n"
            text += f"   –†–∞–∑–º–µ—Ä—ã: {product.get('stocks_summary', 'N/A')}\n\n"
        
        text += "üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Å—Ç–∞—Ç–∫–∏ –∏ –ø–æ–ø–æ–ª–Ω–∏—Ç–µ —Å–∫–ª–∞–¥!"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.send_message(chat_id=telegram_id, text=text)
        logger.info(f"Critical stocks notification sent to user {telegram_id}")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞
        await bot.session.close()
        
    except Exception as e:
        logger.error(f"Error sending critical stocks notification to user {telegram_id}: {e}")
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        try:
            await bot.session.close()
        except:
            pass

@webhook_app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è webhook —Å–µ—Ä–≤–µ—Ä–∞"""
    return {"status": "healthy", "service": "bot-webhook"}

def start_webhook_server():
    """–ó–∞–ø—É—Å–∫ webhook —Å–µ—Ä–≤–µ—Ä–∞"""
    logger.info("Starting webhook server on port 8001")
    uvicorn.run(
        webhook_app,
        host="0.0.0.0",
        port=8001,
        log_level=config.log_level.lower()
    )

if __name__ == "__main__":
    start_webhook_server()
