#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç webhook —Å–∏—Å—Ç–µ–º—ã
"""
import asyncio
import json
import aiohttp
from datetime import datetime

# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
TEST_WEBHOOK_URL = "http://localhost:8000/api/v1/notifications/test"
TEST_USER_ID = 5101525651  # –í–∞—à telegram_id

async def test_webhook_system():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ webhook —Å–∏—Å—Ç–µ–º—ã"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ webhook —Å–∏—Å—Ç–µ–º—ã...")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    test_data = {
        "notification_type": "new_order",
        "test_data": {
            "order_id": "TEST_12345",
            "product_name": "–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä",
            "amount": 1500,
            "brand": "–¢–µ—Å—Ç–æ–≤—ã–π –±—Ä–µ–Ω–¥"
        }
    }
    
    headers = {
        "Content-Type": "application/json",
        "X-API-SECRET-KEY": "CnWvwoDwwGKh"  # –í–∞—à API –∫–ª—é—á
    }
    
    try:
        async with aiohttp.ClientSession() as session:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            print(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {TEST_USER_ID}...")
            
            async with session.post(
                TEST_WEBHOOK_URL,
                json=test_data,
                headers=headers,
                params={"telegram_id": TEST_USER_ID}
            ) as response:
                
                if response.status == 200:
                    result = await response.json()
                    print("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
                    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {json.dumps(result, indent=2, ensure_ascii=False)}")
                    
                    if result.get("success"):
                        print("üéâ Webhook —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞: {result.get('error', 'Unknown error')}")
                else:
                    error_text = await response.text()
                    print(f"‚ùå HTTP {response.status}: {error_text}")
                    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")

async def test_user_webhook_setup():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    print("\nüîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook...")
    
    webhook_data = {
        "bot_webhook_url": "https://your-bot-domain.com/webhook/notifications"
    }
    
    headers = {
        "Content-Type": "application/json",
        "X-API-SECRET-KEY": "CnWvwoDwwGKh"
    }
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(
                f"http://localhost:8000/users/webhook",
                json=webhook_data,
                headers=headers,
                params={"telegram_id": TEST_USER_ID}
            ) as response:
                
                if response.status == 200:
                    result = await response.json()
                    print("‚úÖ Webhook URL –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {json.dumps(result, indent=2, ensure_ascii=False)}")
                else:
                    error_text = await response.text()
                    print(f"‚ùå HTTP {response.status}: {error_text}")
                    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ webhook: {e}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ webhook —Å–∏—Å—Ç–µ–º—ã")
    print("=" * 50)
    
    # –¢–µ—Å—Ç 1: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook
    await test_user_webhook_setup()
    
    # –¢–µ—Å—Ç 2: –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    await test_webhook_system()
    
    print("\n" + "=" * 50)
    print("üèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

if __name__ == "__main__":
    asyncio.run(main())
