import pytest
from wb_api.models import WBOrder, WBSale, WBStock

class TestWBModels:
    """–¢–µ—Å—Ç—ã –º–æ–¥–µ–ª–µ–π –¥–∞–Ω–Ω—ã—Ö Wildberries"""
    
    def test_order_model_creation(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ –∑–∞–∫–∞–∑–∞"""
        # ‚úÖ –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–æ–¥–µ–ª–∏ –∑–∞–∫–∞–∑–∞
        order_data = {
            "date": "2023-10-01T12:00:00Z",
            "lastChangeDate": "2023-10-01T12:30:00Z",
            "warehouseName": "–ú–æ—Å–∫–≤–∞",
            "countryName": "–†–æ—Å—Å–∏—è",
            "oblastOkrugName": "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –§–û",
            "regionName": "–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å",
            "supplierArticle": "ART001",
            "nmId": 123456789,
            "barcode": "4651234567890",
            "category": "–û–¥–µ–∂–¥–∞",
            "subject": "–§—É—Ç–±–æ–ª–∫–∞",
            "brand": "Nike",
            "techSize": "M",
            "incomeID": 12345,
            "isSupply": True,
            "isRealization": False,
            "totalPrice": 1500.0,
            "discountPercent": 10,
            "spp": 0.0,
            "finishedPrice": 1350.0,
            "priceWithDisc": 1350.0,
            "isCancel": False,
            "orderType": "–ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π",
            "gNumber": "G123456789"
        }
        
        order = WBOrder(**order_data)
        
        assert order.nmId == 123456789
        assert order.totalPrice == 1500.0
        assert order.finishedPrice == 1350.0
        assert order.warehouseName == "–ú–æ—Å–∫–≤–∞"
    
    def test_order_model_validation(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞"""
        # üî¥ –¢–µ—Å—Ç –Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        invalid_data = {
            "date": "2023-10-01",
            # –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        }
        
        with pytest.raises(ValueError):
            WBOrder(**invalid_data)
    
    def test_sale_model_creation(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ –ø—Ä–æ–¥–∞–∂–∏"""
        # ‚úÖ –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–æ–¥–µ–ª–∏ –ø—Ä–æ–¥–∞–∂–∏
        sale_data = {
            "date": "2023-10-01T14:00:00Z",
            "lastChangeDate": "2023-10-01T14:30:00Z",
            "supplierArticle": "ART001",
            "techSize": "M",
            "barcode": "4651234567890",
            "totalPrice": 1350.0,
            "discountPercent": 10,
            "warehouseName": "–ú–æ—Å–∫–≤–∞",
            "countryName": "–†–æ—Å—Å–∏—è",
            "oblastOkrugName": "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –§–û",
            "regionName": "–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å",
            "incomeID": 12345,
            "odid": 67890,
            "spp": 0.0,
            "forPay": 1215.0,
            "finishedPrice": 1350.0,
            "priceWithDisc": 1350.0,
            "nmId": 123456789,
            "subject": "–§—É—Ç–±–æ–ª–∫–∞",
            "category": "–û–¥–µ–∂–¥–∞",
            "brand": "Nike",
            "gNumber": "G123456789"
        }
        
        sale = WBSale(**sale_data)
        
        assert sale.nmId == 123456789
        assert sale.totalPrice == 1350.0
        assert sale.subject == "–§—É—Ç–±–æ–ª–∫–∞"
    
    def test_stock_model_creation(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ –æ—Å—Ç–∞—Ç–∫–∞"""
        # ‚úÖ –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–æ–¥–µ–ª–∏ –æ—Å—Ç–∞—Ç–∫–∞
        stock_data = {
            "lastChangeDate": "2023-10-01T10:00:00Z",
            "supplierArticle": "ART001",
            "techSize": "M",
            "barcode": "4651234567890",
            "quantity": 50,
            "isSupply": True,
            "isRealization": False,
            "quantityFull": 50,
            "warehouseName": "–ú–æ—Å–∫–≤–∞",
            "nmId": 123456789,
            "subject": "–§—É—Ç–±–æ–ª–∫–∞",
            "category": "–û–¥–µ–∂–¥–∞",
            "daysOnSite": 30,
            "brand": "Nike",
            "SCCode": "SC123",
            "Price": 1500.0,
            "Discount": 10.0
        }
        
        stock = WBStock(**stock_data)
        
        assert stock.nmId == 123456789
        assert stock.quantity == 50
        assert stock.warehouseName == "–ú–æ—Å–∫–≤–∞"