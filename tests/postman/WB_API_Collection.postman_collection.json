{
	"info": {
		"_postman_id": "wb-api-collection-2024",
		"name": "Wildberries API Collection",
		"description": "–ö–æ–ª–ª–µ–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API Wildberries",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{WB_API_KEY}}",
				"type": "string"
			}
		]
	},
	"variable": [
		{
			"key": "base_url",
			"value": "https://statistics-api.wildberries.ru/api/v1/supplier",
			"type": "string"
		},
		{
			"key": "prices_url",
			"value": "https://discounts-prices-api.wildberries.ru/api/v1/list/goods/filter",
			"type": "string"
		},
		{
			"key": "WB_API_KEY",
			"value": "YOUR_API_KEY_HERE",
			"type": "string"
		}
	],
	"item": [
		{
			"name": "üìä Statistics API",
			"item": [
				{
					"name": "Get Orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Ç–≤–µ—Ç - –º–∞—Å—Å–∏–≤",
									"pm.test(\"Response is an array\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"});",
									"",
									"// –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É",
									"pm.test(\"Order structure is valid\", function () {",
									"    const jsonData = pm.response.json();",
									"    if (jsonData.length > 0) {",
									"        const order = jsonData[0];",
									"        pm.expect(order).to.have.property('date');",
									"        pm.expect(order).to.have.property('lastChangeDate');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/orders?dateFrom={{$randomDateRecent}}&flag=1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"orders"
							],
							"query": [
								{
									"key": "dateFrom",
									"value": "{{$randomDateRecent}}",
									"description": "–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞ (YYYY-MM-DD)"
								},
								{
									"key": "flag",
									"value": "1",
									"description": "–§–ª–∞–≥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Sales",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/sales?dateFrom={{$randomDateRecent}}&flag=1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"sales"
							],
							"query": [
								{
									"key": "dateFrom",
									"value": "{{$randomDateRecent}}"
								},
								{
									"key": "flag",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Stocks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"});",
									"",
									"// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É stock –æ–±—ä–µ–∫—Ç–∞",
									"pm.test(\"Stock structure is valid\", function () {",
									"    const jsonData = pm.response.json();",
									"    if (jsonData.length > 0) {",
									"        const stock = jsonData[0];",
									"        pm.expect(stock).to.have.property('lastChangeDate');",
									"        pm.expect(stock).to.have.property('supplierArticle');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/stocks?dateFrom={{$randomDateRecent}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"stocks"
							],
							"query": [
								{
									"key": "dateFrom",
									"value": "{{$randomDateRecent}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "üí∞ Prices API",
			"item": [
				{
					"name": "Get Prices",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞",
									"pm.test(\"Status code is 200 or 401\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
									"});",
									"",
									"// –ï—Å–ª–∏ 200, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É",
									"if (pm.response.code === 200) {",
									"    pm.test(\"Response is an array\", function () {",
									"        const jsonData = pm.response.json();",
									"        pm.expect(jsonData).to.be.an('array');",
									"    });",
									"}",
									"",
									"// –ï—Å–ª–∏ 401, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ",
									"if (pm.response.code === 401) {",
									"    pm.test(\"Unauthorized error message\", function () {",
									"        pm.expect(pm.response.text()).to.include('Unauthorized');",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{prices_url}}",
							"host": [
								"{{prices_url}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "üîß Health Checks",
			"item": [
				{
					"name": "Test API Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ API –∫–ª—é—á —Ä–∞–±–æ—Ç–∞–µ—Ç",
									"pm.test(\"API Key is valid\", function () {",
									"    pm.expect(pm.response.code).to.not.equal(401);",
									"});",
									"",
									"// –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
									"if (pm.response.code === 401) {",
									"    console.log('‚ùå API Key –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');",
									"} else {",
									"    console.log('‚úÖ API Key —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/stocks?dateFrom=2024-01-01",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"stocks"
							],
							"query": [
								{
									"key": "dateFrom",
									"value": "2024-01-01"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	]
}