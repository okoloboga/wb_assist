#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π webhook —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
"""
import asyncio
import json
from aiohttp import web, web_request
from datetime import datetime

class TestWebhookServer:
    """–ü—Ä–æ—Å—Ç–æ–π webhook —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    def __init__(self, port=9000):
        self.port = port
        self.app = web.Application()
        self.app.router.add_post('/webhook/notifications', self.handle_webhook)
        self.app.router.add_get('/health', self.health_check)
        self.received_notifications = []
    
    async def handle_webhook(self, request: web_request.Request):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            data = await request.json()
            
            # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            print(f"\nüîî [{timestamp}] –ü–æ–ª—É—á–µ–Ω–æ webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:")
            print(f"üìã –¢–∏–ø: {data.get('type', 'unknown')}")
            print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {data.get('user_id', 'unknown')}")
            print(f"üìù –î–∞–Ω–Ω—ã–µ: {json.dumps(data.get('data', {}), indent=2, ensure_ascii=False)}")
            print(f"üí¨ Telegram —Ç–µ–∫—Å—Ç: {data.get('telegram_text', 'N/A')}")
            print("-" * 50)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
            self.received_notifications.append({
                "timestamp": timestamp,
                "data": data
            })
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
            return web.json_response({
                "success": True,
                "message": "Webhook received successfully",
                "timestamp": timestamp
            })
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
            return web.json_response({
                "success": False,
                "error": str(e)
            }, status=500)
    
    async def health_check(self, request: web_request.Request):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞"""
        return web.json_response({
            "status": "healthy",
            "notifications_received": len(self.received_notifications),
            "timestamp": datetime.now().isoformat()
        })
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞"""
        print(f"üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ webhook —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {self.port}")
        print(f"üì° Webhook URL: http://localhost:{self.port}/webhook/notifications")
        print(f"üè• Health check: http://localhost:{self.port}/health")
        print("=" * 60)
        
        runner = web.AppRunner(self.app)
        await runner.setup()
        site = web.TCPSite(runner, 'localhost', self.port)
        await site.start()
        
        print("‚úÖ Webhook —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        print("üí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        
        try:
            # –ñ–¥–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ
            await asyncio.Future()
        except KeyboardInterrupt:
            print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook —Å–µ—Ä–≤–µ—Ä–∞...")
            await runner.cleanup()
            print("‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    server = TestWebhookServer(port=9000)
    await server.start()

if __name__ == "__main__":
    asyncio.run(main())
